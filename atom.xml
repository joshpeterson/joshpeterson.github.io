<?xml version="1.0" encoding="utf-8"?> <feed xmlns="http://www.w3.org/2005/Atom"> <title>Josh Peterson - Software Developer</title> <link href="http://joshpeterson.github.io/atom.xml" rel="self"/> <link href="http://joshpeterson.github.io/"/> <updated>2025-03-16T06:16:45+00:00</updated> <id>http://joshpeterson.github.io</id> <author> <name>Josh Peterson</name> <email>petersonjm1@gmail.com</email> </author> <entry> <title>More fun with loop unrolling - C++</title> <link href="http://joshpeterson.github.io/blog/2024/more-fun-with-loop-unrolling-cpp/"/> <updated>2024-02-16T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2024/more-fun-with-loop-unrolling-cpp</id> <content type="html">&lt;p&gt;After exploring &lt;a href=&quot;/learning-loop-unrolling&quot;&gt;loop unrolling in Mojo&lt;/a&gt;, I wanted to take a similar path with C++. Can we get similar assembly code from a C++ compiler, given similar input code? Let’s dive in and find out!&lt;/p&gt; &lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt; &lt;p&gt;I’ve written a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Matrix&lt;/code&gt; class in C++, templated on the row and column size (so those are available at compile time). You can find all of the code for it on &lt;a href=&quot;https://github.com/joshpeterson/on-a-roll/tree/main/cpp&quot;&gt;Github&lt;/a&gt;. Here is the naive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matMul&lt;/code&gt; implementation.&lt;/p&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matMul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I’m testing this using Apple clang version 15 on a macOS M2 processor. As in the previous post, I’ll use Ghidra for local assembly code analysis and Hyperfine for profiling. You can fiddle with the code and compiler options from this post on &lt;a href=&quot;https://godbolt.org/z/oTqWWe39z&quot;&gt;Compiler Explorer&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The naive implementation, with no loop unrolling directives causes clang to produce assembly code for the inner loop similar to what we saw from Mojo.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;.LBB0_5: ldr s1, [x9, x14] add x14, x14, #4 ldr s2, [x16] add x16, x16, #1, lsl #12 cmp x14, #1, lsl #12 fmadd s0, s1, s2, s0 str s0, [x0, x15, lsl #2] b.ne .LBB0_5 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The heart of this code is the &lt;a href=&quot;https://developer.arm.com/documentation/ddi0602/2023-12/SIMD-FP-Instructions/FMADD--Floating-point-fused-Multiply-Add--scalar--?lang=en&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmadd&lt;/code&gt;&lt;/a&gt; instruction, operating on one 32-bit floating point value at a time. Here is the baseline profiling result for this case:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./build/matmul Time (mean ± σ): 1.267 s ± 0.003 s [User: 1.243 s, System: 0.003 Range (min … max): 1.263 s … 1.274 s 10 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;lets-unroll-this&quot;&gt;Let’s unroll this&lt;/h2&gt; &lt;p&gt;With the Mojo case, we found that unrolling the loop gave the compiler the ability to vectorize the loop, and take advantage of the &lt;a href=&quot;https://developer.arm.com/documentation/ddi0602/2022-06/SVE-Instructions/FMLA--vectors---Floating-point-fused-multiply-add-vectors--predicated---writing-addend--Zda---Zda---Zn---Zm--&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt;&lt;/a&gt; instruction, to give us almost 4 times better performance. We can state our intentions to force loop unrolling to the compiler with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#pragma unroll(n)&lt;/code&gt; directive:&lt;/p&gt; &lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#pragma unroll(4) &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numberOfColumns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Interestingly, clang gives us four scalar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmadd&lt;/code&gt; instructions:&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;.LBB0_5: add x17, x10, x14 ldr s1, [x16] add x14, x14, #16 cmp x14, #1, lsl #12 ldp s2, s3, [x17, #-12] fmadd s0, s2, s1, s0 ldr s1, [x16, #4096] ldr s2, [x16, #8192] fmadd s0, s3, s1, s0 ldur s1, [x17, #-4] fmadd s0, s1, s2, s0 ldr s1, [x17] ldr s2, [x16, #12288] add x16, x16, #4, lsl #12 fmadd s0, s1, s2, s0 str s0, [x0, x15, lsl #2] b.ne .LBB0_5 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The performance is slightly better, but nothing like the 3-4x improvement which is possible:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./build/matmul Time (mean ± σ): 1.181 s ± 0.009 s [User: 1.161 s, System: 0.003 s] Range (min … max): 1.163 s … 1.195 s 10 runs &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Why isn’t clang able to vectorize this loop? As it turns out, there is a &lt;a href=&quot;https://llvm.org/docs/Vectorizers.html#diagnostics&quot;&gt;command line option&lt;/a&gt; we can pass to clang to have it tell us that answer: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-Rpass-analysis=loop-vectorize&lt;/code&gt;!&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;remark: loop not vectorized: cannot prove it is safe to reorder floating-point operations; allow reordering by specifying &apos;#pragma clang loop vectorize(enable)&apos; before the loop or by providing the compiler option &apos;-ffast-math&apos;. [-Rpass-analysis=loop-vectorize] result(i, j) += left(i, k) * right(k, j); &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Ahh, the compiler is providing some strict floating point ordering guarantees, and so does not vectorize this loop. If we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#pragma clang loop vectorize(enable)&lt;/code&gt;, let’s see what happens to the generated assembly code.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;.LBB0_9: ldr s4, [x5, x13] add x6, x5, #1, lsl #12 ldr s3, [x5] add x7, x5, #5, lsl #12 add x19, x12, x4 add x4, x4, #32 cmp x4, #1, lsl #12 ld1 { v3.s }[1], [x6] add x6, x5, #2, lsl #12 ld1 { v4.s }[1], [x7] add x7, x5, #6, lsl #12 ldp q5, q6, [x19, #-16] ld1 { v3.s }[2], [x6] add x6, x5, #3, lsl #12 ld1 { v4.s }[2], [x7] add x7, x5, #7, lsl #12 add x5, x5, #8, lsl #12 ld1 { v3.s }[3], [x6] ld1 { v4.s }[3], [x7] fmla v2.4s, v3.4s, v5.4s fmla v1.4s, v4.4s, v6.4s b.ne .LBB0_9 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;We now have two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt; instructions, but the loop has a lot of other register shifting operations that will likely hurt performance. Here is what Hyperfine has to show us:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./build/matmul Time (mean ± σ): 1.002 s ± 0.020 s [User: 0.978 s, System: 0.003 s] Range (min … max): 0.979 s … 1.041 s 10 runs &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;lets-try-another-compiler&quot;&gt;Let’s try another compiler&lt;/h2&gt; &lt;p&gt;One of the great things about the C++ ecosystem is the presence of multiple compiler implementations. Notice in the Compiler Explorer link, I’ve added GCC 13.2. Check out the assembly code it produces for even the naive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matMul&lt;/code&gt;, with no unrolling or vectorization directives.&lt;/p&gt; &lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;.L25: lsl x8, x3, 12 ldr s2, [x1, x3, lsl 2] add x3, x3, 1 ldr q1, [x7, x8] fmla v0.4s, v1.4s, v2.s[0] cmp x3, 1024 bne .L25 &lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is vectorizing by default! This looks very similar to the unrolled output we saw from Mojo. Let’s check the performance of this code.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./build/matmul Time (mean ± σ): 340.7 ms ± 2.1 ms [User: 318.0 ms, System: 3.8 ms] Range (min … max): 337.7 ms … 344.5 ms 10 runs &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This looks better! We’re at nearly 4 times the performance of the naive implementation compiled with clang. Since GCC is able to “see through” our algorithm, it can vectorize the code and take advantage of the SIMD instructions available on the processor.&lt;/p&gt; &lt;h2 id=&quot;c-vs-mojo&quot;&gt;C++ vs. Mojo&lt;/h2&gt; &lt;p&gt;Note that this is not a direct comparison of C++ and Mojo performance. The performance I am measuring involves more than just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matMul&lt;/code&gt; (although that algorithm does dominate the execution time). Things like memory management and random floating point generation also differ.&lt;/p&gt; &lt;p&gt;It is a comparison of the assembly code that different languages and compilers emit. I find it fascinating to see such similar code generated by two different language implementations.&lt;/p&gt; </content> </entry> <entry> <title>Learning loop unrolling</title> <link href="http://joshpeterson.github.io/blog/2024/learning-loop-unrolling/"/> <updated>2024-02-12T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2024/learning-loop-unrolling</id> <content type="html">&lt;p&gt;In the excellent Freakonomics Radio &lt;a href=&quot;https://freakonomics.com/podcast-tag/richard-feynman/&quot;&gt;podcast series&lt;/a&gt; about physicist Richard Feynman (stop reading now an go listen to it!) I heard an interesting tidbit from Feynman:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Knowing the name of something doesn’t mean you understand it. (&lt;a href=&quot;https://www.youtube.com/watch?v=px_4TxC2mXU&quot;&gt;video&lt;/a&gt;)&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;After reading a recent blog post from Modular about &lt;a href=&quot;https://www.modular.com/blog/what-is-loop-unrolling-how-you-can-speed-up-mojo&quot;&gt;loop unrolling&lt;/a&gt;, I realized that I know what loop unrolling is, but I don’t really understand it. This post is my journey to a deeper understanding.&lt;/p&gt; &lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt; &lt;p&gt;I decided to start this deep dive with the &lt;a href=&quot;https://docs.modular.com/mojo/notebooks/Matmul.html&quot;&gt;matrix multiplication documentation&lt;/a&gt; for Mojo, to see how loop unrolling impacts the naive “matmul” algorithm.&lt;/p&gt; &lt;p&gt;I’m doing all of this on an M2 macOS machine, but the results should apply equally to x64 processors.&lt;/p&gt; &lt;p&gt;I’m using a few excellent tools:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;https://ghidra-sre.org/&quot;&gt;Ghidra&lt;/a&gt; to analyze the assembly code built by Mojo&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/sharkdp/hyperfine&quot;&gt;Hyperfine&lt;/a&gt; for benchmarking&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;https://github.com/mstange/samply&quot;&gt;Samply&lt;/a&gt; for profiling&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I’ll be fiddling with this Mojo code, which depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Matrix&lt;/code&gt; type implemented in the documentation linked above, using elements of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DType.float32&lt;/code&gt;. You can find all the code I used for this exploration on &lt;a href=&quot;https://github.com/joshpeterson/on-a-roll/tree/main/mojo&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matmul_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matmul_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;h2 id=&quot;the-wrong-path&quot;&gt;The wrong path&lt;/h2&gt; &lt;p&gt;Sometimes blog posts make it seem like the author knew what they were doing the whole time. For me at least, this is usually not the case. I’ll start by showing how I went down the wrong path.&lt;/p&gt; &lt;p&gt;First, I compiled the code with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mojo build&lt;/code&gt;, then used Ghidra to look at the assembly code. Most of the work here is done in this loop (which is the inner-most of the three loops):&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LAB_100000c48 ldr s1,[x15], #0x4 ldr s2,[x16] fmadd s1,s0,s1,s2 str s1,[x16], #0x4 sub x17,x17,#0x1 cmp x17,#0x1 b.hi LAB_100000c48 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The third instruction - &lt;a href=&quot;https://developer.arm.com/documentation/ddi0602/2023-12/SIMD-FP-Instructions/FMADD--Floating-point-fused-Multiply-Add--scalar--?lang=en&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmadd&lt;/code&gt;&lt;/a&gt; - is the key one here. It is doing one multiply and one add operation, all in one instruction, on 32-bit floating point values. After the mathematics, the loop counter in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x17&lt;/code&gt; register is decremented, and the code jumps back to the top of the loop for the next iteration.&lt;/p&gt; &lt;p&gt;So, I wondered what would happen if I added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unroll&lt;/code&gt; directive to the outer most loop.&lt;/p&gt; &lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matmul_naive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@unroll&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The Mojo compiler dutifully gives me four loops, with three additional copies of the assembly code loop shown above plus some setup and teardown code in between (I’ll avoid showing them here to save space). So this is loop unrolling, cool!&lt;/p&gt; &lt;p&gt;The code must be faster now, right? Let’s see what Hyperfine tells us. I benchmarked the implementation without unrolling against unrolling the loop 4, 8, 16, and 32 times.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./matmul Time (mean ± σ): 361.3 ms ± 3.1 ms [User: 342.3 ms, System: 2.0 ms] Range (min … max): 357.3 ms … 368.2 ms 10 runs Benchmark 2: ./matmul_unrolled4 Time (mean ± σ): 387.7 ms ± 1.7 ms [User: 369.3 ms, System: 1.9 ms] Range (min … max): 384.9 ms … 389.9 ms 10 runs Benchmark 3: ./matmul_unrolled8 Time (mean ± σ): 389.7 ms ± 5.2 ms [User: 373.5 ms, System: 1.7 ms] Range (min … max): 376.6 ms … 394.3 ms 10 runs Benchmark 4: ./matmul_unrolled16 Time (mean ± σ): 394.7 ms ± 1.5 ms [User: 376.3 ms, System: 1.8 ms] Range (min … max): 392.4 ms … 396.7 ms 10 runs Benchmark 5: ./matmul_unrolled32 Time (mean ± σ): 422.0 ms ± 2.4 ms [User: 403.4 ms, System: 1.9 ms] Range (min … max): 416.3 ms … 425.6 ms 10 runs Summary ./matmul ran 1.07 ± 0.01 times faster than ./matmul_unrolled4 1.08 ± 0.02 times faster than ./matmul_unrolled8 1.09 ± 0.01 times faster than ./matmul_unrolled16 1.17 ± 0.01 times faster than ./matmul_unrolled32 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Huh? The code was faster before I started to fiddle with loop unrolling. In all cases, I made the code execute more slowly! I was very confused. Had I read to the end of the Mojo matrix multiply documentation, I would have noticed that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unroll&lt;/code&gt; makes more sense on the inner loop than the outer loop. But I instead went on a hunt to better understand loop unrolling in other languages.&lt;/p&gt; &lt;p&gt;Thankfully, I stumbled across the ARM C++ compiler documentation for &lt;a href=&quot;https://developer.arm.com/documentation/dui0491/i/Compiler-specific-Features/-pragma-unroll---n--&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#pragma unroll&lt;/code&gt;&lt;/a&gt;](which is how C++ compilers spell &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@unroll&lt;/code&gt;). Check out this example:&lt;/p&gt; &lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matrix_multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__restrict&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__restrict&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;__restrict&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* #pragma unroll */&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;src2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;It looks very similar to the naive matrix multiply implementation in Mojo. You can fiddle with &lt;a href=&quot;https://godbolt.org/z/558hMnYKb&quot;&gt;this example&lt;/a&gt; on Compiler Explorer to see the impact of loop unrolling in C++. It got me to thinking - maybe I should try to unroll the inner-most loop in Mojo as well.&lt;/p&gt; &lt;h2 id=&quot;getting-it-right&quot;&gt;Getting it right&lt;/h2&gt; &lt;p&gt;As the Mojo documentation for matrix multiplication suggests, forcing the inner loop to unroll &lt;em&gt;does&lt;/em&gt; improve performance. Let’s get straight to the results from Hyperfine:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Benchmark 1: ./matmul Time (mean ± σ): 362.0 ms ± 4.1 ms [User: 341.3 ms, System: 1.8 ms] Range (min … max): 356.0 ms … 371.9 ms 10 runs Benchmark 2: ./matmul_unrolled4 Time (mean ± σ): 128.2 ms ± 3.9 ms [User: 108.6 ms, System: 1.6 ms] Range (min … max): 124.4 ms … 143.4 ms 21 runs Benchmark 3: ./matmul_unrolled8 Time (mean ± σ): 116.2 ms ± 4.1 ms [User: 98.3 ms, System: 1.6 ms] Range (min … max): 102.8 ms … 119.4 ms 24 runs Benchmark 4: ./matmul_unrolled16 Time (mean ± σ): 114.3 ms ± 3.9 ms [User: 95.3 ms, System: 1.6 ms] Range (min … max): 104.1 ms … 125.7 ms 22 runs Benchmark 5: ./matmul_unrolled32 Time (mean ± σ): 114.3 ms ± 2.9 ms [User: 95.3 ms, System: 1.6 ms] Range (min … max): 109.3 ms … 121.7 ms 23 runs Summary ./matmul_unrolled32 ran 1.00 ± 0.04 times faster than ./matmul_unrolled16 1.02 ± 0.04 times faster than ./matmul_unrolled8 1.12 ± 0.04 times faster than ./matmul_unrolled4 3.17 ± 0.09 times faster than ./matmul &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now this is cool! The unrolled versions all ran about 3 times faster than the naive implementation. But this is not really a complete understanding. Why is the code so much faster with inner loop unrolled? Let’s have a look at the assembly code for that unrolled inner loop.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LAB_100001724 ldr q1,[x15], #0x10 ldr q2,[x16] fmla v2.4S,v0.4S,v1.4S str q2,[x16], #0x10 sub x17,x17,#0x4 cmp x17,#0x4 b.hi LAB_100001724 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Can you spot the difference? It took me a while, so let’s look at the normal code and the unrolled code side by side.&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Normal Unrolled ================== | ====================== ldr s1,[x15], #0x4 | ldr q1,[x15], #0x10 ldr s2,[x16] | ldr q2,[x16] fmadd s1,s0,s1,s2 | fmla v2.4S,v0.4S,v1.4S str s1,[x16], #0x4 | str q2,[x16], #0x10 sub x17,x17,#0x1 | sub x17,x17,#0x4 cmp x17,#0x1 | cmp x17,#0x4 b.hi LAB_100000c48 | b.hi LAB_100001724 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Check out the multiply and add operation, it is spelled differently - &lt;a href=&quot;https://developer.arm.com/documentation/ddi0602/2022-06/SVE-Instructions/FMLA--vectors---Floating-point-fused-multiply-add-vectors--predicated---writing-addend--Zda---Zda---Zn---Zm--&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt;&lt;/a&gt;. This an ARM instruction that does floating point multiply and add, but on a &lt;em&gt;vector&lt;/em&gt; of four values, rather than a &lt;em&gt;scalar&lt;/em&gt; of one value. Also, notice the subtraction in register &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x17&lt;/code&gt; - it now iterates the loop counter by 4, instead of 1. Each time through the unrolled loop, we get four operations, not just one.&lt;/p&gt; &lt;p&gt;We can confirm this by running the Samply profiler:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;samply record ./matmul &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/static/images/learning-loop-unrolling/samply_matmul.png&quot; alt=&quot;samply_matmul.png&quot; title=&quot;Screen shot of Samply output for matmul, showing 327 calls to decrement the loop counter&quot; /&gt;&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;samply record ./matmul_unrolled4 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;&lt;img src=&quot;/static/images/learning-loop-unrolling/samply_matmul_unrolled4.png&quot; alt=&quot;samply_matmul.png&quot; title=&quot;Screen shot of Samply output for matmul_unrolled4, showing 92 calls to decrement the loop counter&quot; /&gt;&lt;/p&gt; &lt;p&gt;While Samply does not report exactly four times fewer calls to the loop decrement, it is pretty close. The unrolled inner loop is doing significantly fewer iterations.&lt;/p&gt; &lt;h2 id=&quot;compilers-️-processors&quot;&gt;Compilers ❤️ Processors&lt;/h2&gt; &lt;p&gt;What is really going on here?&lt;/p&gt; &lt;p&gt;By telling the Mojo compiler to unroll that inner loop, we’re giving it a better chance to use the available hardware. ARMv8-A processors (like the ones in my Mac) have 32 &lt;a href=&quot;https://developer.arm.com/documentation/den0024/a/ARMv8-Registers/NEON-and-floating-point-registers/Scalar-register-sizes&quot;&gt;registers&lt;/a&gt; that are 128 bits wide. The “S” prefix from the normal assembly code means “Word”, or a 32-bit value. The “Q” prefix from the unrolled assembly code means “Quadword”, or a 128-bit value.&lt;/p&gt; &lt;p&gt;In this example our data type is 32-bit floating point values, so the normal example is not using all of the available register space. It is only using 32 bits (one-fourth) of registers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s0&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s1&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s2&lt;/code&gt; during each loop. But with the unrolled loop, the compiler is able to notice the chance to “vectorize” the code, and use the full width of each 128-bit register, where it can put four 32-bit floating point values side by side, and then use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt; instruction to compute the multiply and add operation on all four together. The ARM &lt;a href=&quot;https://developer.arm.com/documentation/den0024/a/ARMv8-Registers/NEON-and-floating-point-registers/Vector-register-sizes&quot;&gt;documentation&lt;/a&gt; explains the interesting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.4s&lt;/code&gt; syntax on each of the arguments to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt;.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Vn.4S - 4 lanes, each containing a 32-bit element&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;So the compiler is able to more efficiently use the registers available on this process.&lt;/p&gt; &lt;p&gt;Why do we need to manually unroll the inner loop to allow the compiler to see this possible optimization? I’m not entirely sure. I suspect the compiler has some limited budget for time spent on loop analysis. After all, we want our to to compile fast as well.&lt;/p&gt; &lt;h2 id=&quot;where-to-next&quot;&gt;Where to next?&lt;/h2&gt; &lt;p&gt;This example is certainly not the best possible matrix multiplication algorithm. The Modular documentation linked above goes into much more detail about techniques to improve its performance. But it does give us a fun little insight into loop unrolling though, and specifically into how it is implemented in Mojo. I wonder what this example looks like in other languages.&lt;/p&gt; &lt;h2 id=&quot;appendix&quot;&gt;Appendix&lt;/h2&gt; &lt;p&gt;Notice in the benchmarking data for the unrolled inner loop, we get slightly better performance as we unroll that inner loop more and more. Skipping by 8, 16, and eventually 32 iterations each yields small marginal gains - but why?&lt;/p&gt; &lt;p&gt;The assembly for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@unroll(32)&lt;/code&gt; case provides a hint:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LAB_1000016dc ldp q1,q2,[x17, #-0x40] ldp q3,q4,[x16, #-0x40] fmla v3.4S,v0.4S,v1.4S fmla v4.4S,v0.4S,v2.4S stp q3,q4,[x16, #-0x40] ldp q1,q2,[x17, #-0x20] ldp q3,q4,[x16, #-0x20] fmla v3.4S,v0.4S,v1.4S fmla v4.4S,v0.4S,v2.4S stp q3,q4,[x16, #-0x20] ldp q1,q2,[x17] ldp q3,q4,[x16] fmla v3.4S,v0.4S,v1.4S fmla v4.4S,v0.4S,v2.4S stp q3,q4,[x16] ldp q1,q2,[x17, #0x20] ldp q3,q4,[x16, #0x20] fmla v3.4S,v0.4S,v1.4S fmla v4.4S,v0.4S,v2.4S stp q3,q4,[x16, #0x20] sub x0,x0,#0x20 add x17,x17,#0x80 add x16,x16,#0x80 cmp x0,#0x20 b.hi LAB_1000016dc &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;There are eight &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt; instructions, set up in four pairs, where each instruction in a given pair is using different result registers. I’m not sure how the Apple M2 implementation works, but I suspect it can take advantage of hardware-level parallelism here, and exec both of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fmla&lt;/code&gt; instructions in a pair at the same time. It sounds like I have more to explore!&lt;/p&gt; </content> </entry> <entry> <title>Constraints are liberating</title> <link href="http://joshpeterson.github.io/blog/2023/constraints-are-liberating/"/> <updated>2023-08-26T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2023/constraints-are-liberating</id> <content type="html">&lt;p&gt;Often constraints seem problematic. We say, “If only this wasn’t holding me back, then I could succeed.” But is that really true? More often than not, constraints can actually be helpful.&lt;/p&gt; &lt;h2 id=&quot;why-do-we-play-games&quot;&gt;Why do we play games?&lt;/h2&gt; &lt;p&gt;Think about games for a moment. What are they but arbitrary sets of constraints? Soccer (aka football) is one of my favorite games. I enjoy playing it, watching it, reading about it. I especially like watching this guy:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/constraints-are-liberating/Lionel Messi.jpg&quot; alt=&quot;Lionel Messi playing soccer&quot; title=&quot;Licensed under CC BY-SA 3.0 Source: https://commons.wikimedia.org/wiki/File:Lionel_Andr%C3%A9s_Messi_Cuccittini.jpg&quot; /&gt;&lt;/p&gt; &lt;p&gt;The things he does within the odd constraints of this game are beautiful to watch.&lt;/p&gt; &lt;p&gt;Why would humans, who have these amazing hands - capable of so many things - want to avoid using them? And why is this game, where we use only our feet, the most popular game in the world? &lt;strong&gt;Secretly, we love constraints.&lt;/strong&gt;&lt;/p&gt; &lt;h2 id=&quot;the-engineering-mindset&quot;&gt;The engineering mindset&lt;/h2&gt; &lt;p&gt;The reality of our existence is that we are constantly constrained. We are constrained spatially by physics, psychologically by emotions, mentally by exhaustion. But constraints are the fertile soil where problems grow.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/constraints-are-liberating/Industrial_Engineer_Working.jpg&quot; alt=&quot;Engineers working&quot; title=&quot;Licensed under CC BY-SA 3.0 Source: https://commons.wikimedia.org/wiki/File:Industrial_Engineer_Working.jpg&quot; /&gt;&lt;/p&gt; &lt;p&gt;What are these two engineers doing? It looks like they are solving a problem. Engineering is the practice of solving problems amid constraints. Aren’t we all engineers sometimes?&lt;/p&gt; &lt;h2 id=&quot;the-artistic-mindset&quot;&gt;The artistic mindset&lt;/h2&gt; &lt;p&gt;Sometimes, like with games, we impose constraints upon ourselves to provide some unique outcome.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/constraints-are-liberating/Artist-painting.jpeg&quot; alt=&quot;An artist painting a face&quot; title=&quot;Licensed under CC BY-SA 3.0 Source: https://commons.wikimedia.org/wiki/File:Artist-painting.jpg&quot; /&gt;&lt;/p&gt; &lt;p&gt;Maybe this artist is painting a portrait of someone. Wouldn’t it be better to take a photo of that person? Certainly the photo would provide more detail about the person’s face. It would be an imperfect, yet more faithful representation of the truth.&lt;/p&gt; &lt;p&gt;There is something about the constraint of pigment on a canvas, something about the creativity that constraint allows which means the final portrait is different, and maybe somehow better, than a precise photo. Aren’t we all artists sometimes?&lt;/p&gt; &lt;h2 id=&quot;creativity-is-the-key&quot;&gt;Creativity is the key&lt;/h2&gt; &lt;p&gt;Sometimes constraints are thrust upon us - we need an engineering mindset to solve problems (this is why I love writing software). Sometimes we willfully accept constraints - we use an artistic mindset to fashion something beautiful (like Messi does on the soccer field).&lt;/p&gt; &lt;p&gt;In both cases, we use creativity to “escape” the constraints, in some sense. It is this process of creation that truly sets us free, that gives us satisfaction.&lt;/p&gt; &lt;p&gt;Since we cannot escape constraints, let’s instead embrace them!&lt;/p&gt; </content> </entry> <entry> <title>Span - making C arrays fun since 2020</title> <link href="http://joshpeterson.github.io/blog/2022/span-making-c-arrays-fun-since-2020/"/> <updated>2022-01-24T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2022/span-making-c-arrays-fun-since-2020</id> <content type="html">&lt;p&gt;I just love &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/span&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::span&lt;/code&gt;&lt;/a&gt;! I’ve written about it before &lt;a href=&quot;/using-span-with-argv&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/a-zero-cost-abstraction&quot;&gt;here&lt;/a&gt;. Starting in C++20 our friend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; lets us write expressive code with little or no cost in standard C++.&lt;/p&gt; &lt;p&gt;And now I’ve learned that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; can help us make C arrays safe, fun, and expressive too!&lt;/p&gt; &lt;h2 id=&quot;are-c-arrays-evil&quot;&gt;Are C arrays evil?&lt;/h2&gt; &lt;p&gt;Let’s face it, C arrays can be difficult to use properly. They don’t carry around information about their size that is available at run time, they decay to pointers (which might be &lt;a href=&quot;https://digitalmars.com/articles/C-biggest-mistake.html&quot;&gt;C’s biggest mistake&lt;/a&gt;), and they are notoriously difficult to get right in large code bases. As they get passed around they can cause subtle security problems.&lt;/p&gt; &lt;p&gt;But they are also so simple and expressive, I really want to be able to use them with confidence! That’s where are friend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; comes in.&lt;/p&gt; &lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt; &lt;p&gt;If you have a function that accepts a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; to express the intent that the function expects a continuous block of a fixed number of objects, passing a C array to that argument might be the best option for code readability, expressiveness, and performance.&lt;/p&gt; &lt;p&gt;You can find all of the code discussed in this post on Compiler Explorer &lt;a href=&quot;https://godbolt.org/z/67brrqbfa&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt; &lt;p&gt;Suppose you have a function like this to process a list of points:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Processing {} points&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;points&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;blockquote&gt; &lt;p&gt;These examples will use the &lt;a href=&quot;https://fmt.dev&quot;&gt;fmt&lt;/a&gt; library to print to standard out.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;This function sums the x and y values, and returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; containing the sum, although the behavior of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; function is not too important - we really care about the functions that call it.&lt;/p&gt; &lt;p&gt;How could we feed information into that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; function? We’ll try three different approaches, and output the results like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Point: ({}, {})&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseStdArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UseCArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h2 id=&quot;first-up---vector&quot;&gt;First up - vector&lt;/h2&gt; &lt;p&gt;By default, I always reach for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt; when I need an container of contiguous objects, or, really, any container. Is the best default option, efficient and flexible. The code to feed our points to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Use the Compiler Explorer link above to have a look at the assembly code GCC generates at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O2&lt;/code&gt;:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;UseVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8589934593&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17179869187&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25769803781&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movdqa&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lea&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movups&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18446744073709551615&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;72&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.L20&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.L21&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;There is a lot going on here! Recall, we want to put six four-byte integers into memory (or registers) and pass them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; function, along with information that those integers make up three &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; objects - that’s it.&lt;/p&gt; &lt;p&gt;And eek! Check out the call to operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new&lt;/code&gt; on line 15 and operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt; on line 31. The code is allocating memory from the heap for something that is completely determined at compile time.&lt;/p&gt; &lt;p&gt;OK, so a vector might not be the best option here. Let’s look at arrays.&lt;/p&gt; &lt;h2 id=&quot;stdarray-vs-c-array&quot;&gt;std::array vs. C array&lt;/h2&gt; &lt;p&gt;The C++ code to use both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::array&lt;/code&gt; and a C array looks pretty similar to the code for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseStdArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}}};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseCArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;It is really cool that GCC generates the same assembly code for both of these functions:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;UseStdArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; or, UseCArray():&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8589934593&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17179869187&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25769803781&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sp&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;18446744073709551615&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ul&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;And the code here looks much simpler. On line 3 we put the size of the array into a register, then the following lines get the values on to the stack, and then make call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt;. Short of computing the result at compile time (spoiler alert!) this seems like the best we can do.&lt;/p&gt; &lt;p&gt;So which is better C++ code - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseStdArray&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCArray&lt;/code&gt;?&lt;/p&gt; &lt;p&gt;First, check out the extra curly braces required for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::array&lt;/code&gt; case. It turns out there is some confusion among compilers about how this should work, with &lt;a href=&quot;https://stackoverflow.com/questions/8192185/using-stdarray-with-initialization-lists&quot;&gt;GCC at least&lt;/a&gt; reporting an error when they are not there. They just add unnecessary visual clutter, so I prefer a solution without them.&lt;/p&gt; &lt;p&gt;Second, we must indicate the size of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::array&lt;/code&gt; in the code. In this case, when the array is initialized with data so the information about the size is repeated, and that can lead to problems. It seems better to &lt;a href=&quot;https://quuxplusone.github.io/blog/2020/08/06/array-size/&quot;&gt;avoid mentioning the size twice&lt;/a&gt; at all.&lt;/p&gt; &lt;p&gt;The C array wins on both of these points - its initialization is simple as it can be, and its size is inferred from the its initial value - cool! Then of course inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; the array becomes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt;, so it is safe to iterate and use without any worry about buffer overflows.&lt;/p&gt; &lt;h2 id=&quot;but-wait-theres-more&quot;&gt;But wait, there’s more&lt;/h2&gt; &lt;p&gt;Let’s crank up the optimization level to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-O3&lt;/code&gt; and see if that helps the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;’s case here.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;UseVector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movdqa&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.LC1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.LC2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movaps&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movdqa&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FLAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.LC0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movups&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm5&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basic_string_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movdqu&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;XMMWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rdi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pshufd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pshufd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;85&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ecx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;punpckldq&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;paddd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movq&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;xmm0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbx&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rbp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;r12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;jmp&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;.L15&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Well, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; was inlined into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseVector&lt;/code&gt;, but we still have heap allocation and lots of computation. Compare this to the other &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseStdArray&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCArray&lt;/code&gt; (again which compile to the same code):&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;span class=&quot;nf&quot;&gt;UseStdArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; or, UseCArray():&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;OFFSET&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;FLAT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.LC0&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rcx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;QWORD&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;PTR&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basic_string_view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;v7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rsp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;movabs&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;51539607561&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This looks much nicer. Now the code just passes the size of the array to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; function and returns the result, which was computed at compile time! The compiler can “see” through the initialization and remove all of the code for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Process&lt;/code&gt; function.&lt;/p&gt; &lt;h2 id=&quot;the-real-heroes&quot;&gt;The real heroes&lt;/h2&gt; &lt;p&gt;So like Samwise in Lord of the Rings, the real hero of this story is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::span&lt;/code&gt;, which allows us to use the simplicity and expressiveness of C arrays in a safe way.&lt;/p&gt; &lt;p&gt;Oh, and of course your local neighborhood C++ compiler author (compilers are pretty amazing).&lt;/p&gt; &lt;h2 id=&quot;edits&quot;&gt;Edits&lt;/h2&gt; &lt;p&gt;Reddit commenter elcapitaine helpfully &lt;a href=&quot;https://www.reddit.com/r/cpp/comments/sc152g/comment/hu4xano/?utm_source=share&amp;amp;utm_medium=web2x&amp;amp;context=3A&quot;&gt;pointed out&lt;/a&gt; that in C++20 there is a &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/array/to_array&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::to_array&lt;/code&gt;&lt;/a&gt; helper that makes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseStdArray&lt;/code&gt; case nicer to write:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UseStdArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}});&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This looks much nicer than my code above - it does not list the array size twice and avoids the odd double curly braces.&lt;/p&gt; </content> </entry> <entry> <title>Game theory fun in the NFL</title> <link href="http://joshpeterson.github.io/blog/2022/game-theory-fun-in-the-nfl/"/> <updated>2022-01-13T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2022/game-theory-fun-in-the-nfl</id> <content type="html">&lt;p&gt;Sunday night’s NFL game featured a fun game theory twist. The Los Angeles Chargers and the Las Vegas Raiders would each make the playoffs if they won the game, but they would &lt;em&gt;both&lt;/em&gt; make the playoffs if they tied. Of course they could have chosen to kneel down each play of the game, tie 0-0 and be guaranteed a spot in the playoffs.&lt;/p&gt; &lt;p&gt;That did not happen - we’ll see why that is not surprising in a moment. The players and coaches made hundreds of decisions throughout the game, but at the pivotal moment, did they make the right decision?&lt;/p&gt; &lt;p&gt;To get a handle on what happened in the game, I recommend Bill Barnwell’s great &lt;a href=&quot;https://www.espn.com/nfl/story/_/id/33032641/raiders-win-make-nfl-playoffs-did-chargers-blow-teams-played-tie-wild-ending-explained&quot;&gt;summary&lt;/a&gt; on ESPN.&lt;/p&gt; &lt;h2 id=&quot;the-prisoners-dilemma&quot;&gt;The prisoner’s dilemma&lt;/h2&gt; &lt;p&gt;Before the game started the two teams were faced with the class game theory problem called &lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner%27s_dilemma&quot;&gt;The Prisoner’s Dilemma&lt;/a&gt; (actually it is not &lt;em&gt;quite&lt;/em&gt; the same, but we’ll fudge the numbers a bit to make it fit). Basically, both teams could benefit if they can agree and trust each other to keep the agreement (spoiler alert: they can’t).&lt;/p&gt; &lt;h2 id=&quot;optimization-functions&quot;&gt;Optimization functions&lt;/h2&gt; &lt;p&gt;We can define &lt;a href=&quot;/a-brief-introduction-to-nash-games&quot;&gt;Nash games&lt;/a&gt; like this in terms of an optimization function for each player, usually named \(J\). In this case, the “players” are the Raiders and Chargers, so we’ll name the functions \(J_R\) and \(J_C\).&lt;/p&gt; &lt;p&gt;Each team can choose to play for the win or the tie, and the result of the function will be their seed in the playoffs, either 6 or 7 (spots in the playoffs) or 8 (out of the playoffs). Each team is aiming to get the lowest value for their function.&lt;/p&gt; &lt;p&gt;For example, if the Raiders play for a win and the Chargers play for a tie, then the Raiders will win the game and have the 6 seed in the playoffs. Their function looks like this:&lt;/p&gt; \[J_R(Win,Tie)=6\] &lt;p&gt;If on the other hand the Raiders play it safe and kneel down each time to tie, but the Chargers play for the win, the Raiders’ function is&lt;/p&gt; \[J_R(Tie,Win)=8\] &lt;p&gt;and the Raiders are out of the playoffs. We’ll list the Raiders’ strategy as the first parmeter to the function and the Chargers’ as the second.&lt;/p&gt; &lt;p&gt;Each team has four possble outcomes then. For the Raiders they are:&lt;/p&gt; \[J_R(Win,Win)=6\] \[J_R(Win,Tie)=6\] \[J_R(Tie,Win)=8\] \[J_R(Tie,Tie)=7\] &lt;p&gt;And for the Chargers:&lt;/p&gt; \[J_C(Win,Win)=6\] \[J_C(Win,Tie)=8\] \[J_C(Tie,Win)=6\] \[J_C(Tie,Tie)=6\] &lt;p&gt;One note here: if both teams try to win, only one actually will. So they both plan to get a 6 seed if they win.&lt;/p&gt; &lt;p&gt;These are much easier to visualize in a table:&lt;/p&gt; \[\begin{array}{c|ccc} &amp;amp; &amp;amp; Chargers \\ \hline &amp;amp; &amp;amp; Win &amp;amp; Tie \\ Raiders &amp;amp; Win &amp;amp; 6,6 &amp;amp; 6,8 \\ &amp;amp; Tie &amp;amp; 8,6 &amp;amp; 7,6 \end{array}\] &lt;p&gt;The first entry in each pair of numbers is the Raiders’ playoff seed (i.e. function value). The second entry is the Chargers playoff seed.&lt;/p&gt; &lt;p&gt;We can see very quickly when neither team has an advantage at the start of the game, if one team starts to play for a tie, by, say, kneeling the ball on their first possession, then the other team immediately has an incentive to play to win. So very quickly both teams will play to win, and one of them will not make the playoffs.&lt;/p&gt; &lt;h2 id=&quot;reducing-the-game&quot;&gt;Reducing the game&lt;/h2&gt; &lt;p&gt;We can reduce Nash games like this to be &lt;em&gt;minimal ordinal&lt;/em&gt; games, where we rank the preferences of each player and ignore the actual optimization function values. This game reduces to this (assuming the Chargers would rather win than tie, even though they get the 6 seed in the playoffs either way):&lt;/p&gt; \[\begin{array}{c|ccc} &amp;amp; &amp;amp; Chargers \\ \hline &amp;amp; &amp;amp; Win &amp;amp; Tie \\ Raiders &amp;amp; Win &amp;amp; 1,1 &amp;amp; 1,2 \\ &amp;amp; Tie &amp;amp; 2,1 &amp;amp; 2,2 \end{array}\] &lt;p&gt;By reducing this game to its minimal form, we can care only about the 1’s in the table, and can compare it with other 2x2 games that have the same minimal form. The prisoner’s dilemma game (and many others) reduce to this same minimal ordinal game.&lt;/p&gt; &lt;p&gt;The &lt;em&gt;Nash Equilibrium&lt;/em&gt; for the game is the cell where two 1’s exist. The predicts the decisions that the players will make, where the game will settle so that no team is changing there decision. And indeed it did! The teams will not collude to tie and both make the playoffs.&lt;/p&gt; &lt;h2 id=&quot;the-pivotal-play&quot;&gt;The pivotal play&lt;/h2&gt; &lt;p&gt;But the &lt;em&gt;actual&lt;/em&gt; football game brought even more game theory fun! After 69 minutes of football, the teams were tied with just 38 seconds left in overtime.&lt;/p&gt; &lt;p&gt;The Raiders had the ball at the Chargers’ 39 yard line. From here they could kick a 57-yard field goal to win - by no means a sure thing. But they were nearly guaranteed a tie, and a trip to the playoffs. Would they kneel the ball to run out the clock, or are they willing to go for the win?&lt;/p&gt; &lt;p&gt;At this point both teams again have two options. The Raiders can try play for the win and try to move the ball closer for an easier field goal, or they can kneel down and end the game. The Chargers can stick with their base defense, or call a time out to put in a run-specific defense to try to stop the Raiders from getting closer.&lt;/p&gt; &lt;p&gt;The game looks like this, again expressed in terms of playoff seeds:&lt;/p&gt; \[\begin{array}{c|ccc} &amp;amp; &amp;amp; Chargers \\ \hline &amp;amp; &amp;amp; Play &amp;amp; Change \\ Raiders &amp;amp; Run &amp;amp; 6,8 &amp;amp; 6,6 \\ &amp;amp; Kneel &amp;amp; 7,6 &amp;amp; 7,6 \end{array}\] &lt;p&gt;Let’s reduce this one a well:&lt;/p&gt; \[\begin{array}{c|ccc} &amp;amp; &amp;amp; Chargers \\ \hline &amp;amp; &amp;amp; Play &amp;amp; Change \\ Raiders &amp;amp; Run &amp;amp; 1,2 &amp;amp; 1,1 \\ &amp;amp; Kneel &amp;amp; 2,1 &amp;amp; 2,1 \end{array}\] &lt;p&gt;The Chargers clearly want the Raiders to kneel down, then no matter what they do, the Chargers make the playoffs. But if the Raiders kneel, the will get the 7 seed, and that is pretty much guaranteed at this point. So the Raiders can take the initiative and go for that 6 seed.&lt;/p&gt; &lt;p&gt;The game has changed now from a Nash game, where the players are balanced, to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Stackelberg_competition&quot;&gt;Stackelberg&lt;/a&gt; game, where one player is the leader, who acts first.&lt;/p&gt; &lt;p&gt;The Raiders are the leader here, and there best option is the execute a play (likely a low-risk running play, to keep the clock going). Sure enough, they did not line up in a formation to kneel the ball - they were ready to try to go for the win. So we forget about the second row in this table - the Raiders will execute a play. What will the Chargers do?&lt;/p&gt; &lt;p&gt;The Chargers recognized that their current defense did not have the correct personnel on the field to stop a running play, so their coach called a time out in order to change the personnel.&lt;/p&gt; &lt;p&gt;At first this seems wrong - why would the Chargers’ coach call a timeout and stop the clock when he wants the game to end in a tie? But recognizing the Raiders incentive to execute a play and try to gain enough yards to kick a field goal and win, the Chargers’ coach made the correct decision.&lt;/p&gt; &lt;p&gt;In the end, the Raiders ran a play against the Chargers better run defense - and still gained 10 yards! So although the Chargers made the correct decision, the execution of the play changed the game again. Now the Raiders can (and did) take a high-percentage field goal and made it to win the game.&lt;/p&gt; &lt;h2 id=&quot;a-counter-factual&quot;&gt;A counter-factual&lt;/h2&gt; &lt;p&gt;What would have happened if the Chargers had the ball in the same situation? The game would have looked like this:&lt;/p&gt; \[\begin{array}{c|ccc} &amp;amp; &amp;amp; Chargers \\ \hline &amp;amp; &amp;amp; Run &amp;amp; Kneel \\ Raiders &amp;amp; Play &amp;amp; 7,6 &amp;amp; 7,6 \\ &amp;amp; Change &amp;amp; 7,6 &amp;amp; 7,6 \end{array}\] &lt;p&gt;The Chargers could not improve their playoff seeding by running plays to try to get closer to kick a winning field goal. The Raiders also have no options to improve their seeding. So they likely would have kneeled the ball, and both team would have made the playoffs. In a Stackelberg game, being the leader really matters!&lt;/p&gt; &lt;h2 id=&quot;game-theory-ftw&quot;&gt;Game theory FTW!&lt;/h2&gt; &lt;p&gt;While I doubt the coaches or players were actively doing this kind of analysis before or during the game, I find it fascinating that game theory correctly predicted the behavior of the teams both teams.&lt;/p&gt; &lt;p&gt;I wonder what else game theory can predict?&lt;/p&gt; </content> </entry> <entry> <title>Docker for C++ builds</title> <link href="http://joshpeterson.github.io/blog/2020/docker-for-c-plus-plus-builds/"/> <updated>2020-06-26T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2020/docker-for-c-plus-plus-builds</id> <content type="html">&lt;p&gt;A few years ago, one of my colleagues at Unity was discussing some work to get our tests running on a new local CI system. She described a recent discussion with developer services team as “Docker, Docker, Kubernetes” (hearkening back to the famous Seinfeld &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Yada_Yada&quot;&gt;Yada, Yada&lt;/a&gt; episode). As a developer with no experience in “cloud” things, this is often how I feel. These “containers” seem to be so useful, yet magical and out of reach for me. So I decided to go off on a quest and slay the “Docker, Docker, Kubernetes” dragon (well, at least Docker, I still don’t know what Kubernetes is).&lt;/p&gt; &lt;h2 id=&quot;using-docker-on-ci-for-c-linux-builds&quot;&gt;Using Docker on CI for C++ Linux builds&lt;/h2&gt; &lt;p&gt;One of my biggest difficulties with hobby C++ project is dealing with CI systems. &lt;a href=&quot;https://travis-ci.com&quot;&gt;Travis CI&lt;/a&gt; has a great free service for open source projects, but often I would complete a new feature locally, only to see it fail on CI. There must be a better way to reproduce the CI build configuration locally!&lt;/p&gt; &lt;p&gt;In addition, keeping up with the latest C++ compiler versions on CI is difficult. The feedback loop required to change a .yml file, push a change, then wait for a build to run on CI is simply too long. Local iteration would be much more efficient.&lt;/p&gt; &lt;h3 id=&quot;the-final-product&quot;&gt;The final product&lt;/h3&gt; &lt;p&gt;If you’re not interested in the details, just check out the Travis CI &lt;a href=&quot;https://github.com/joshpeterson/cpp-template/blob/master/.travis.yml&quot;&gt;configuration&lt;/a&gt; in my cpp-template repository. I’m pretty happy with the end result. Each CI step on Linux is a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; invocation that I can easily run locally.&lt;/p&gt; &lt;h3 id=&quot;creating-a-docker-container&quot;&gt;Creating a Docker container&lt;/h3&gt; &lt;p&gt;A container is a lightweight Linux installation where you explicitly define &lt;em&gt;everything&lt;/em&gt; that is installed.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Lightweight: it is much smaller in size than a full Linux installation; it “boots up” very fast.&lt;/li&gt; &lt;li&gt;Linux: It is running a real Linux OS, and must run “on top of” a full Linux installation.&lt;/li&gt; &lt;li&gt;You define what is installed: You must indicate all of the packages (e.g. in the apt-get sense) that are installed - you don’t have access to anything else.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I’m sure this is not a good technical description of containers, but for someone with no experience in this world, I find it helpful to view them like this.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docker.com&quot;&gt;Docker&lt;/a&gt; is a tool for creating and running containers (there are probably other such tools out there). It accepts a Dockerfile as input. A Dockerfile is a text document written in a domain-specific language that Docker understands. This file is used to tell Docker about that third point above - what packages should be installed on your Linux container.&lt;/p&gt; &lt;p&gt;These Docker inputs can get pretty complex, but you can also accomplish a lot with a simple one. My Dockerfile for builds with GCC is below:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM gcc:10.1.0 RUN apt-get update RUN apt-get install -y cmake ninja-build time &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Let’s break this down:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM gcc:10.1.0 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;The first line is the most interesting. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FROM&lt;/code&gt; statement means “Create this container by starting from another container first.” The starting container in this case is named “gcc” (more on that later). The part after the colon is the “tag”, which could be anything, but is most often a version number.&lt;/p&gt; &lt;p&gt;But where does this “gcc” container come from? Docker has a service called &lt;a href=&quot;https://hub.docker.com/&quot;&gt;Dockerhub&lt;/a&gt; where anyone can publish Docker containers. The name “gcc” means “Look for a container named gcc on Dockerhub. If you find one, download it, and use it as the starting point for my container.”&lt;/p&gt; &lt;p&gt;The GCC developers publish a container on Dockerhub for each GCC release. This container is based in turn on a Debian Linux container. So now my container can have everything set up and ready to go to use GCC version 10.1.0 with just one line in my Dockerfile, neat!&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN apt-get update RUN apt-get install -y cmake ninja-build time &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;These last to lines use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RUN&lt;/code&gt; statement, which tells Docker to execute the text following is as a shell command. The two specific commands I’m using tell the Debian package manager (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;) to first update to repositories to look for the latest packages, then install three packages that I need to build the C++ code in my projects: CMake, Ninja, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;time&lt;/code&gt; command (see, you really need to install, &lt;em&gt;everything&lt;/em&gt; you need).&lt;/p&gt; &lt;h3 id=&quot;solving-my-problems&quot;&gt;Solving my problems&lt;/h3&gt; &lt;p&gt;Wow, so this is really cool - I’m doing cloud stuff! ☁️ But seriously, this solves my two problems with CI:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Updating the version of a C++ compiler is now as simple as changing one version number in my Dockerfile.&lt;/li&gt; &lt;li&gt;I can test my CI set up locally by running one Docker command, so iteration on CI changes is now much faster.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;🎉&lt;/p&gt; &lt;h3 id=&quot;my-docker-images&quot;&gt;My docker images&lt;/h3&gt; &lt;p&gt;I’ve created Docker images for &lt;a href=&quot;https://hub.docker.com/r/petersonjm1/gcc&quot;&gt;GCC&lt;/a&gt;, &lt;a href=&quot;https://hub.docker.com/r/petersonjm1/clang&quot;&gt;Clang&lt;/a&gt;, and &lt;a href=&quot;https://hub.docker.com/r/petersonjm1/emscripten&quot;&gt;Emscripten&lt;/a&gt; on Linux (I’m working on a Windows image, but that is not complete yet). You can check them out on Dockerhub and maybe use them as a base for your image. Happy cloud fun! 🌩️&lt;/p&gt; </content> </entry> <entry> <title>A zero cost abstraction?</title> <link href="http://joshpeterson.github.io/blog/2018/a-zero-cost-abstraction/"/> <updated>2018-11-21T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2018/a-zero-cost-abstraction</id> <content type="html">&lt;p&gt;Recently Joachim (CTO at Unity) has been talking about “performance by default”, the mantra that software should be as fast as possible from the outset. This is driving the pretty cool stuff many at Unity are doing around things like ECS, the C# job system, and Burst (find lots more about that &lt;a href=&quot;https://unity3d.com/unity/features/job-system-ECS&quot;&gt;here&lt;/a&gt;).&lt;/p&gt; &lt;p&gt;One question Joachim has asked internally of Unity developers is (I’m paraphrasing here): “What is the absolute lower bound of time this code could use?” This strikes me as a really useful way to think about performance. The question changes from “How fast is this?” to “How fast could this be?”. If the answers to those two questions are not the same, the next question is “Do we &lt;em&gt;really&lt;/em&gt; need the additional overhead?”&lt;/p&gt; &lt;p&gt;Another way to think about this is to consider the zero-cost abstraction, a concept much discussed in the C++ and Rust communities. Programmers are always building abstractions, and those abstractions often lead to the difference between “how fast it is” and “how fast it could be”. We want to provide useful abstractions that don’t hurt performance.&lt;/p&gt; &lt;h2 id=&quot;reading-some-bytes&quot;&gt;Reading some bytes&lt;/h2&gt; &lt;p&gt;I was thinking about all of this recently while writing some code to read bytes from a binary file. The first bit of code that rolled off my fingers was:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This feels like the “canonical” way to read bytes into a buffer. The API has no abstraction - the function gets exactly what it needs: a pointer to some memory location and the number of bytes to read into that memory location.&lt;/p&gt; &lt;p&gt;I ran clang-tidy on this code, and it was not happy:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;binary_reader.cpp:20:5: error: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic,-warnings-as-errors] buffer[i] = ReadByte(); &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;At first this error was a bit confusing, but after staring at the code a bit, I think I determined why clang-tidy doesn’t like it: pointer arithmetic, while the fastest way to address a buffer, is prone to errors. Specifically, the user of this function can pass &lt;em&gt;any&lt;/em&gt; value for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt;. The function has no choice but to dutifully write to memory where the client asked for it, so even a well-meaning client who passes the wrong &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; can cause memory corruption. We need an abstraction which makes this function difficult to misuse.&lt;/p&gt; &lt;h2 id=&quot;enter-the-span&quot;&gt;Enter the span&lt;/h2&gt; &lt;p&gt;What options do we have for an interface to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadBytes&lt;/code&gt; that makes it easy to pass the size of the buffer correctly? Lets’ list a few&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadBytes(std::vector&amp;lt;uint8_t&amp;gt;&amp;amp; buffer);&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template&amp;lt;size_t N&amp;gt; ReadBytes(std::array&amp;lt;uint8_t, N&amp;gt;&amp;amp; buffer);&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;template&amp;lt;typename Iterator&amp;gt; ReadBytes(Interator begin, Iterator end);&lt;/code&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;All of these will work, but they seem a bit restrictive of the client in different ways. In addition, some of these APIs encode &lt;em&gt;more&lt;/em&gt; information than we really need. All the client really wants to say is: “Here is a buffer I’ve set aside in memory, please fill it up with bytes, thanks!”&lt;/p&gt; &lt;p&gt;Thankfully, there is an abstraction in C++20 for a collection of objects of a given type, along with their size: &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/span&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::span&lt;/code&gt;&lt;/a&gt;. I’m not using C++20 for this project, but I can use the same type from the GSL, &lt;a href=&quot;https://github.com/Microsoft/GSL/blob/master/include/gsl/span&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsl::span&lt;/code&gt;&lt;/a&gt;. I wrote a bit about span’s cousin &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsl::multi_span&lt;/code&gt; &lt;a href=&quot;/using-span-with-argv&quot;&gt;earlier&lt;/a&gt;, learning that it has a small, non-zero cost. I wanted to dive a bit deeper with span.&lt;/p&gt; &lt;p&gt;The new implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReadBytes&lt;/code&gt; looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Better yet, I can call it with a number of different buffer types, all in a simple way:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;For each of these cases, the compiler infers the size of the buffer, so I don’t have to make sure I pass the proper size of the buffer. Problem solved!&lt;/p&gt; &lt;h2 id=&quot;but-at-what-cost&quot;&gt;But at what cost?&lt;/h2&gt; &lt;p&gt;Now we have a safe API to read bytes into a buffer, and we know the baseline fastest way to read bytes into the buffer. If performance by default matters, we need to know how much we pay for this safe abstraction.&lt;/p&gt; &lt;p&gt;One good way to understand the cost of code is to investigate the generated assembly code, where there is &lt;em&gt;very&lt;/em&gt; little abstraction. Take a look at this &lt;a href=&quot;https://godbolt.org/z/BdEqK5&quot;&gt;comparison&lt;/a&gt; (the first implementation is on the left, the safe one is on the right).&lt;/p&gt; &lt;p&gt;The safe implementation only costs us one additional comparison instruction (line 15 on the right) at the start of the for loop. I think this is checking an error condition, so I expect most of the time this branch will not be taken. I assume the processor will notice that pretty quickly and optimize for the non-error case.&lt;/p&gt; &lt;p&gt;Note that we do pay a code size price for this abstraction as well. We have five additional instructions here.&lt;/p&gt; &lt;p&gt;Lets measure the run time performance cost. It looks like it will be small, but can we be sure? I wrote this benchmark:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;binary_reader.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;benchmark/benchmark.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;vector&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadEightBytesRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../../../test/data/simple.wasm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadBytes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoNotOptimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BENCHMARK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadEightBytesRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReadEightBytesSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BinaryReader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;../../../test/data/simple.wasm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint8_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadBytesSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;benchmark&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoNotOptimize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Reset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BENCHMARK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReadEightBytesSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;And here are the results:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Running ./bench Run on (8 X 2693.7 MHz CPU s) CPU Caches: L1 Data 32K (x4) L1 Instruction 32K (x4) L2 Unified 1024K (x4) L3 Unified 33792K (x4) Load Average: 0.08, 0.15, 0.13 ---------------------------------------------------------- Benchmark Time CPU Iterations ---------------------------------------------------------- ReadEightBytesRaw 365 ns 365 ns 1918628 ReadEightBytesSpan 364 ns 364 ns 1921003 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Although much of the time in the benchmark is used opening and seeking in the binary file, the profiler indicates the percent of time spent in the byte reading code is nearly identical, with maybe slight advantage to the raw version, which might not even be outside the margin of error.&lt;/p&gt; &lt;p&gt;So using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; as an abstraction for an arbitrary length buffer to receive data from a function provides:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A safe interface&lt;/li&gt; &lt;li&gt;A flexible interface&lt;/li&gt; &lt;li&gt;No cost over the best performing case&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; gives us the API we want with performance by default.&lt;/p&gt; &lt;h2 id=&quot;update-november-24&quot;&gt;Update (November 24)&lt;/h2&gt; &lt;p&gt;Reddit user &lt;a href=&quot;https://www.reddit.com/user/TheThiefMaster&quot;&gt;u/TheThiefMaster&lt;/a&gt; points out that GCC will &lt;a href=&quot;https://godbolt.org/z/UrDA07&quot;&gt;optimize&lt;/a&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; case so that the code is the same as the unsafe case, meaning it really has no overhead.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Discuss this post on Reddit &lt;a href=&quot;https://www.reddit.com/r/cpp/comments/9z2hqq/a_zero_cost_abstraction/&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; </content> </entry> <entry> <title>A C++ Template Project</title> <link href="http://joshpeterson.github.io/blog/2018/a-cpp-template-project/"/> <updated>2018-09-26T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2018/a-cpp-template-project</id> <content type="html">&lt;p&gt;How should I get started with a new C++ project? Usually when I have an idea for a new project, this is the first question I need to answer. Many other languages have a simple answer, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo new hello_world --bin&lt;/code&gt; (Rust) or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new blog&lt;/code&gt; (Ruby on Rails). In just a few seconds, I’m writing the actual code for the project, without the need to worry about the minutiae of setting up a build or unit test system or even continuous integration.&lt;/p&gt; &lt;p&gt;Don’t get me wrong, I love the flexibility of C++, but without a common project system, getting starting can be daunting. This time, I decided to start a new project with a few days of setup, then use that setup as a general template project. More than a month later, here we are! But I do have a &lt;a href=&quot;https://github.com/joshpeterson/cpp-template&quot;&gt;C++ template project&lt;/a&gt; which has proven useful for me. I hope it will be for you also.&lt;/p&gt; &lt;h2 id=&quot;roots&quot;&gt;Roots&lt;/h2&gt; &lt;p&gt;This C++ template project is based on the project from the excellent &lt;a href=&quot;https://arne-mertz.de/2018/05/hello-cmake/&quot;&gt;Hello, CMake!&lt;/a&gt; blog post series by Arne Mertz. Most often, I struggle early in the project with indecision about the directory structure. Should production and test code be in separate directories? How does test code access production code? Should the build output be in-tree or out-of-tree? Arne’s project structure answers these question with simplicity in ways that make sense to me.&lt;/p&gt; &lt;h2 id=&quot;whats-in-the-box&quot;&gt;What’s in the box&lt;/h2&gt; &lt;p&gt;The template project comes with some opinionated choices. They work for me - but they are easy to change if something works better for you. The project builds with &lt;a href=&quot;https://cmake.org/&quot;&gt;CMake&lt;/a&gt; and uses &lt;a href=&quot;ihttps://github.com/catchorg/Catch2&quot;&gt;Catch&lt;/a&gt; for unit tests. It builds on Linux and macOS via Travis CI and on Windows via Appveyor.&lt;/p&gt; &lt;h3 id=&quot;project-structure&quot;&gt;Project structure&lt;/h3&gt; &lt;p&gt;The project has the following top-level directories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The src directory is the location of all of the project’s source code (header files and source files). The main.cpp file is built into the final executable, all other source files in this directory are built into a static library. Only code in this static library will be tested.&lt;/li&gt; &lt;li&gt;The test directory contains the unit tests. The unit test executable links with the static library built from src directory.&lt;/li&gt; &lt;li&gt;The thirdparty directory contains external code used by this project, namely, Catch and the CMake sanitizer integration.&lt;/li&gt; &lt;li&gt;The tools directory contains a number of scripts used for building and other tool integration with the project.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;other-tool-integration&quot;&gt;Other tool integration&lt;/h3&gt; &lt;p&gt;The project integrates with a few other tools to aid in development.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The clang-format utility is used to enforce common source code formatting. The tools/format script can be used locally to update code formatting to match the style in the .clang-format file. The tools/run-clang-format.py script is used on Travis CI to check formatting.&lt;/li&gt; &lt;li&gt;The clang-tidy utility is used to run static analysis on the source code. The tools/tidy script can be used locally and on Travis CI to run clang-tidy.&lt;/li&gt; &lt;li&gt;The clang address, thread, and undefined behavior sanitizers are run on the unit tests. The tools/sanitize script can be used to run them locally.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since I primarily do hobby development on Linux (&lt;a href=&quot;https://joshpeterson.github.io/hobby-development-on-azure&quot;&gt;on Azure!&lt;/a&gt;), these tooling scripts are configured to run on Linux.&lt;/p&gt; &lt;h3 id=&quot;my-favorite-tool&quot;&gt;My favorite tool&lt;/h3&gt; &lt;p&gt;One of my favorite tools in the project is the very simple &lt;a href=&quot;https://github.com/joshpeterson/cpp-template/blob/master/tools/watch&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;watch&lt;/code&gt;&lt;/a&gt; script. I enjoy running unit tests each time I save a source file. I’ve used many-featured &lt;a href=&quot;https://github.com/guard/guard&quot;&gt;Guard&lt;/a&gt; project for this before. It works great on Ruby projects where I already use Bundler, but the requirement to have Bundler installed for a C++ project is pretty high. Enter the wonderful little &lt;a href=&quot;http://www.entrproject.org/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;entr&lt;/code&gt;&lt;/a&gt; tool, which gives me the immediate feedback I want without the need for Guard and Bundler.&lt;/p&gt; &lt;h2 id=&quot;try-it-for-yourself&quot;&gt;Try it for yourself&lt;/h2&gt; &lt;p&gt;Most of all, I enjoy how commands like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cargo new&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rails new&lt;/code&gt; quickly get a working project up and running, immediately ready for real code. While not as pithy, this command will get you started with my C++ template project:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl https://raw.githubusercontent.com/joshpeterson/cpp-template/master/cpp-template-installer.py | python - &amp;lt;my project name&amp;gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So give it a try, modify the template to meet your needs, and start building someting fun!&lt;/p&gt; </content> </entry> <entry> <title>Hobby Development on Azure</title> <link href="http://joshpeterson.github.io/blog/2018/hobby-development-on-azure/"/> <updated>2018-05-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2018/hobby-development-on-azure</id> <content type="html">&lt;p&gt;For the past few months, I’ve tried to move all of my hobby development activities to a VM on Microsoft Azure. The results have been pretty promising. MSDN members receive free Azure credits each month. This benefit is more than enough to cover the costs for my development needs.&lt;/p&gt; &lt;h1 id=&quot;the-costs&quot;&gt;The costs&lt;/h1&gt; &lt;p&gt;When I first started to try this, I was very confused by the cost structure. Most of the information available seems to be aimed at use of Azure for servers, so everything is focused on hourly costs for machines running twenty-four hours per day. Thankfully, there is information applicable to more piecemeal usage, like hobby development.&lt;/p&gt; &lt;h2 id=&quot;virtual-machine-cost&quot;&gt;Virtual machine cost&lt;/h2&gt; &lt;p&gt;Azure offers three ways to pay for a VM - Pay As You Go, 1 Year Reserved, and 3 Years Reserved. Since I’m not planning to use this VM all of the time, the Pay As You Go option works best for hobby development. I found the VM &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/virtual-machines/linux/&quot;&gt;pricing&lt;/a&gt; to make sense.&lt;/p&gt; &lt;p&gt;For my use case, I wanted VMs that with SSD drives for the OS disk. This was a bit difficult to find initially, but eventually I settled on the Fv2 Series running Ubuntu Linux. Currently, these VMs are only available in the West US 2 region. If you don’t care about the region of the VM, check each of the available regions - there may be different VM options in each region.&lt;/p&gt; &lt;h2 id=&quot;disk-cost&quot;&gt;Disk cost&lt;/h2&gt; &lt;p&gt;I was rather confused by disk cost for a while. The VMs have an OS disk, but is the data on the disk persistent? Or do I need to also pay for storage? I don’t need a database service like a website might, I just want a normal disk which can store data over time.&lt;/p&gt; &lt;p&gt;It turns out that each VM can be configured with a different OS disk - with a certain size and performance characteristics. This disk is persistent, so I can set up the OS and store in-progress work on it as I would on a local computer. In Azure, these are called “managed disks”, their &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/managed-disks/&quot;&gt;pricing&lt;/a&gt; is again organized by region and type.&lt;/p&gt; &lt;p&gt;I wanted the performance of an SSD, so I’m using a Premium Managed Disk in the West US 2 region. Hard disk drives are called Standard Managed Disks. Again, options may vary by region.&lt;/p&gt; &lt;h1 id=&quot;how-it-all-works&quot;&gt;How it all works&lt;/h1&gt; &lt;p&gt;Putting this all together, I’m using the following:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/member-offers/credit-for-visual-studio-subscribers/&quot;&gt;Free MSDN account&lt;/a&gt;, with $50/month Azure credit&lt;/li&gt; &lt;li&gt;256 GB Premium Managed Disk (SSD) - $34.56/month&lt;/li&gt; &lt;li&gt;Ubuntu VM, F8v2 - $0.358/hour&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This configuration lets me use an 8 core machine with 16 GB of RAM. After the OS disk cost, I have $15.44 to spend each month on the VM. That leaves me with about 43 hours per month of time the F8v2 VM can be running. Azure let’s me easily re-size the VM, so I can switch to a smaller, less expensive one if I start to run out of credit.&lt;/p&gt; &lt;p&gt;My schedule allows me to spend 3-4 hours on hobby development per week at most, so even with some wiggle room to let the VM run for a few hours to complete builds, I’m well under the total monthly credit.&lt;/p&gt; &lt;h2 id=&quot;shutting-down-the-vm&quot;&gt;Shutting down the VM&lt;/h2&gt; &lt;p&gt;The key to make all of this work out is shutting down the VM so it is not incurring costs when not in use. Since I’m the only user on this VM, I don’t need to leave it running like I would a server. Note that the VM must be shutdown via the Azure portal to make this work. Shutting it down from the Linux command line is not enough, since Azure will keep its resources in use.&lt;/p&gt; &lt;p&gt;Each time the VM is started, it will get new resources, including a new IP address. However, the VM can be assigned a host name, so the difference in IP address is not important for my use case.&lt;/p&gt; &lt;h2 id=&quot;going-over-the-limits&quot;&gt;Going over the limits&lt;/h2&gt; &lt;p&gt;More than once in the last few months I’ve accidentally used too many resources, and went over my monthly budget for the free plan. Thankfully, Azure does not require a form of payment beyond the free plan. Once the credit is exhausted, VMs cannot be started until the credit resets next month. All of the configuration and data on the VM is persisted, so it is easy to start again the next month.&lt;/p&gt; &lt;h1 id=&quot;a-great-deal&quot;&gt;A great deal&lt;/h1&gt; &lt;p&gt;Since I’m only using this VM a few hours per week, Azure is the perfect solution for my hobby development needs. A comparable physical machine would have significant up-front cost, and would still not get any more usage than the Azure VM. I’ve tried to do hobby development like this with other cloud providers, but the free plan for Azure offers the most value, by far.&lt;/p&gt; </content> </entry> <entry> <title>Introducing Struct Layout</title> <link href="http://joshpeterson.github.io/blog/2018/introducing-struct-layout/"/> <updated>2018-04-17T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2018/introducing-struct-layout</id> <content type="html">&lt;p&gt;I’ve built a fun little tool to help understand the way a C or C++ compiler will layout members in a struct or class. Behold, &lt;a href=&quot;https://structlayout.herokuapp.com&quot;&gt;Struct Layout&lt;/a&gt;. This tool uses the &lt;a href=&quot;https://github.com/joshpeterson/layout&quot;&gt;Layout&lt;/a&gt; utility behind the scenes. Layout parses C and C++ code using libclang. It generates C code with proper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sizeof&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offsetof&lt;/code&gt; operators to output a table including the size of each type, the size, offset, and padding for each field.&lt;/p&gt; &lt;p&gt;This information can be useful, as it may be surprising how a compiler lays out a given type in memory. The compiler may need to deal with platform-specific alignment requirements for certain types. If you are writing cross-platform code, it can be useful to understand how compilers behave on all of your target platforms.&lt;/p&gt; &lt;p&gt;If you are thinking about data-oriented design, data layout can be rather important. Knowing the number of object which fit into a cache line can inform your decisions about how algorithms can best make use of processor and memory resources.&lt;/p&gt; &lt;p&gt;I’ve already found this tool useful for day-to-day work, I hope that you do as well!&lt;/p&gt; </content> </entry> <entry> <title>Minimum implementations</title> <link href="http://joshpeterson.github.io/blog/2017/minimum_implementations/"/> <updated>2017-04-04T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2017/minimum_implementations</id> <content type="html">&lt;p&gt;I really enjoy reading the &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html&quot;&gt;Bit Twiddling Hacks&lt;/a&gt; page. It has lots of great bit-sized (pun &lt;em&gt;intended&lt;/em&gt;) algorithm implementations optimized for performance (or at least number of operations). Combine this with &lt;a href=&quot;gcc.godbolt.org&quot;&gt;Compiler Explorer&lt;/a&gt;, and you’ve got hours of assembly language fun. For example, I thought it might be interesting to understand how different implementations of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; algorithm generate assembly code.&lt;/p&gt; &lt;p&gt;Let’s look at three different implementations, all from this &lt;a href=&quot;http://graphics.stanford.edu/~seander/bithacks.html#IntegerMinOrMax&quot;&gt;section&lt;/a&gt; of the page. You can find the code generated by GCC 6.3 &lt;a href=&quot;https://godbolt.org/g/b6yDhD&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h1 id=&quot;no-branches-please&quot;&gt;No branches, please&lt;/h1&gt; &lt;p&gt;Naturally, you would expect the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt; algorithm to require at least one branch, since it is essentially an “if” check. But with some fun bitwise operations, this branch can be avoided.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;no_branch_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;GCC produces this assembly (with an optimized compile), for x64:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;no_branch_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setl&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;al&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;neg&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;xor&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Let’s step through this code line by line to understand how the algorithm works. I’ll assume the arguments are the values 2 and 3.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 1: It looks like the arguments are passed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edi&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esi&lt;/code&gt; registers.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:? edi:0x00000002 esi:0x00000003 EFLAGS - SF:? OF:?&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 2: Clear the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; register (it will be used later).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000000 edi:0x00000002 esi:0x00000003 EFLAGS - SF:? OF:?&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 3: The &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_35.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp&lt;/code&gt;&lt;/a&gt; instruction subtracts the two arguments, and sets status flags, but doesn’t change any other register values. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2 - 3 = -1&lt;/code&gt;; the sign flag is set and the overflow flag is not.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000000 edi:0x00000002 esi:0x00000003 EFLAGS - SF:1 OF:0&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 4: The &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_308.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setl&lt;/code&gt;&lt;/a&gt; instruction sets its destination operand, in this case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;al&lt;/code&gt; register (the lower 16 bytes of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;) to a value of 1 if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SF != OF&lt;/code&gt;. That is the case.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000001 edi:0x00000002 esi:0x00000003&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 5: The &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_330.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xor&lt;/code&gt;&lt;/a&gt; instruction performs an exclusive or, and puts the result in the first register.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000001 edi:0x00000001 esi:0x00000003&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 6: The &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_216.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neg&lt;/code&gt;&lt;/a&gt; instruction takes the two’s complement of its argument.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0xffffffff edi:0x00000001 esi:0x00000003&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 7: The logical &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_12.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;and&lt;/code&gt;&lt;/a&gt; instruction next stores its result in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;. Again, it is zero.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000001 edi:0x00000001 esi:0x00000003&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 8: The xor instruction of 1 and 3 results in 2, which is stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; and returned.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000002 edi:0x00000001 esi:0x00000003&lt;/code&gt;&lt;/p&gt; &lt;p&gt;So as advertised, this algorithm does not take any branches, and indeed returns the minimum (at least of 2 and 3). How does it compare to the minimum algorithm in the standard library though?&lt;/p&gt; &lt;h1 id=&quot;using-stdmin&quot;&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::min&lt;/code&gt;&lt;/h1&gt; &lt;p&gt;I had to do a double-take after looking at the code generated for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::min&lt;/code&gt;. Here it is, in all of its tiny glory:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmovle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;That’s right, GCC compiled this minimum implementation into a real &lt;em&gt;minimum&lt;/em&gt; implementation, just four instructions! Let’s understand what they are doing, again with the inputs 2 and 3.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 1: The arguments are passed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edi&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esi&lt;/code&gt; registers. Notice that this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp&lt;/code&gt; instruction is different from the first case, here it does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 - 2 = 1&lt;/code&gt;, so no status flags are set.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:? edi:0x00000002 esi:0x00000003 EFLAGS - SF:0 OF:0&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 2: Via &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_176.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mov&lt;/code&gt;&lt;/a&gt;, the value of 2 is copied from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edi&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt;. This really just sets up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; to be the return value of the function, it doesn’t have an impact on the algorithm.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000002 edi:0x00000002 esi:0x00000003 EFLAGS - SF:0 OF:0&lt;/code&gt;&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Line 3: Finally, the meat of the algorithm is in &lt;a href=&quot;http://x86.renejeschke.de/html/file_module_x86_id_34.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmovle&lt;/code&gt;&lt;/a&gt;. This instruction does a &lt;em&gt;conditional&lt;/em&gt; move, replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;esi&lt;/code&gt; only if the previous &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmp&lt;/code&gt; found that the left operand was less than or equal to the right operand. In other words, if the zero flag is set or the sign flag is not equal to the overflow flag. Neither condition is true in this case, so the value of 2 remains in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax&lt;/code&gt; and is returned.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eax:0x00000002 edi:0x00000002 esi:0x00000003 EFLAGS - SF:0 OF:0&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Even in this case, there are no branches! The compiler has replaced the branch by a conditional instruction.&lt;/p&gt; &lt;h1 id=&quot;lets-be-naive&quot;&gt;Let’s be naive&lt;/h1&gt; &lt;p&gt;Suppose instead that I roll my own implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min&lt;/code&gt;, using a very clear branch:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;naive_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This code &lt;em&gt;must&lt;/em&gt; have a branching instruction, right? Wrong!&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nasm&quot; data-lang=&quot;nasm&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nf&quot;&gt;cmp&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mov&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;esi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cmovle&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;eax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;edi&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ret&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The compiler has provided the same implementation as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::min&lt;/code&gt;. It &lt;em&gt;inferred&lt;/em&gt; what I wanted to do and wrote a better implementation than I could write myself.&lt;/p&gt; &lt;h1 id=&quot;time-to-double-check&quot;&gt;Time to double check&lt;/h1&gt; &lt;p&gt;Look at again at the entire &lt;a href=&quot;https://godbolt.org/g/b6yDhD&quot;&gt;assembly code&lt;/a&gt;. In the pane for compiler #2, I’ve used GCC 6.3 as well, but this time without any optimizations. Although the three different implementations generate more assembly code than the optimized compile, notice that they are still different from on another. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no_branch_min&lt;/code&gt; code does indeed have no branches, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard_min&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;naive_min&lt;/code&gt; both have one conditional jump and one unconditional jump instruction.&lt;/p&gt; &lt;p&gt;So it is true that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;no_branch_min&lt;/code&gt; implementation &lt;em&gt;guarantees&lt;/em&gt; no branches, but a good optimizing compiler will generate &lt;em&gt;better&lt;/em&gt; code for the more human-readable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::min&lt;/code&gt; and even the naive minimum implementation.&lt;/p&gt; &lt;p&gt;Let’s face it, optimizing C++ compilers are simply amazing.&lt;/p&gt; </content> </entry> <entry> <title>Using gsl with argv</title> <link href="http://joshpeterson.github.io/blog/2017/using-span-with-argv/"/> <updated>2017-02-08T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2017/using-span-with-argv</id> <content type="html">&lt;p&gt;In the &lt;a href=&quot;https://github.com/joshpeterson/layout&quot;&gt;layout&lt;/a&gt; utility I need to do a little bit of command line argument processing. When I used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; as I normally would, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-tidy&lt;/code&gt; warned me about a violation of the &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines&quot;&gt;C++ Core Guidelines&lt;/a&gt;. What is the proper way to work with command line arguments and meet the core guidelines?&lt;/p&gt; &lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt; &lt;p&gt;Here is the original code I wrote for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintUsage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputeLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This looks fine (and works), but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-tidy&lt;/code&gt; warns that it the violates &lt;a href=&quot;https://github.com/isocpp/CppCoreGuidelines/blob/master/CppCoreGuidelines.md#Pro-bounds-arithmetic&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cppcoreguidelines-pro-bounds-pointer-arithmetic&lt;/code&gt;&lt;/a&gt; guideline.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;warning: &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not use pointer arithmetic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cppcoreguidelines-pro-bounds-pointer-arithmetic] &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc &amp;lt; 2 &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; 2 &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; Equals&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argv[1], &lt;span class=&quot;s2&quot;&gt;&quot;--help&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-h&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; ^ warning: &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not use pointer arithmetic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cppcoreguidelines-pro-bounds-pointer-arithmetic] &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ComputeLayout&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argv[1], TransformArguments&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc - 2, &amp;amp;argv[2]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, std::cout&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ^ warning: &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;not use pointer arithmetic &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;cppcoreguidelines-pro-bounds-pointer-arithmetic] &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;ComputeLayout&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argv[1], TransformArguments&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;argc - 2, &amp;amp;argv[2]&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, std::cout&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ^&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt; &lt;p&gt;The C++ core guidelines indicate that we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; type from the &lt;a href=&quot;https://github.com/Microsoft/GSL&quot;&gt;GSL&lt;/a&gt; library to safely do pointer arithmetic. However, I found quickly that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; requires the size of the array it wraps to be known at compile time. That won’t work for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt;, as its size is given by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argc&lt;/code&gt;, and is only known at run time.&lt;/p&gt; &lt;p&gt;The GSL does have a type to handle this though, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt;. It is like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt;, but its size can be set at run time. So the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function using the GSL looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;--help&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-h&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrintUsage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputeLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;We can construct the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; like this, passing its size in its constructor.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gsl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multi_span&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Then we can use it like a normal array, with indexing operations. Notice that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; has some nice accessors, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;last&lt;/code&gt;, which returns a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; with only the last &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; elements. So it is very easy to prune the first two arguments from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;argv&lt;/code&gt; and pass them to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformArguments&lt;/code&gt; function.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ComputeLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TransformArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Also, since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; includes the its size, no longer need to pass the number of arguments to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TransformArguments&lt;/code&gt;, which eliminates the possibility of passing the wrong value.&lt;/p&gt; &lt;p&gt;Not only do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;span&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; help to clean up code, but they also eliminate possible sources of bugs and make the code easier to read. We still get the ability to use array indexers, so we have gained safety and expressiveness without sacrificing anything. C++ Core Guidelines for the win!&lt;/p&gt; &lt;h2 id=&quot;not-so-fast-my-friend&quot;&gt;Not so fast, my friend&lt;/h2&gt; &lt;p&gt;Did we really make this change without sacrificing anything? I would expect this abstraction should come with some runtime cost.&lt;/p&gt; &lt;p&gt;Here is the &lt;a href=&quot;https://godbolt.org/g/u12rjY&quot;&gt;assembly code&lt;/a&gt; generated for the original version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt;, with direct pointer manipulation. The code is 414 lines of assembly, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; itself is 103 lines long.&lt;/p&gt; &lt;p&gt;Here is the &lt;a href=&quot;https://gist.github.com/joshpeterson/f269c248ffacb05bdd88a84de96e22e9&quot;&gt;source code&lt;/a&gt; for the new version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; which uses the GSL &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;multi_span&lt;/code&gt; type (I have prepended it with all of the necessary headers from the GSL so that it will compile). This code will compile to 450 lines of assembly, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; is 119 lines long (the code is too large to work with a URL shortener, but you can paste the code from the Gist into Godbolt directly).&lt;/p&gt; &lt;p&gt;So the new code with the GSL is &lt;em&gt;slightly&lt;/em&gt; larger. But the cost for the increased expressiveness and safety is surprisingly small. In my opinion, the trade off is warranted.&lt;/p&gt; </content> </entry> <entry> <title>Defining define</title> <link href="http://joshpeterson.github.io/blog/2017/defining-define/"/> <updated>2017-01-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2017/defining-define</id> <content type="html">&lt;p&gt;When I encounter a preprocessor branch in code I usually find myself struggling to recall the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if defined&lt;/code&gt;. This post is an attempt to provide myself with a quick reference. Hopefully it might help others as well.&lt;/p&gt; &lt;p&gt;This chart summarizes things:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;th&gt;Checks for existence&lt;/th&gt; &lt;th&gt;Numeric defines&lt;/th&gt; &lt;th&gt;Supports &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt;&lt;/th&gt; &lt;th&gt; Supports &lt;code&gt;!&lt;/code&gt;&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;code&gt;#if&lt;/code&gt;&lt;/th&gt; &lt;td&gt;No&lt;/td&gt; &lt;td&gt;Yes&lt;/td&gt; &lt;td&gt;Yes&lt;/td&gt; &lt;td&gt;No&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;code&gt;#ifdef&lt;/code&gt;&lt;/th&gt; &lt;td&gt;Yes&lt;/td&gt; &lt;td&gt;No&lt;/td&gt; &lt;td&gt;No&lt;/td&gt; &lt;td&gt;One condition (&lt;code&gt;#ifndef&lt;/code&gt;)&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;&lt;code&gt;#if defined&lt;/code&gt;&lt;/th&gt; &lt;td&gt;Yes&lt;/td&gt; &lt;td&gt;No&lt;/td&gt; &lt;td&gt;Yes&lt;/td&gt; &lt;td&gt;Many conditions (&lt;code&gt;!defined()&lt;/code&gt;)&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;The details are below.&lt;/p&gt; &lt;h2 id=&quot;start-with-if&quot;&gt;Start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Let’s start with this code:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if DEFINED_VALUE #warning &quot;#if DEFINED_VALUE&quot; is active #else #warning &quot;#if DEFINED_VALUE&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;It produces a compiler error:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:3:18: error: expected value &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;expression &lt;span class=&quot;c&quot;&gt;#if DEFINED_VALUE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt;, we need to have an actual value, like this.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:6:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if DEFINED_VALUE&quot;&lt;/span&gt; is not active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Then a non-zero value will “activate” the branch.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE 1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:6:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if DEFINED_VALUE&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;It is also possible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt; for logical conditions like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ZERO 0 #define ONE 1 &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if ONE &amp;amp;&amp;amp; ONE #warning 1 and 1 is active #endif &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if ONE || ZERO #warning 1 or 0 is active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:5:2: warning: 1 and 1 is active test.cpp:9:2: warning: 1 or 0 is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h2 id=&quot;next-up-ifdef&quot;&gt;Next up: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Now let’s try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt;.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifdef DEFINED_VALUE #warning &quot;#ifdef DEFINED_VALUE&quot; is active #else #warning &quot;#ifdef DEFINED_VALUE&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#ifdef DEFINED_VALUE&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So just the presence of the defined value will activate this branch. We can comment it out to deactivate it.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//#define DEFINED_VALUE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:6:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#ifdef DEFINED_VALUE&quot;&lt;/span&gt; is not active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;We can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifndef&lt;/code&gt; to determine if a value is &lt;em&gt;not&lt;/em&gt; defined.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifndef DEFINED_VALUE #warning &quot;#ifndef DEFINED_VALUE&quot; is active #else #warning &quot;#ifndef DEFINED_VALUE&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:6:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#ifndef DEFINED_VALUE&quot;&lt;/span&gt; is not active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Can we do Boolean operations, as with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if&lt;/code&gt;?&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ZERO 0 #define ONE 1 &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifdef ONE &amp;amp;&amp;amp; ZERO #warning 1 and 0 is active #else #warning 1 and 0 is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:12: warning: extra tokens at end of &lt;span class=&quot;c&quot;&gt;#ifdef directive&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#ifdef ONE &amp;amp;&amp;amp; ZERO&lt;/span&gt; test.cpp:5:2: warning: 1 and 0 is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;No, it seems Boolean conditions are not possible here. Even worse, we only get a warning, and the condition is evaluated as if the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; is true! In this case, the actual behavior is the opposite of my intuition. This could be lost in a sea of warnings, and end up being difficult to track down.&lt;/p&gt; &lt;p&gt;In addition, numeric values are only checked for existence.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ZERO 0 &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifdef ZERO #warning &quot;#ifdef ZERO&quot; is active #else #warning &quot;#ifdef ZERO&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#ifdef ZERO&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So maybe surprisingly, the behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef ZERO&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if ZERO&lt;/code&gt; are opposite.&lt;/p&gt; &lt;h2 id=&quot;last-but-not-least-if-defined&quot;&gt;Last but not least: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if defined&lt;/code&gt;&lt;/h2&gt; &lt;p&gt;Finally, we can use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;defined&lt;/code&gt; keyword, which something like a function call.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED_VALUE &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if defined(DEFINED_VALUE) #warning &quot;#if defined(DEFINED_VALUE)&quot; is active #else #warning &quot;#if defined(DEFINED_VALUE)&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if defined(DEFINED_VALUE)&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;If the value is not defined, we get the other leg of the branch:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//#define DEFINED_VALUE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:6:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if defined(DEFINED_VALUE)&quot;&lt;/span&gt; is not active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;We can also check for a value that is not defined.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//#define DEFINED_VALUE&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if !defined(DEFINED_VALUE) #warning &quot;#if !defined(DEFINED_VALUE)&quot; is active #else #warning &quot;#if !defined(DEFINED_VALUE)&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if !defined(DEFINED_VALUE)&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;If addition, this syntax supports Boolean operators (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;||&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;!&lt;/code&gt;):&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define DEFINED &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if defined(DEFINED) &amp;amp;&amp;amp; !defined(UNDEFINED) #warning &quot;#if defined(DEFINED) &amp;amp;&amp;amp; !defined(UNDEFINED)&quot; is active #else #warning &quot;#if defined(DEFINED) &amp;amp;&amp;amp; !defined(UNDEFINED)&quot; is active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if defined(DEFINED) &amp;amp;&amp;amp; !defined(UNDEFINED)&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;What about numeric values though?&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ZERO 0 &lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#if defined(ZERO) #warning &quot;#if defined(ZERO)&quot; is active #else #warning &quot;#if defined(ZERO)&quot; is not active #endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;test.cpp:4:2: warning: &lt;span class=&quot;s2&quot;&gt;&quot;#if defined(ZERO)&quot;&lt;/span&gt; is active&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#if defined&lt;/code&gt; is the same as the behavior of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; in this respect.&lt;/p&gt; </content> </entry> <entry> <title>Identifying a forward declaration with libclang</title> <link href="http://joshpeterson.github.io/blog/2017/identifying-a-forward-declaration-with-libclang/"/> <updated>2017-01-12T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2017/identifying-a-forward-declaration-with-libclang</id> <content type="html">&lt;p&gt;I’ve recently written a small utility (called &lt;a href=&quot;https://github.com/joshpeterson/layout&quot;&gt;layout&lt;/a&gt;), which uses &lt;a href=&quot;http://clang.llvm.org/doxygen/group__CINDEX.html&quot;&gt;libclang&lt;/a&gt; to parse C and C++ source code and determine the size, layout, and padding for all fields in all types. It generates C or C++ code which can be compiled to report this information for a specific compiler. During my first attempt, I ran into a problem detecting that a given type was a &lt;a href=&quot;http://stackoverflow.com/a/4757718/381697&quot;&gt;forward declaration&lt;/a&gt;.&lt;/p&gt; &lt;h1 id=&quot;a-little-bit-about-libclang&quot;&gt;A little bit about libclang&lt;/h1&gt; &lt;p&gt;The C API for clang allows you to walk the abstract syntax tree (AST) for any C or C++ code using a visitor pattern. At each node of the AST, the visitor receives a &lt;a href=&quot;http://clang.llvm.org/doxygen/group__CINDEX__CURSOR__MANIP.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CXCursor&lt;/code&gt;&lt;/a&gt; object representing that node. We can ask this cursor a number of questions, like what kind of node it is (e.g. a struct or a field) or what type it represents (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;The layout utility walks the AST, finds each class or struct, then looks for each field in that class or struct and gathers data about each field. What happens when it encounters a forward declaration like this?&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardDeclared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FullType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForwardDeclared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h1 id=&quot;the-wrong-solution&quot;&gt;The wrong solution&lt;/h1&gt; &lt;p&gt;The &lt;a href=&quot;https://github.com/joshpeterson/layout/blob/7625a65d878a68d2ce247a7dbf8d1efad5f367d3/src/type_inspector.cpp#L40-L41&quot;&gt;visitor for types&lt;/a&gt; checks the &lt;em&gt;kind&lt;/em&gt; of the cursor, and handles &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class&lt;/code&gt; kinds.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursorKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang_getCursorKind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursorKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CXCursor_StructDecl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursorKind&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CXCursor_ClassDecl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;However, both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForwardDeclared&lt;/code&gt; are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CXCursor_StructDecl&lt;/code&gt; cursors, so both are handled in the same way. The resulting generated C++ code tries to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sizeof(ForwardDeclared)&lt;/code&gt;, which will cause a compiler error. Indeed, the very reason to use a forward declaration is to avoid the need for the compiler to know the size of a given type!&lt;/p&gt; &lt;p&gt;My first attempt to work around this issue was to ignore any types with no fields. With this change, the output from the code generated by the utility for this case &lt;em&gt;seems&lt;/em&gt; to work.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./layout blog.cpp | g++ &lt;span class=&quot;nt&quot;&gt;-xc&lt;/span&gt;++ -&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; ./a.out FullType &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Field | Type | Offset | Size | Padding field | ForwardDeclared &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | 0 | 8 | 0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;But suppose that I actually have a type with no fields?&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ForwardDeclared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FullType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ForwardDeclared&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The output for this code is the same as the code above. The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmptyType&lt;/code&gt; is simply being skipped, which is incorrect.&lt;/p&gt; &lt;h1 id=&quot;a-better-solution&quot;&gt;A better solution&lt;/h1&gt; &lt;p&gt;The clang C++ API has a method named &lt;a href=&quot;http://clang.llvm.org/doxygen/classclang_1_1TagDecl.html#afedf2ad96d0205de7428351ad61ad7ef&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isThisDeclarationADefinition&lt;/code&gt;&lt;/a&gt; which does exactly what we need. It will return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FullType&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmptyType&lt;/code&gt;, but &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;false&lt;/code&gt; for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ForwardDeclared&lt;/code&gt;. Unfortunately, this method is not exposed on the C API, so the layout utility cannot use it. I started to work on exposing this method via the C API in libclang, when I stumbled across the &lt;a href=&quot;http://clang.llvm.org/doxygen/group__CINDEX__CURSOR__XREF.html#gafcfbec461e561bf13f1e8540bbbd655b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang_getCursorDefinition&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt; &lt;p&gt;I wonder what this method does when we pass it the cursor for a forward declaration. From its documentation:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;If given a cursor for which there is no corresponding definition, e.g., because there is no definition of that entity within this translation unit, returns a NULL cursor.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;We can use the &lt;a href=&quot;http://clang.llvm.org/doxygen/group__CINDEX__CURSOR__MANIP.html#ga94d81bbf40dff4ac843458d018f3138e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang_getNullCursor&lt;/code&gt;&lt;/a&gt; method to obtain the NULL cursor value described in the documentation. Then a method to identify a forward declaration might look like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_forward_declaration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CXCursor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang_equalCursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clang_getCursorDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang_getNullCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;With this new method in place, we can now get better output from layout:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./layout blog.cpp | g++ &lt;span class=&quot;nt&quot;&gt;-xc&lt;/span&gt;++ -&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;./a.out FullType &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;8b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Field | Type | Offset | Size | Padding field | ForwardDeclared &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | 0 | 8 | 0 EmptyType &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1b&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: No fields&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The output now includes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EmptyType&lt;/code&gt;, and indicates its size.&lt;/p&gt; &lt;h1 id=&quot;update-december-7-2018&quot;&gt;Update (December 7, 2018)&lt;/h1&gt; &lt;p&gt;Astute reader Fredrik Svantesson pointed out that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_forward_declaration&lt;/code&gt; won’t work properly if the declaration and definition are in the same translation unit. In that case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang_getCursorDefinition&lt;/code&gt; will &lt;em&gt;not&lt;/em&gt; return the null cursor, but instead will return the definition cursor!&lt;/p&gt; &lt;p&gt;So, we need an additional check for this case:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_forward_declaration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CXCursor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang_getCursorDefinition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If the definition is null, then there is no definition in this translation&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// unit, so this cursor must be a forward declaration.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clang_equalCursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clang_getNullCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// If there is a definition, then the forward declaration and the definition&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// are in the same translation unit. This cursor is the forward declaration if&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// it is _not_ the definition.&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clang_equalCursors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; </content> </entry> <entry> <title>The curious case of cltq</title> <link href="http://joshpeterson.github.io/blog/2016/the-curious-case-of-cltq/"/> <updated>2016-11-08T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2016/the-curious-case-of-cltq</id> <content type="html">&lt;p&gt;While debugging a problem in some C code recently, I ran across an assembly instruction causing problems for a function return value. The culprit: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cltq&lt;/code&gt;. I’d never seen this instruction before, and it was the cause a serious problem for a function returning a pointer I had just written.&lt;/p&gt; &lt;h2 id=&quot;the-code&quot;&gt;The code&lt;/h2&gt; &lt;p&gt;The code I was writing was spread across two functions. Here is a simplified version of it:&lt;/p&gt; &lt;p&gt;&lt;strong&gt;other.c:&lt;/strong&gt;&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ReturnsAPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x000000BADBADF00D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In ReturnsAPointer the pointer is %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;&lt;strong&gt;main.c:&lt;/strong&gt;&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReturnsAPointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;In main the pointer is %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I compiled the files like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc main.c other.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wat&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Then when I ran the executable, this happened:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./wat In ReturnsAPointer the pointer is 0xbadbadf00d In main the pointer is 0xffffffffdbadf00d&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Why is the pointer returned to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; incorrect? Notice that it is not totally wrong, just &lt;em&gt;mostly&lt;/em&gt; wrong (which is still wrong enough when it comes to pointers). These are the two values in binary:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;0000000000000000000000001011101011011011101011011111000000001101 1111111111111111111111111111111111011011101011011111000000001101 &amp;lt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; 32 bits are different ^ 32 bits are the same &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The high 32-bits of the pointer (I was compiling this on a 64-bit processor) are all 1’s after being returned from the function. This calls for a look at the assembly code!&lt;/p&gt; &lt;h2 id=&quot;the-assembly-code&quot;&gt;The assembly code&lt;/h2&gt; &lt;p&gt;Let’s generate the assembly code here to see what is really happening:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; main.c other.c&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here is the relevant part of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; function, where it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReturnsAPointer&lt;/code&gt;:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c-objdump&quot; data-lang=&quot;c-objdump&quot;&gt;movl $0, %eax call ReturnsAPointer cltq movq %rax, -8(%rbp)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Everything looks good until that odd &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cltq&lt;/code&gt; instruction appears. What is it doing there? &lt;a href=&quot;http://stackoverflow.com/a/10715049/381697&quot;&gt;Stack Overflow&lt;/a&gt; to the rescue! I never forward declared the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReturnsAPointer&lt;/code&gt; method, so GCC assumed the return value was &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt;. Therefore, the 64-bit pointer return value was treated as a 32-bit int that needs to be extended to 64 bits, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cltq&lt;/code&gt; is the correct instruction. It widens a 32-bit value to 64 bits, filling in the upper 32 bits with the value in the highest bit of the lower 32 bits.&lt;/p&gt; &lt;p&gt;Intel assembly has a number of &lt;a href=&quot;http://www.cwde.de/&quot;&gt;similar instructions&lt;/a&gt; that might be used instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cltq&lt;/code&gt; in cases like this. The are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cbw&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cwde&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cdqe&lt;/code&gt;. The solution to any of these cases is to forward declare the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ReturnsAPointer&lt;/code&gt; function, so the compiler can know the proper type of its return value.&lt;/p&gt; &lt;h2 id=&quot;the-rest-of-the-story&quot;&gt;The rest of the story&lt;/h2&gt; &lt;p&gt;I wasn’t totally honest above. It turns out that this behavior is not nearly as surprising as I first thought it was. Here is the &lt;em&gt;complete&lt;/em&gt; output of the compile step I showed earlier:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gcc main.c other.c &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wat main.c: In &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; ‘main’: main.c:5:17: warning: initialization makes pointer from integer without a cast &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;enabled by default] void&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; value &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; ReturnsAPointer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;GCC is clearly indicating the exact problem via a warning. Unfortunately, the code I was using causes lots of warnings when it is compiled, so I missed this one and cost myself some debugging time. The moral of this story is: compile without warnings if at all possible.&lt;/p&gt; </content> </entry> <entry> <title>C# development on a Raspberry Pi</title> <link href="http://joshpeterson.github.io/blog/2015/csharp-development-raspberry-pi/"/> <updated>2015-10-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2015/csharp-development-raspberry-pi</id> <content type="html">&lt;p&gt;Recently I’ve decided to try to set up a C# development environment on my &lt;a href=&quot;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&quot;&gt;Raspberry Pi 2&lt;/a&gt; using &lt;a href=&quot;http://www.vim.org&quot;&gt;Vim&lt;/a&gt; and &lt;a href=&quot;http://www.omnisharp.net/&quot;&gt;OmniSharp&lt;/a&gt;. It has been a long process, so I wanted to document each of the problems I faced (and the solutions) here for the next time I try this.&lt;/p&gt; &lt;h2 id=&quot;the-platform&quot;&gt;The platform&lt;/h2&gt; &lt;p&gt;I’m using Raspbian at the following version:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;josh@raspberrypi ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/issue Raspbian GNU/Linux 7 &lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt; josh@raspberrypi ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/debian_version 7.8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I have mono 3.2.8 installed, and I started off with the latest version of Vim available in a package for Raspbian (but we’ll see later that had to change).&lt;/p&gt; &lt;h2 id=&quot;the-problems&quot;&gt;The problems&lt;/h2&gt; &lt;p&gt;I’ll go through each problem I had while I tried to set up an OmniSharp development environment with Vim.&lt;/p&gt; &lt;h3 id=&quot;problem-1&quot;&gt;Problem 1&lt;/h3&gt; &lt;p&gt;OmniSharp requires Vim with Python support. After installing &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim&quot;&gt;omnisharp-vim&lt;/a&gt; with &lt;a href=&quot;https://github.com/VundleVim/Vundle.vim&quot;&gt;Vundle&lt;/a&gt; I saw this error from Vim when I started it:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Error: OmniSharp requires Vim compiled with +python&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h3 id=&quot;fix-1&quot;&gt;Fix 1&lt;/h3&gt; &lt;p&gt;I found that the vim-nox package is built with Python support, so I installed it.&lt;/p&gt; &lt;h3 id=&quot;problem-2&quot;&gt;Problem 2&lt;/h3&gt; &lt;p&gt;When I opened a C# source file and tried to use omni-complete with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; I saw this error:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Error detected &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;processing &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;OmniSharp#Complete: line 14: E117: Unknown &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;: pyeval Error detected &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;processing &lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;OmniSharp#Complete: line 14: E15: Invalid expression: pyeval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;Completion().get_completions(&quot;s:column&quot;, &quot;a:base&quot;)&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h3 id=&quot;fix-2&quot;&gt;Fix 2&lt;/h3&gt; &lt;p&gt;It turns out that the vim-nox package does not have a new enough version of Vim to use with OmniSharp. It is at version 7.3.547, but OmniSharp uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pyeval&lt;/code&gt; in Vim, which is at 7.3.569. So I installed Vim from &lt;a href=&quot;http://www.vim.org/git.php&quot;&gt;source&lt;/a&gt;.&lt;/p&gt; &lt;h3 id=&quot;problem-3&quot;&gt;Problem 3&lt;/h3&gt; &lt;p&gt;Vim needs to be compiled with Python support (see Problem 1 above).&lt;/p&gt; &lt;h3 id=&quot;fix-3&quot;&gt;Fix 3&lt;/h3&gt; &lt;p&gt;I first had to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python-dev&lt;/code&gt; package:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python-dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Then I followed some good &lt;a href=&quot;http://stackoverflow.com/questions/3373914/compiling-vim-with-python-support&quot;&gt;instructions&lt;/a&gt; to get Vim built correctly with Python support.&lt;/p&gt; &lt;h3 id=&quot;problem-4&quot;&gt;Problem 4&lt;/h3&gt; &lt;p&gt;I next had to make Vim built from sources the default version used on my machine. It installed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt; &lt;h3 id=&quot;fix-4&quot;&gt;Fix 4&lt;/h3&gt; &lt;p&gt;I ran these commands:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get remove vim vim-runtime gvim &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; /usr/bin/editor editor /usr/local/bin/vim 1 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; editor /usr/local/bin/vim &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--install&lt;/span&gt; /usr/bin/vi vi /usr/local/bin/vim 1 &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;update-alternatives &lt;span class=&quot;nt&quot;&gt;--set&lt;/span&gt; vi /usr/local/bin/vim&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I also had to add /usr/local/bin to my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PATH&lt;/code&gt; environment variable value.&lt;/p&gt; &lt;h3 id=&quot;problem-5&quot;&gt;Problem 5&lt;/h3&gt; &lt;p&gt;Ready for everything to work now, I tried omni-complete again. When I did &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;C-x&amp;gt;&amp;lt;C-o&amp;gt;&lt;/code&gt; and got this error:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; Omni completion &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;^O^N^P&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Pattern not found&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;It turns out the omnisharp-vim installation via Vundle did not actually build the Omnisharp.exe server.&lt;/p&gt; &lt;h3 id=&quot;fix-5&quot;&gt;Fix 5&lt;/h3&gt; &lt;p&gt;I changed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.vim/bundle/omnisharp-vim/server&lt;/code&gt; directory and ran the xbuild command to build the OmniSharp.exe server.&lt;/p&gt; &lt;h3 id=&quot;problem-6&quot;&gt;Problem 6&lt;/h3&gt; &lt;p&gt;I still did not have omni-complete! The OmniSharp server did start automatically from Vim because I was testing a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cs&lt;/code&gt; file that was not part of a project and solution file.&lt;/p&gt; &lt;h3 id=&quot;fix-6&quot;&gt;Fix 6&lt;/h3&gt; &lt;p&gt;I was able to start the OmniSharp server manually. It starts automatically if I open Vim with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.cs&lt;/code&gt; file that is in project and a solution.&lt;/p&gt; &lt;h3 id=&quot;problem-7&quot;&gt;Problem 7&lt;/h3&gt; &lt;p&gt;I attempted to set up grunt-init (as recommended on the omnisharp-vim site). I first tried to install the node and npm packages manually.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;node &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;npm&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;But that does not work, as the npm package is too old.&lt;/p&gt; &lt;h3 id=&quot;fix-7&quot;&gt;Fix 7&lt;/h3&gt; &lt;p&gt;So I then followed &lt;a href=&quot;http://stackoverflow.com/questions/12913141/message-failed-to-fetch-from-registry-while-trying-to-install-any-module&quot;&gt;these&lt;/a&gt; instructions to get a working npm system. Then I could install grunt.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get purge nodejs npm curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;bash - &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; grunt-init&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h2 id=&quot;success&quot;&gt;Success!&lt;/h2&gt; &lt;p&gt;After these seven problems were solved, I was able to get omni-complete with C# working in Vim on my Raspberry Pi 2. Now to write some code!&lt;/p&gt; </content> </entry> <entry> <title>Introducing Summa Explorer</title> <link href="http://joshpeterson.github.io/blog/2015/introducing-summa-explorer/"/> <updated>2015-10-16T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2015/introducing-summa-explorer</id> <content type="html">&lt;p&gt;I’m happy to introduce the personal project I’ve been working on for the past nine months or so: &lt;a href=&quot;https://summaexplorer.herokuapp.com&quot;&gt;Summa Explorer&lt;/a&gt;. I’ve enjoyed reading philosophy and theology for some time now. Saint Thomas Aquinas is one of my favorite authors, but I’ve found the Summa can be difficult to read in book form, mostly because of its sheer size. I wanted to come up with a way to read it that worked better for me, and the Summa Explorer is the result.&lt;/p&gt; &lt;h2 id=&quot;highly-structured&quot;&gt;Highly structured&lt;/h2&gt; &lt;p&gt;The Summa is a highly structured and regular document. It is divided into &lt;em&gt;parts&lt;/em&gt;, each part into &lt;em&gt;treatises&lt;/em&gt;, each treatise into &lt;em&gt;questions&lt;/em&gt; and each question into &lt;em&gt;articles&lt;/em&gt;. Each article then has five parts:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A topic to address, stated as a question&lt;/li&gt; &lt;li&gt;Common objections to the answer Thomas argues&lt;/li&gt; &lt;li&gt;An argument from authority, which always starts with the text “On the contrary”&lt;/li&gt; &lt;li&gt;Thomas’ argument, which always starts with the text “I answer that”&lt;/li&gt; &lt;li&gt;A reply Thomas makes to each of the objections&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;This structured nature makes the text of the Summa relatively easy to parse. So I wrote a &lt;a href=&quot;https://github.com/joshpeterson/summa/tree/master/summa-parser&quot;&gt;parser&lt;/a&gt; in Ruby to read the public domain &lt;a href=&quot;http://www.ccel.org/ccel/aquinas/summa.txt&quot;&gt;text&lt;/a&gt; of the Summa is from the Christian Classics Ethereal Library and generate an in-memory representation of the document in Ruby classes.&lt;/p&gt; &lt;h2 id=&quot;context-and-layout&quot;&gt;Context and layout&lt;/h2&gt; &lt;p&gt;I found two parts of reading the Summa difficult. First, I consistently had trouble remembering the context of a given article. I found myself flipping back pages to see which question or treatise I was reading on a regular basis. Second, I would often read the objections, then forget them by the time I got to the replies section of a given article. I found myself consistently re-reading the objections as well.&lt;/p&gt; &lt;p&gt;I’ve tried to address these two problems with the Summa Explorer. Each article has a large context section at the bottom of its page. This section gives information about the next and previous articles, as well as the current question, treatise, and part. It also shows the progress through each of these levels of the Summa. I’ve also listed the objections twice in each article. They are located once where Thomas put them, then again each objection is listed before the reply to it.&lt;/p&gt; &lt;p&gt;I’ve found that this additional context information and layout helps me to better understand each article.&lt;/p&gt; &lt;h2 id=&quot;technology&quot;&gt;Technology&lt;/h2&gt; &lt;p&gt;I’ve never written a Ruby on Rails application before, but I’ve heard good things about it. As billed, creating an application in Rails was actually a lot of fun, especially for someone with my lack of web development experience. The biggest benefit of Rails for me was a copious amount of documentation available for the &lt;em&gt;many&lt;/em&gt; simple problems I encountered as a novice. The site is hosted on &lt;a href=&quot;https://www.openshift.com/&quot;&gt;Open Shift&lt;/a&gt;, which has proven to be a nice (and, most importantly, free) hosting platform. The code for the site is available on &lt;a href=&quot;https://github.com/joshpeterson/summa&quot;&gt;Github&lt;/a&gt;, and I’m using &lt;a href=&quot;https://travis-ci.org/joshpeterson/summa&quot;&gt;Travis CI&lt;/a&gt; for builds.&lt;/p&gt; &lt;p&gt;I’ve been very impressed with the entire Rails technology stack, and with the availability of these free developer services that work with it. I’m even starting to like Ruby a bit!&lt;/p&gt; </content> </entry> <entry> <title>All your state are belong to us</title> <link href="http://joshpeterson.github.io/blog/2015/all-your-state-are-belong-to-us/"/> <updated>2015-04-25T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2015/all-your-state-are-belong-to-us</id> <content type="html">&lt;p&gt;My colleague &lt;a href=&quot;https://twitter.com/lucasmeijer&quot;&gt;Lucas Meijer&lt;/a&gt; was recently making changes to a rather complex bit of code in IL2CPP, the VTableBuilder class, when he tweeted this:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/all-your-state-are-belong-to-us/lucas-tweet.png&quot; alt=&quot;A tweet about removing state&quot; /&gt;&lt;/p&gt; &lt;p&gt;I added the rather unoriginal response “All your state are belong to us.”&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/all-your-state-are-belong-to-us/all-your-base.png&quot; alt=&quot;All your base are belong to us&quot; /&gt;&lt;/p&gt; &lt;p&gt;This started me thinking though, could it be true that our programs have been overrun with mutable state? Is mutable state something like an invading alien army, which has taken control? The code Lucas was modifying solves a complex problem in IL2CPP (it generates a representation of the vtable for a class in managed code that is used in the native translation of the code). But is that code more complex than necessary, due to mutable state?&lt;/p&gt; &lt;p&gt;More to the point, I wanted to answer the following questions:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;What is &lt;em&gt;problematic&lt;/em&gt; mutable state?&lt;/li&gt; &lt;li&gt;How do we correct problems with mutable state?&lt;/li&gt; &lt;li&gt;Why can functional code solve the problems with mutable state?&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;what-is-mutable-state&quot;&gt;What is mutable state?&lt;/h2&gt; &lt;p&gt;I think that mutable state is relatively easy to define.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Mutable state&lt;/strong&gt;: A sequence of bits stored in some type of memory (e.g. registers, non-volatile memory, volatile memory) which is written by one instruction and read by another instruction.&lt;/p&gt; &lt;p&gt;Usually, we introduce mutable state with an assignment operator. For example:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// mutable state&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;But all mutable state is not problematic. Variables must have some value (no pun intended), otherwise we would not use them so prevalently. Instead, we should define &lt;em&gt;problematic&lt;/em&gt; mutable state.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Problematic mutable state&lt;/strong&gt;: Mutable state which is stored at a scope too large to easily reason about.&lt;/p&gt; &lt;p&gt;The problems we have with mutable state are not really about the state itself, but more so about about the state transitions. Specifically, when the value of the of the state variable changes, do we notice that change? Do we handle all of the possible values? How does the program behave when the mutable state takes on an unexpected value? By keeping the scope of the mutable state small enough for us to reason about, we can either answer or eliminate these questions.&lt;/p&gt; &lt;h2 id=&quot;how-do-we-correct-problems-with-mutable-state&quot;&gt;How do we correct problems with mutable state?&lt;/h2&gt; &lt;p&gt;As consumers of software, what do we usually do to correct problems with mutable state? If one of our tools, say an IDE or operating system, starts to behave badly, we restart it, right? What does restarting the software actually do? Why does it usually make the software behave correctly? By restarting it, we are actually modifying the mutable state in the program to known good values. Those values might make sense, like 0 for an integer, or NULL for a pointer. Even if they are uninitialized values, the software can deal with (or ignore) them. It was started millions of times during its development, so the value of all mutable state when the program was started can be handled correctly. Effectively, we have set the mutable state to the start of a known scope. The scope might be very large, but when the scope starts the state values are not problematic.&lt;/p&gt; &lt;p&gt;As a programmer, I do the same thing. I control mutable state with various scopes, and I restart the scopes when I want to avoid the questions about mutable state (or at least, I &lt;em&gt;should&lt;/em&gt; do this). For imperative programming in a object-oriented language, I think there are three levels of mutable state:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Global or static variables&lt;/li&gt; &lt;li&gt;Class or struct member variables&lt;/li&gt; &lt;li&gt;Function local variables&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;I’ve been taught from an early age to avoid global and static variables if at all possible. Why? In the context of this discussion, they can easily represent problematic mutable state, because their scope is the lifetime of the process. It is not possible for the programmer to restart their scope without restarting the process. For most programs and programming languages, that is not an option, as the process is the program itself.&lt;/p&gt; &lt;p&gt;Class members are a bit easier to manage than global and static variables, since we have an idiom in object-oriented programming to restart their scope, the constructor. But I can still run into problems by exposing the mutable state from a class member to a larger scope. For example:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Does &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getName&lt;/code&gt; return a copy of the string stored in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name_&lt;/code&gt;? (It does not.) What happens to the pointer returned if this instance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; does out of scope? (It is a dangling reference.) These questions and many others occur because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;name_&lt;/code&gt; represents mutable state in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; class. By exposing it publicly, I have made it problematic mutable state, because it is no longer under the control of the scope for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; (its constructor/destructor pair).&lt;/p&gt; &lt;p&gt;Code like this is one of the reasons the &lt;a href=&quot;http://martinfowler.com/bliki/TellDontAsk.html&quot;&gt;tell, don’t ask&lt;/a&gt; principle is sometimes useful for object-oriented programming. However, this &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; class could have a better API, mainly because of the exposure of problematic mutable state. We could improve the API and eliminate the problematic mutable state by returning a copy of the mutable state, like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Now the scope of the mutable state has changed, so that its scope is the same as the scope of the caller. The second version of this code just &lt;em&gt;feels&lt;/em&gt; better. I think it is because we often have a natural tendency to avoid problematic mutable state.&lt;/p&gt; &lt;p&gt;Consider a function like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Immediately this function makes my skin crawl. It does the same for the compiler:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;employee.cpp:14:12: warning: reference to stack memory associated with local variable &apos;answer&apos; returned [-Wreturn-stack-address] return answer; ^~~~~~ &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This is a clear case of problematic mutable state, since a reference to a local variable is returned. The memory location for that reference (on the stack) can be reused after the function returns; we have no guarantee that the value in that memory location won’t change. This case of problematic mutable state is so clear, the compiler even warns us about it. But it really is similar to the first iteration of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; class above. By exposing mutable state to a scope too large, we make that mutable state problematic.&lt;/p&gt; &lt;p&gt;This problem is not restricted to memory access in native languages either. This C# code has a similar problem:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Titles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;By exposing a mutable collection publicly, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; class here has introduced the possibility that other code could add or remove entries from that collection, thus changing the state of the collection in a way that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;employee&lt;/code&gt; class does not expect. Again, this can be corrected with a better API design, as suggested by the &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/dn169389(v=vs.110).aspx&quot;&gt;.NET Framework Design Guidelines&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;DO NOT provide settable collection properties.&lt;/li&gt; &lt;li&gt;DO use ReadOnlyCollection&lt;T&gt;, a subclass of ReadOnlyCollection&lt;T&gt;, or in rare cases IEnumerable&lt;T&gt; for properties or return values representing read-only collections&lt;/T&gt;&lt;/T&gt;&lt;/T&gt;&lt;/li&gt; &lt;/ul&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;employee&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadOnlyCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Titles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReadOnlyCollection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;employee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;All of these examples of problematic mutable state can be solved by better controlling the scope of mutable state. In this context “better” usually means:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Make the scope of mutable state as small as possible.&lt;/li&gt; &lt;li&gt;Avoid leaking the mutable state outside of that scope.&lt;/li&gt; &lt;li&gt;Make a copy of the mutable state to change its scope where necessary.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;In object-oriented programming, this concept is known as &lt;a href=&quot;http://en.wikipedia.org/wiki/Encapsulation_%28object-oriented_programming%29&quot;&gt;encapsulation&lt;/a&gt;. But in my experience, encapsulation can be difficult to get right, especially over the long lifetime of a given class. Instead, functional programming can help prevent mutable state by changing the question.&lt;/p&gt; &lt;h2 id=&quot;why-can-functional-code-solve-the-problems-with-mutable-state&quot;&gt;Why can functional code solve the problems with mutable state?&lt;/h2&gt; &lt;p&gt;Functional programming can solve problems with mutable state by changing the question from “How do we manage mutable state?” to “Why do we have mutable state?”. Strict functional languages like Haskell eliminate almost all mutable state, making problematic mutable state difficult to introduce. Even in C# and C++ though, we can take a functional approach by using static or free functions and avoiding static and global data.&lt;/p&gt; &lt;p&gt;As long as these functions are small, we can limit the scope of the mutable state to something we can easily reason about. Once we know all of the possible values of the mutable state, and we can understand all of the code which causes transitions from one value to another, that mutable state is no longer problematic.&lt;/p&gt; &lt;p&gt;Functions which affect the state of only local variables, like &lt;a href=&quot;http://dlang.org/function.html#pure-functions&quot;&gt;pure functions&lt;/a&gt; in D, allow the compiler to have a built-in restart button. Since local variables (i.e. mutable state) are created at the start of each function and destroyed at its end, every call to a function resets the mutable state. So the same techniques for “fixing” problems with mutable state we use as consumers of software can be used as creators of software by taking a functional approach.&lt;/p&gt; </content> </entry> <entry> <title>Component design - lessons from plumbing</title> <link href="http://joshpeterson.github.io/blog/2015/component-design-lessons-from-plumbing/"/> <updated>2015-03-14T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2015/component-design-lessons-from-plumbing</id> <content type="html">&lt;p&gt;Recently my water heater decided to give up the ghost, in a very messy way. As water was pouring from multiple places on its top, I started to wonder how I might replace it, given my serious lack of plumbing skills. During one of my five (!) trips to the local home improvement store the following day, I found this wonderful plumbing component.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/component-design-lessons-from-plumbing/uber-component.jpg&quot; alt=&quot;The uber plumbing component&quot; /&gt;&lt;/p&gt; &lt;p&gt;It’s difficult to quantify how much time this single component saved me. I think it can be measured in hours. This is a &lt;a href=&quot;http://www.sharkbite.com/product/flexible-water-heater-connectors-with-ball-valves/&quot;&gt;SharkBite flexible water heater connector with ball valve&lt;/a&gt;. As I was installing a new water heater, I thought about what I might learn from this glorious plumbing component (yes, I feel &lt;em&gt;that&lt;/em&gt; strongly about it).&lt;/p&gt; &lt;h2 id=&quot;single-responsibility&quot;&gt;Single responsibility&lt;/h2&gt; &lt;p&gt;The &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;Single Responsibility Principle&lt;/a&gt; is well known in software development circles. Still, I often feel a desire to build components that are flexible, and can do more than one thing. After all, I’m spending time building them, they ought to be useful, right? Take another look at this plumbing component. It does &lt;em&gt;exactly&lt;/em&gt; one thing, and absolutely nothing else. It is designed to connect only to a water heater:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;A 3/4” nut common to water heaters is on one end&lt;/li&gt; &lt;li&gt;A SharkBite connector designed to work with copper or flexible pipe is on the other end&lt;/li&gt; &lt;li&gt;Is is flexible, so account for an installer who does not measure exact distances (me)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This plumbing component is utterly useless for pretty much anything else, and that &lt;em&gt;does not matter&lt;/em&gt;.&lt;/p&gt; &lt;h2 id=&quot;good-interfaces&quot;&gt;Good interfaces&lt;/h2&gt; &lt;p&gt;For a professional plumber, the SharkBite interface is probably a bit of a joke. A plumber will usually solder copper pipe with a torch. This metal bound is excellent, but requires skills and experience that I don’t have. For an amateur like me, a push-together connection that requires almost no tools and does not leak is perfect. It is difficult to make a SharkBite plumbing connection incorrectly - the sign of a good interface.&lt;/p&gt; &lt;p&gt;Oh how I would love to have a SharkBite connection on the water heater side of the interface as well. Since it seems unlikely that water heater manufacturers will adopt SharkBite connections anytime soon, this wonderful component compromised where necessary. It adheres to the standard interface to water heaters, without any fuss.&lt;/p&gt; &lt;h2 id=&quot;key-behavior&quot;&gt;Key behavior&lt;/h2&gt; &lt;p&gt;This single best part of this plumbing component is the built-in ball valve. Hands down, the most important part of any water heater installation is the shut-off valve. I learned this the hard way when my previous water heater died. The built-in valve solves three problems for an amateur:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;It allows me to replace the old shut-off valve.&lt;/li&gt; &lt;li&gt;It does not require another connection between the valve and the input pipe.&lt;/li&gt; &lt;li&gt;It provides a simple on/off toggle where I don’t need anything else.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Clearly whoever designed this plumbing component new something about water heater installation. They knew which behaviors are necessary, and which ones are not.&lt;/p&gt; &lt;h2 id=&quot;lessons&quot;&gt;Lessons&lt;/h2&gt; &lt;p&gt;The next time I design a software component, I’ll be thinking about plumbing. I’ll try to design a component that:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Does exactly one thing&lt;/li&gt; &lt;li&gt;Works with existing interfaces and defines better ones where possible&lt;/li&gt; &lt;li&gt;Performs the behaviors its clients want, and no more&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;More than anything else, choosing the right tool for the job continues to have the biggest impact on the correct the prompt completion of a job. For a professional plumbing, this component is probably useless. For me, it was invaluable.&lt;/p&gt; </content> </entry> <entry> <title>Literal suffixes matter in C++</title> <link href="http://joshpeterson.github.io/blog/2014/literal-suffixes-matter-in-c-plus-plus/"/> <updated>2014-09-01T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/literal-suffixes-matter-in-c-plus-plus</id> <content type="html">&lt;p&gt;As I was debugging a problem in some C++ code last week, I couldn’t help thinking about Gary Bernhardt’s &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;“Wat”&lt;/a&gt; lightning talk. Sometimes, I run across problems that seem so inconceivable, Wat!?!? is the only appropriate reaction. After a colleague pointed out the oddly simple solution to this problem (it is the proper use of a literal suffix), I learned something new about C++ that I wanted to share.&lt;/p&gt; &lt;h2 id=&quot;what-does-this-code-print&quot;&gt;What does this code print?&lt;/h2&gt; &lt;p&gt;Here is the seemingly simple code that did not work as I expected:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Now compile and run this code (I used Visual Studio 2013):&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt;cl /nologo /EHsc wat.cpp wat.cpp C:\&amp;gt;wat.exe 2147483648 &amp;lt;-- Wat!?!? &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Is this a bug in the compiler? Why did it print a positive value when I explicitly set the value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wat&lt;/code&gt; variable to a negative value? Let’s try something else:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat_32: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt;cl /nologo /EHsc wat.cpp wat.cpp C:\&amp;gt;wat.exe wat: 2147483648 &amp;lt;-- Wat!?!? wat_32: -2147483648 &amp;lt;-- !(Wat!?!?) &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;How are these two assignments different? The 32-bit integer looks like I would expected, but the 64-bit integer is still wrong. Let’s look at the actual bits (via hexadecimal):&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat_32: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt;cl /nologo /EHsc wat.cpp wat.cpp C:\&amp;gt;wat.exe wat: 0x80000000 wat_32: 0x80000000 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;My initial response to this output was &lt;strong&gt;Wat!?!?!?!?!?!&lt;/strong&gt; After that mental outburst, it was time to ask my colleagues:&lt;/p&gt; &lt;blockquote&gt; &lt;pre&gt;me: Wat!?!? colleague: Try a suffix. me: A what? colleague: LL me: Oh, yeah&lt;/pre&gt; &lt;/blockquote&gt; &lt;p&gt;So, I tried a suffix:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;iostream&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;cstdint&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648LL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int32_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;wat_32: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; 0x&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wat_32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;to which the compiler dutifully responded:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\&amp;gt;cl /nologo /EHsc wat.cpp wat.cpp C:\&amp;gt;wat.exe wat: -2147483648 0xffffffff80000000 wat_32: -2147483648 0x80000000 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Now the cause of the problem was clear. Without the literal suffix &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LL&lt;/code&gt; the compiler was &lt;em&gt;correctly&lt;/em&gt; zero extending the 32-bit integer literal value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2147483648&lt;/code&gt; to 64-bits which actually has a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2147483648&lt;/code&gt;. I had to explicitly tell the compiler that I want to treat the literal as a 64-bit integer using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LL&lt;/code&gt; suffix.&lt;/p&gt; &lt;h2 id=&quot;who-writes-code-like-this&quot;&gt;Who writes code like this?&lt;/h2&gt; &lt;p&gt;This looks like a contrived example, but it really wasn’t. The value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-2147483648&lt;/code&gt; happens to be the minimum value of a 32-bit integer minus 1. I’m working on the team building &lt;a href=&quot;http://blogs.unity3d.com/2014/05/20/the-future-of-scripting-in-unity/&quot;&gt;il2cpp&lt;/a&gt;, and I was implementing the IL opcode &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.conv_ovf_i4.aspx&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conv.ovf.i4&lt;/code&gt;&lt;/a&gt;, which attempts to convert a value on the stack to a 32-bit signed integer, and throws an exception if the value is too great. During that process, I discovered that the code generated for the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/system.reflection.emit.opcodes.ldc_i8.aspx&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldc.i8&lt;/code&gt;&lt;/a&gt; opcode wasn’t working as expected.&lt;/p&gt; &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldc.i8&lt;/code&gt; opcode loads a given 64-bit integer onto the evaluation stack. The C++ code generated by il2cpp for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldc.i8&lt;/code&gt; instruction looked like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int64_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L_20_System_Int64&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483648&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I could see in the C++ debugger that the value in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L_20_System_Int64&lt;/code&gt; variable was not correct. Indeed, the lack of a literal suffix was the cause. After a simple change to the il2cpp code generation method for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldc.i8&lt;/code&gt;, the correct C++ code was generated, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conv.ovf.i4&lt;/code&gt; test worked as expected.&lt;/p&gt; &lt;h2 id=&quot;literal-suffixes-do-matter&quot;&gt;Literal suffixes do matter&lt;/h2&gt; &lt;p&gt;I was surprised to see the effort in C++11 to get &lt;a href=&quot;http://en.cppreference.com/w/cpp/language/user_literal&quot;&gt;user-defined literal suffixes&lt;/a&gt; into the standard. After this experience though, I have a new found respect for these seemingly innocuous characters, and the importance they can play in the correct execution of a program.&lt;/p&gt; </content> </entry> <entry> <title>Getting started with pepper.js on Windows</title> <link href="http://joshpeterson.github.io/blog/2014/getting-started-with-pepper-js-on-windows/"/> <updated>2014-08-23T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/getting-started-with-pepper-js-on-windows</id> <content type="html">&lt;p&gt;For some time now I’ve wanted to make my vector-based math application &lt;a href=&quot;https://github.com/joshpeterson/osoasso&quot;&gt;Osoasso&lt;/a&gt; work with &lt;a href=&quot;https://github.com/kripken/emscripten/wiki&quot;&gt;Emscripten&lt;/a&gt; and &lt;a href=&quot;https://github.com/google/pepper.js&quot;&gt;pepper.js&lt;/a&gt;. Since Osoasso uses Google’s &lt;a href=&quot;https://developer.chrome.com/native-client&quot;&gt;Native Client SDK&lt;/a&gt; to allow C++ code to execute in a browser, it is restricted to work in Google Chrome only. The pepper.js project gives the promise that the same code may work in most browsers. I’m especially interested in the performance tradeoff between C++ and JavaScript code in this case.&lt;/p&gt; &lt;p&gt;This week I decided to give pepper.js a try. I’ve not yet started to compile my code, but I ran into a few problems compiling and running the examples. I wanted to write down the solutions here so that others (and I) won’t need to solve the same problems again.&lt;/p&gt; &lt;h2 id=&quot;getting-dependencies&quot;&gt;Getting dependencies&lt;/h2&gt; &lt;h3 id=&quot;emscripten&quot;&gt;Emscripten#&lt;/h3&gt; &lt;p&gt;To use pepper.js, I first needed to install Emscripten. I was able to obtain the Emscripten SDK from &lt;a href=&quot;http://kripken.github.io/emscripten-site/docs/getting_started/downloads.html&quot;&gt;this page&lt;/a&gt;. At the time of writing, version 1.22.0 is the latest version of the SDK. However, I’m using 32-bit Windows 7, so I had to scroll to bottom of the page and download version 1.12.0, the last version for 32-bit Windows.&lt;/p&gt; &lt;h3 id=&quot;windows-make&quot;&gt;Windows make#&lt;/h3&gt; &lt;p&gt;The pepper.js &lt;a href=&quot;https://github.com/google/pepper.js/blob/master/README.rst&quot;&gt;README&lt;/a&gt; indicates the next step is to build the examples using the following command (among a few others):&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make TOOLCHAIN=emscripten CONFIG=Debug &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;When I initially tried this, I saw a rather odd and surprising error. As it turns out, I had the D SDK installed, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; command on my machine was running the D version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt;, not the GNU version. After moving the D verison out of the way, I downloaded the GNU Win32 version of make &lt;a href=&quot;http://gnuwin32.sourceforge.net/packages/make.htm&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;spaces-in-a-path&quot;&gt;Spaces in a path&lt;/h2&gt; &lt;p&gt;When I ran the command above, I noticed the following output:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make -C ppapi make[1]: Entering directory `C:/Users/Josh/Documents/development/pepper.js/examples/ppapi&apos; CXX emscripten/debug/stub_emscripten.o &apos;C:\Program&apos; is not recognized as an internal or external command, operable program or batch file. make[1]: *** [emscripten/debug/stub_emscripten.o] Error 1 make[1]: Leaving directory `C:/Users/Josh/Documents/development/pepper.js/examples/ppapi&apos; make: *** [ppapi_TARGET] Error 2 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;This indicates that some part of the build system is not handling the space between the words “Program” and “Files” in the path to some executable. But which executable is the problem? I’m by no means an expert in Makefile debugging, but I did find that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; option, which I used. After a good bit of output, I saw this information&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating temporary batch file C:\Users\Josh\AppData\Local\Temp\make3560-1.bat make[1]: Entering directory `C:/Users/Josh/Documents/development/pepper.js/examples/ppapi&apos; CreateProcess(C:\Users\Josh\AppData\Local\Temp\make3560-1.bat,C:\Users\Josh\AppData\Local\Temp\make3560-1.bat,...) Putting child 0x012ada98 (emscripten/debug/stub_emscripten.o) PID 19563464 on the chain. Live child 0x012ada98 (emscripten/debug/stub_emscripten.o) PID 19563464 CXX emscripten/debug/stub_emscripten.o &apos;C:\Program&apos; is not recognized as an internal or external command, operable program or batch file. Reaping losing child 0x012ada98 PID 19563464 Cleaning up temp batch file C:\Users\Josh\AppData\Local\Temp\make3560-1.bat &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;So it seemed likely that the file make3560-1.bat was being executed and was causing the problem. Unfortunately, that file was deleted after the error.&lt;/p&gt; &lt;p&gt;Next, I used the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-i&lt;/code&gt; option to cause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make&lt;/code&gt; to continue after an error occurs. I was able to find a build which ran long enough so that I could view the contents of the makeXXX-1.bat file. Sure enough, the path to the Emscripten compiler was not quoted. Since Emscripten installed into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Program Files\Emscripten\emscripten\1.12.0&lt;/code&gt; directory on my computer and set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EMSCRIPTEN&lt;/code&gt; environment variable to point to that directory, this problem occurred. I &lt;a href=&quot;https://github.com/google/pepper.js/commit/15a802244ff71a6a792b8311866e86c1569358d2#diff-d41d8cd98f00b204e9800998ecf8427e&quot;&gt;modified&lt;/a&gt; the tools/nacl_emscripten.mk file to quote the paths to the Emscripten compilers, and the make command succeeded. This change has now been pulled into the pepper.js source, so it should be corrected.&lt;/p&gt; &lt;h2 id=&quot;building-in-release&quot;&gt;Building in release&lt;/h2&gt; &lt;p&gt;After building in debug, the README indicates that the examples should be build in release as well, using this command&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make TOOLCHAIN=emscripten CONFIG=Release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;However, something does not work correctly in the release build for many of the examples. Starting with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hello_world&lt;/code&gt; example, I see this error:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;undefined:1 ^ SyntaxError: Unexpected token ILLEGAL at eval (native) at globalEval (C:\Program Files\Emscripten\emscripten\1.12.0\src\compiler.js:105:8) at load (C:\Program Files\Emscripten\emscripten\1.12.0\src\compiler.js:61:5) at Object.&amp;lt;anonymous&amp;gt; (C:\Program Files\Emscripten\emscripten\1.12.0\src\compiler.js:225:10) at Module._compile (module.js:456:26) at Object.Module._extensions..js (module.js:474:10) at Module.load (module.js:356:32) at Function.Module._load (module.js:312:12) at Function.Module.runMain (module.js:497:10) at startup (node.js:119:16) Traceback (most recent call last): File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emscripten.py&quot;, line 1405, in &amp;lt;module&amp;gt; _main(environ=os.environ) File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emscripten.py&quot;, line 1393, in _main temp_files.run_and_clean(lambda: main( File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\tools\tempfiles.py&quot;, line 39, in run_and_clean return func() File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emscripten.py&quot;, line 1401, in &amp;lt;lambda&amp;gt; DEBUG_CACHE=DEBUG_CACHE, File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emscripten.py&quot;, line 1288, in main jcache=jcache, temp_files=temp_files, DEBUG=DEBUG, DEBUG_CACHE=DEBUG_CACHE) File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emscripten.py&quot;, line 292, in emscript assert len(output) == 2, &apos;Did not receive forwarded data in an output - process failed? We only got: &apos; + output[0][-3000:] AssertionError: Did not receive forwarded data in an output - process failed? We only got: Traceback (most recent call last): File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\emcc&quot;, line 1525, in &amp;lt;module&amp;gt; final = shared.Building.emscripten(final, append_ext=False, extra_args=extra_args) File &quot;C:\Program Files\Emscripten\emscripten\1.12.0\tools\shared.py&quot;, line 1276, in emscripten assert os.path.exists(filename + &apos;.o.js&apos;) and len(open(filename + &apos;.o.js&apos;, &apos;r&apos;).read()) &amp;gt; 0, &apos;Emscripten failed to generate .js: &apos; + str(compiler_output) AssertionError: Emscripten failed to generate .js: make[1]: *** [emscripten/Release/hello_world_unstripped.js] Error 1 make[1]: Leaving directory `C:/Users/Josh/Documents/development/pepper.js/examples/hello_world&apos; make: *** [hello_world_TARGET] Error 2 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;I’m not sure about the cause of this problem, but it may be similar to this &lt;a href=&quot;https://github.com/google/pepper.js/issues/8&quot;&gt;issue&lt;/a&gt; reported recently. In spite of this problem, we can still verify that the debug build of the examples worked.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Update 2014-08-26:&lt;/strong&gt; I was able to work around the problem above by using the command line:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make TOOLCHAIN=emscripten CONFIG=release &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;Note that the “r” in “release” is lowercase instead of uppercase. It seems this problem is not the same as the issue I linked to above. This change does correct the problem and allow the release build of the examples to complete for me though.&lt;/p&gt; &lt;h2 id=&quot;testing-the-debug-examples&quot;&gt;Testing the debug examples&lt;/h2&gt; &lt;p&gt;After running the local web server to test the examples, I found that none of them were working! This occurs because the website uses the release build of the examples, which is not available. It is relatively easy to use the debug build of the example though. First, select the “Developer Mode” option near the bottom of the examples site:&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/getting-started-with-pepper-js-on-windows/select-debug.png&quot; alt=&quot;Select developer mode&quot; /&gt;&lt;/p&gt; &lt;p&gt;This will enable a “Config” section of the site, which will allow you to switch to the debug build, where the examples should work.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/getting-started-with-pepper-js-on-windows/use-debug.png&quot; alt=&quot;Use debug configuration&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;With these few tweaks, I was able to get the pepper.js examples working well on Windows. The next step is to build my project!&lt;/p&gt; </content> </entry> <entry> <title>Visual Studio is busy</title> <link href="http://joshpeterson.github.io/blog/2014/visual-studio-is-busy/"/> <updated>2014-08-08T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/visual-studio-is-busy</id> <content type="html">&lt;p&gt;One of the preferences in the &lt;a href=&quot;http://unity3d.com&quot;&gt;Unity&lt;/a&gt; editor allows a user to choose which external editor should be used to open a script file. An often-up-voted &lt;a href=&quot;http://issuetracker.unity3d.com/issues/double-clicking-a-c-number-script-will-open-monodevelop-instead-of-visual-studio&quot;&gt;problem&lt;/a&gt; on the Unity Issue Tracker occurs when some version of Visual Studio is chosen as the external editor, but Unity opens a script file in Mono Develop instead. I recently had the opportunity to investigate this problem, and I learned some interesting information about how out-of-process calls can be made to Visual Studio.&lt;/p&gt; &lt;h2 id=&quot;communication-via-com&quot;&gt;Communication via COM&lt;/h2&gt; &lt;p&gt;Unity communicates with Visual Studio via a COM interface named the &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/envdte.dte.aspx&quot;&gt;DTE&lt;/a&gt; interface. All methods on a COM interface return a value of type &lt;a href=&quot;http://msdn.microsoft.com/en-us/library/bb446131.aspx&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HRESULT&lt;/code&gt;&lt;/a&gt;, which is a 32-bit value where each bit has a different meaning. The Windows header files define various common &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HRESULT&lt;/code&gt; values, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_OK&lt;/code&gt; to indicate a successful call to the given COM method. Calls to a COM method that fail can return any one of various error values. A COM interface also allows these calls to be made from one process to another. Unity uses this aspect of the DTE interface to communicate with Visual Studio.&lt;/p&gt; &lt;p&gt;The problematic error code returned by Visual Studio in this case is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt;, which has a hexadecimal value of 0x80010001. The value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt; is a rather general error code which indicates that Visual Studio cannot handle the call for some reason. This often happens because Visual Studio is busy doing something else, and it cannot service the remoted call from the DTE interface in the calling process.&lt;/p&gt; &lt;h2 id=&quot;solving-the-problem&quot;&gt;Solving the problem&lt;/h2&gt; &lt;p&gt;In the issue at hand, it became clear that the behavior was intermittent. Some users reported always having the problem, others say it happens half of the time a script file was opened. Still other users never experienced it at all. Users in all three groups were describing the behavior correctly! After some investigation, we learned that this problem usually occurs in two specific cases:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;A new instance of Visual Studio has been started by Unity.&lt;/li&gt; &lt;li&gt;An existing instance of Visual Studio is displaying a modal dialog.&lt;/li&gt; &lt;/ol&gt; &lt;h3 id=&quot;case-1-a-new-instance&quot;&gt;Case 1: A new instance#&lt;/h3&gt; &lt;p&gt;The first of these two cases is likely the most common, and is one that has been experienced in multiple versions of Unity. After starting a new instance of Visual Studio, the code in Unity had a loop that looked something like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeMs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeoutMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SUCCEEDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_MainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intervalMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeMs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intervalMs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This loop will call the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_MainWindow&lt;/code&gt; method a number of times until it finds a successful call or until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeoutMs&lt;/code&gt; time is reached. In practice, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;timeMs&lt;/code&gt; is five seconds, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intervalMs&lt;/code&gt; is fifty milliseconds. This code only executes when a new instance of Visual Studio is started, and its intent it to wait until &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_REJECTED&lt;/code&gt; return values stop happening, indicating that Visual Studio has completed its startup and it ready to accept other calls on the DTE interface. Sometimes this worked as expected.&lt;/p&gt; &lt;p&gt;Even with this code in place, the problem continued to occur for some users. After investigating a bit more, we found that the call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_MainWindow&lt;/code&gt; can return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S_OK&lt;/code&gt;, but that does not necessarily indicate that Visual Studio is ready for other DTE calls. During the startup of a new Visual Studio instance, calls to the DTE interface may be momentarily allowed, then later fail again with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt;. This is precisely what was happening. After getting a successful call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_MainWindow&lt;/code&gt;, the code in Unity continued to call other DTE functions, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_ItemOperations&lt;/code&gt; and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenFile&lt;/code&gt; on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ItemOperations&lt;/code&gt; object. We found that at any given time, these calls can also fail with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt;, even after &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_MainWindow&lt;/code&gt; returned successfully!&lt;/p&gt; &lt;p&gt;When one of these calls failed, the code in Unity decided to fall back to a different external code editor, which is often Mono Develop. If the script could not be opened in Mono Develop, then Unity would fall back to the editor registered with Windows to handle the script file type (e.g. .cs). This is often a different version of Visual Studio than the one selected in the Unity preferences, or maybe even Notepad.&lt;/p&gt; &lt;p&gt;The newly started instance of Visual Studio, meanwhile, was often left in a very odd state. It’s process could be running, but its window may not actually be shown, so there is no clear indication that it has been started. A subsequent attempt to open a script file via Unity might then find this running instance of Visual Studio and correctly use it to open the script, leading to a behavior where Unity works correctly half of the time and fails the other half.&lt;/p&gt; &lt;p&gt;The code above to wait in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;while&lt;/code&gt; loop with a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sleep&lt;/code&gt; is not exactly pretty. I cringed the first time I saw it. I was soon re-using it though! We don’t have nearly the tools for cross-process communication that we have for cross-thread communication. So I decided to solve this problem by using this same while loop in more places where the communication between Unity and Visual Studio is likely to fail immediately after Visual Studio is started. In practice, the loop seldom iterates more than one or two times, so Unity won’t usually wait for 5 seconds. Although Visual Studio often does return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt; immediately after it starts, it will soon (a few milliseconds later) be ready to accept out-of-process calls on the DTE interface.&lt;/p&gt; &lt;h3 id=&quot;case-2-a-modal-dialog&quot;&gt;Case 2: A modal dialog#&lt;/h3&gt; &lt;p&gt;We also see Visual Studio return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt; when it is displaying certain modal dialogs. For example, if a Visual Studio project is modified by the user in Visual Studio and by the Unity editor (for example, when a new script is added in Unity), Visual Studio will display a dialog asking the user to either keep the changed project file or discard it in favor of the new one. Any calls made on the DTE interface while this dialog is displayed will fail with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt;. We have found that not all modal dialogs in Visual Studio behave this way, but some do.&lt;/p&gt; &lt;p&gt;Currently, Unity does not store any state information about which Visual Studio session was last used to display a script file from Unity. Instead, Unity inspects each running Visual Studio instance and asks it (via the DTE interface) which solution file it has open. If a session of Visual Studio is displaying a modal dialog like the one described above, Unity is unable to get a proper response from the DTE interface about which solution is open. Therefore, a request by the user of Unity to open a new script file in Visual Studio can fail if Visual Studio is busy displaying a dialog.&lt;/p&gt; &lt;p&gt;In this case, Unity will attempt to open a new instance of Visual Studio to display the script file. Clearly, Unity could improve its behavior in this case by keeping track of which Visual Studio instance was last used to display a given script file. However, storing that state brings along its own set of cross-process synchronization problems, since Unity must then track more information about which Visual Studio sessions are closed or crash (among other cases). Certainly, this is a direction that we might take in the future though.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;Cross-process synchronization can be difficult, especially when the code for one of the process is outside your control. Any communication with Visual Studio on the DTE interface is subject to the possibility of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RPC_E_CALL_REJECTED&lt;/code&gt; error code, so we must write the client-side code defensively, allowing for the possibility of retrying a failed call.&lt;/p&gt; </content> </entry> <entry> <title>Garbage collection in libgc</title> <link href="http://joshpeterson.github.io/blog/2014/garbage-collection-in-libgc/"/> <updated>2014-07-16T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/garbage-collection-in-libgc</id> <content type="html">&lt;p&gt;In my &lt;a href=&quot;/reading-the-libgc-code&quot;&gt;previous post&lt;/a&gt; I attempted to read and understand some of the allocation code in the &lt;a href=&quot;https://github.com/ivmai/bdwgc/&quot;&gt;libgc&lt;/a&gt; garbage collector. In this post I will attempt to understand some of the collection code.&lt;/p&gt; &lt;p&gt;The libgc code is a &lt;em&gt;conservative&lt;/em&gt; garbage collector. That is, it does not require the allocator, client program, or operating system do anything special to allow it to recognize pointers to objects allocated on the heap. Instead, it scans the memory and registers, looking for values that might be pointers, and attempts to reclaim unused memory. Interestingly, the libgc code provides &lt;a href=&quot;https://github.com/ivmai/bdwgc/#general-description&quot;&gt;no guarantees&lt;/a&gt; that it will reclaim all unused memory! However, it is usually able to reclaim most, leaving the amount of memory not reclaimed bounded.&lt;/p&gt; &lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt; &lt;p&gt;The libgc code is the Boehm-Demers-Weiser conservative garbage collector for C and C++. It is used in a number of projects, including Mono and GCJ. I’m entirely new to the code base, so any conclusions I draw here could be incorrect. Please take them with a grain of salt, or, better yet, attempt to disprove them yourself. If you do, please let me know, as I am happy to learn something that I may have missed.&lt;/p&gt; &lt;h2 id=&quot;when-does-garbage-collection-occur&quot;&gt;When does garbage collection occur&lt;/h2&gt; &lt;p&gt;Garbage collection actually occurs during allocation. To see this, I’ll use the following test program:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define GC_NOT_DLL #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;gc.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;allocate_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pointers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocate_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allocate_something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;We saw in the previous post that libgc makes a distinction between large and small objects. I need to allocate an object of size 2048 bytes to use the large object allocation on my 32-bit Windows 7 machine. Garbage collection is first attempted when the libgc code recognizes that it does not have enough free space to complete the requested allocation. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_alloc_large&lt;/code&gt; function calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_allochblk&lt;/code&gt; once to perform the necessary allocation. If this allocation fails, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_collect_or_expand&lt;/code&gt; function is called to attempt to either reclaim some unused memory or expand the pool of available memory from the OS. Once &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_collect_or_expand&lt;/code&gt; completes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_allochblk&lt;/code&gt; is called again.&lt;/p&gt; &lt;h2 id=&quot;marking-objects-that-are-in-use&quot;&gt;Marking objects that are in use&lt;/h2&gt; &lt;p&gt;The libgc code uses a marking process to determine which blocks of allocated memory are still in use, and therefore which ones can be reclaimed. A block that is probably still in use is marked and will not be reclaimed yet. The code which does the marking is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_mark_from&lt;/code&gt; function in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mark.c&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;Reading this function is a bit daunting, since it is rather complex. This is a quote from the comment at the top of the function:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Note that this is the most performance critical routine in the collector. Hence it contains all sorts of ugly hacks to speed things up.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;I won’t attempt to understand the entire function. Instead, I’ll stick to the section near the &lt;a href=&quot;https://github.com/ivmai/bdwgc/blob/master/mark.c# L830-L851&quot;&gt;end&lt;/a&gt; of the function which actually marks used blocks.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Empirically, unrolling this loop doesn&apos;t help a lot. */&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Since PUSH_CONTENTS expands to a lot of code, */&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* we don&apos;t. */&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FIXUP_POINTER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PREFETCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PREF_DIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CACHE_LINE_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;least_ha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greatest_ha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Prefetch the contents of the object we just pushed. It&apos;s */&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* likely we will need them soon. */&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PREFETCH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;# ifdef ENABLE_TRACE &lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_trace_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_log_printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GC #%u: considering(1) %p -&amp;gt; %p&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_gc_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;# endif &lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* ENABLE_TRACE */&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PUSH_CONTENTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_stack_top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mark_stack_limit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ALIGNMENT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Sometimes I find it easier to read code from the inside out. That is, find the code which performs the action I want to understand, then follow the conditional statements which lead to that code, starting with the closest.&lt;/p&gt; &lt;p&gt;In this case, I want to learn how objects that are in use are marked. The libgc code keeps track of a stack of marked objects. This code will add a block to the stop of the stack in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PUSH_CONTENTS&lt;/code&gt; macro on line 18. An object is considered in use (line 8), and is marked, if its address (represented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current&lt;/code&gt;) is between the least (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;least_ha&lt;/code&gt;) and greatest (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;greatest_ha&lt;/code&gt;) plausible heap addresses, which were computed earlier. The searching starts at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;current_p&lt;/code&gt; (line 1) and stops with the bound determined by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;limit&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;As the comment at the top of the function mentions, the calling code is responsible to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_mark_from&lt;/code&gt; for each frame on the mark stack.&lt;/p&gt; &lt;h2 id=&quot;reclaiming-everything-not-marked&quot;&gt;Reclaiming everything not marked&lt;/h2&gt; &lt;p&gt;After all of the allocated memory that is in use has been marked, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_reclaim_block&lt;/code&gt; function is called to free all blocks that are not marked via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_freehblk&lt;/code&gt; function. Once a block is reclaimed, it is added to the free list so that it can be used again in a subsequent allocation.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I’ve learned a bit about the allocation and collection code in libgc. The code is rather complex and highly optimized for various compilers and platforms, so understanding even a small portion of it is difficult. The fact that it can serve as a drop-in replacement for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;free&lt;/code&gt; without placing any additional requirements on the client code or the operating system is fascinating.&lt;/p&gt; </content> </entry> <entry> <title>Reading the libgc code</title> <link href="http://joshpeterson.github.io/blog/2014/reading-the-libgc-code/"/> <updated>2014-06-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/reading-the-libgc-code</id> <content type="html">&lt;p&gt;After listening to a recent &lt;a href=&quot;http://rubyrogues.com/159-rr-hacking-education-with-saron-yitbarek/&quot;&gt;episode&lt;/a&gt; of Ruby Rogues, I was inspired to read some code. I’ve also been trying to learn something about the &lt;a href=&quot;https://github.com/ivmai/bdwgc/&quot;&gt;libgc&lt;/a&gt; code, so I thought this might be a good opportunity to read some code and write about it.&lt;/p&gt; &lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt; &lt;p&gt;The libgc code is the Boehm-Demers-Weiser conservative garbage collector for C and C++. It is used in a number of projects, including Mono and GCJ. I’m entirely new to the code base, so any conclusions I draw here could be incorrect. Please take them with a grain of salt, or, better yet, attempt to disprove them yourself. If you do, please let me know, as I am happy to learn something that I may have missed.&lt;/p&gt; &lt;h2 id=&quot;building-libgc-on-windows&quot;&gt;Building libgc on Windows&lt;/h2&gt; &lt;p&gt;Code is executable, so one of the benefits of reading code is the clarity about the authors intention you can gain by debugging the code.&lt;/p&gt; &lt;p&gt;Following the instructions in the &lt;a href=&quot;https://github.com/ivmai/bdwgc/blob/master/doc/README.win32&quot;&gt;README.win32&lt;/a&gt; file to build libgc using Visual Studio 2013, I ran into a few problems. I renamed the &lt;a href=&quot;https://github.com/ivmai/bdwgc/blob/master/NT_MAKEFILE&quot;&gt;NT_MAKEFILE&lt;/a&gt; file to be MAKEFILE, then changed to the bdwgc directory in a Visual Studio command prompt window. When I ran the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nmake&lt;/code&gt; command, I saw the following output:&lt;/p&gt; &lt;pre&gt; Microsoft (R) Program Maintenance Utility Version 12.00.21005.1 Copyright (C) Microsoft Corporation. All rights reserved. makefile(6) : fatal error U1052: file &apos;ntwin32.mak&apos; not found Stop. &lt;/pre&gt; &lt;p&gt;It turns out that Visual Studio cannot fine the ntwin32.mak file in its installation directories. After a bit of searching, I found this file in the C:\Program Files\Microsoft SDKs\Windows\v7.1A\Include directory on my machine. So I copied both ntwin32.mak and win32.mak from that directory into the C:\Program Files\Microsoft Visual Studio 12.0\VC\include directory. This allowed the nmake command to complete successfully.&lt;/p&gt; &lt;h2 id=&quot;understanding-allocation&quot;&gt;Understanding allocation&lt;/h2&gt; &lt;p&gt;The libgc code is designed to be a drop-in replacement for heap-based memory management in C and C++ programs, so it provides an implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc&lt;/code&gt;, named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_malloc&lt;/code&gt; (the functions in the public interface of libgc all start with the GC_ prefix). To start my investigation of the code, I built the following program on 32-bit Windows 7:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define GC_NOT_DLL #include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;gc.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;small&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;small2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;small2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;large&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This code compiles using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bdwgc\include&lt;/code&gt; directory in the include path, and linking against the gc.lib static library. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_NOT_DLL&lt;/code&gt; define indicates that the code is using the static library.&lt;/p&gt; &lt;p&gt;The code I will read is contained in the &lt;a href=&quot;https://github.com/ivmai/bdwgc/blob/master/malloc.c&quot;&gt;malloc.c&lt;/a&gt; file from lines 253 to 286:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/* Allocate lb bytes of composite (pointerful) data */&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifdef THREAD_LOCAL_ALLOC &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_INNER&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_core_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#else &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_ATTR_MALLOC&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_CALL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_malloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DCL_LOCK_STATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SMALL_OBJ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_DBG_COLLECT_AT_MALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_size_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_objfreelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EXPECT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERAL_MALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_ASSERT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_greatest_plausible_heap_addr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_least_plausible_heap_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_objfreelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj_link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_bytes_allocd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRANULES_TO_BYTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GENERAL_MALLOC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NORMAL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The libgc code separates allocations into small and large objects. On my machine, any allocations of 2047 bytes or less are considered small objects by default, and libgc attempts to allocate these objects closer together. The test code I’m using allocates two small objects of the same size (4 bytes) so that we can see the process of allocation with and without initialization. Then the code allocates the smallest large object possible (2048 bytes), so that we can see the large object allocation process.&lt;/p&gt; &lt;p&gt;Here are a few tips for reading this code:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The libgc code defines a &lt;em&gt;granule&lt;/em&gt; as its smallest possible allocation size. On my machine, a granule is 8 bytes.&lt;/li&gt; &lt;li&gt;Some of the global data structures here are defines that forward the global &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_arrays&lt;/code&gt; structure. In the debugger, Visual Studio is not able to follow the defines, so it is helpful for me to watch the actual values. &lt;ul&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_size_map&lt;/code&gt; (line 14) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_arrays._size_map&lt;/code&gt;, the number of granules to allocate for a given size&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_objfreelist&lt;/code&gt; (line 16) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_arrays._objfreelist&lt;/code&gt;, the free list of objects&lt;/li&gt; &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_bytes_allocd&lt;/code&gt; (line 28) is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_arrays._bytes_allocd&lt;/code&gt;, the total number of bytes allocated&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;small-object-allocation&quot;&gt;Small object allocation&lt;/h2&gt; &lt;p&gt;Most of the code here is used for small object allocation. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op&lt;/code&gt; local variable, of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void *&lt;/code&gt; will be used to hold the point to the memory allocated for a small object. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lg&lt;/code&gt; local variable is the number of granules necessary to hold the small object. The code on lines 14 and 16 is used to determine first the number fo granules for the given size. In my case, 4 bytes requires 1 granule, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lg&lt;/code&gt; has a value of 1. Then the free list for granules of size 1 is checked. During the first allocation of a small object, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;op&lt;/code&gt; will have a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NULL&lt;/code&gt;, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GENERAL_MALLOC&lt;/code&gt; will be called on line 19 to initialize the free list for objects that require 1 granule and allocate the memory for this object. After this is complete, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_bytes_allocd&lt;/code&gt; global will have a value of 8, since one granule has been used.&lt;/p&gt; &lt;p&gt;A second small object allocation completes much faster, skipping the initialization in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GENERAL_MALLOC&lt;/code&gt;, and pulling an object directly off the free list on line 16. This behavior indicates the reason for the distinction between small and large objects. Multiple allocations of small objects, especially when they are similar in size, can be preformed with very low overhead.&lt;/p&gt; &lt;h2 id=&quot;large-object-allocation&quot;&gt;Large object allocation&lt;/h2&gt; &lt;p&gt;Large object allocation occurs entirely in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GENERAL_MALLOC&lt;/code&gt; function, which forwards to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GC_generic_malloc&lt;/code&gt; function on lines 170 to 222 of malloc.c. I’ll include the snippet of this function that deals with large object allocation, from lines 184 to 215:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 &lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ROUNDED_UP_GRANULES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GRANULES_TO_BYTES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_get_oom_fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJ_SZ_TO_BLOCKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_obj_kinds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_alloc_large&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_debugging_started&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HBLKSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#ifdef THREADS &lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Clear any memory that might be used for GC descriptors */&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* before we release the lock. */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRANULES_TO_WORDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;word&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GRANULES_TO_WORDS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GC_bytes_allocd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lb_rounded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNLOCK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GC_debugging_started&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BZERO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HBLKSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Once this code is executed, libgc has already determined this is a large object allocation. This large object will get its own section, defined by the number of granules on line 6. In this case, 2048 bytes require 257 granules, meaning the code will actually allocate 2056 bytes (the value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lb_rounded&lt;/code&gt; on line 7). This corresponds to 1 block on line 10, and the allocation occurs on line 13. If the allocation succeeds, the total number of bytes allocated is increased to 2072 on line 28, and the allocated memory is cleared on line 31 via a call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memset&lt;/code&gt;.&lt;/p&gt; &lt;h2 id=&quot;just-the-beginning&quot;&gt;Just the beginning&lt;/h2&gt; &lt;p&gt;The libgc code is complex and highly optimized, so this reading of the code has just scratched the surface of the allocation process. Next, I’ll explore how the code performs garbage collection.&lt;/p&gt; </content> </entry> <entry> <title>Performance of NaCL vs. PNaCL</title> <link href="http://joshpeterson.github.io/blog/2014/performance-of-nacl-vs-pnacl/"/> <updated>2014-05-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/performance-of-nacl-vs-pnacl</id> <content type="html">&lt;p&gt;Since I am now able to build my experimental vector-based mathematics application &lt;a href=&quot;http://osoasso.appspot.com&quot;&gt;Osoasso&lt;/a&gt; using Portable Native Client (PNaCL) with &lt;a href=&quot;/the-cost-of-setjump-longjump-exceptions&quot;&gt;exceptions enabled&lt;/a&gt;, I decided to test the performance of PNaCL.&lt;/p&gt; &lt;h2 id=&quot;a-confession&quot;&gt;A confession&lt;/h2&gt; &lt;p&gt;I chose to test the performance of Native Client (NaCL) and PNaCL by multiplying two \(nxn\) matrices, with \(n=1024\). The Osoasso code can use multiple threads, but I must confess that my current matrix multiplication implementation does not scale well. In fact, it scales only to about three threads, so these numbers are not nearly as good as they could be. Still, they do provide an interesting comparison between NaCL and PNaCL, at least in my code base.&lt;/p&gt; &lt;p&gt;I ran both tests on two machines, a dual core Intel T2050 1.6 GHz laptop and an Intel Xeon X5675 3.7GHz with 12 cores. On the former machine, I used two threads, on the latter machine I used three threads.&lt;/p&gt; &lt;h2 id=&quot;nacl-performance&quot;&gt;NaCL performance&lt;/h2&gt; &lt;p&gt;I multiplied the same two matrices made up of randomly generated double values five times using &lt;a href=&quot;http://19.osoasso.appspot.com&quot;&gt;version 19&lt;/a&gt; of Osoasso. This version is built with the NaCL newlib tool chain, and it requires the Native Client flag be enabled in Chrome. Here are the results:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;Machine&lt;/th&gt; &lt;th&gt;Intel T2050 1.6 GHz&lt;/th&gt; &lt;th&gt;Intel Xeon X5675 3.7GHz&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 1&lt;/td&gt; &lt;td&gt;40.6093&lt;/td&gt; &lt;td&gt;8.76589&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 2&lt;/td&gt; &lt;td&gt;40.636&lt;/td&gt; &lt;td&gt;8.9953&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 3&lt;/td&gt; &lt;td&gt;41.5904&lt;/td&gt; &lt;td&gt;9.111&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 4&lt;/td&gt; &lt;td&gt;40.756&lt;/td&gt; &lt;td&gt;9.11112&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 5&lt;/td&gt; &lt;td&gt;40.81&lt;/td&gt; &lt;td&gt;8.84316&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Average&lt;/td&gt; &lt;td&gt;40.88034&lt;/td&gt; &lt;td&gt;8.965294&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MFLOPS&lt;/td&gt; &lt;td&gt;52.531&lt;/td&gt; &lt;td&gt;239.533&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; All times are reported in seconds &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;pnacl-performance&quot;&gt;PNaCL performance&lt;/h2&gt; &lt;p&gt;Again, I multiplied the same two matrices made up of randomly generated double values five times using &lt;a href=&quot;http://20.osoasso.appspot.com&quot;&gt;version 20&lt;/a&gt; of Osoasso. This version is built with the PNaCL tool chain, and it does not require the Native Client flag be enabled in Chrome. Here are the results:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;Machine&lt;/th&gt; &lt;th&gt;Intel T2050 1.6 GHz&lt;/th&gt; &lt;th&gt;Intel Xeon X5675 3.7GHz&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 1&lt;/td&gt; &lt;td&gt;47.2024&lt;/td&gt; &lt;td&gt;7.48539&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 2&lt;/td&gt; &lt;td&gt;47.8889&lt;/td&gt; &lt;td&gt;8.73858&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 3&lt;/td&gt; &lt;td&gt;49.0555&lt;/td&gt; &lt;td&gt;8.94701&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 4&lt;/td&gt; &lt;td&gt;47.7729&lt;/td&gt; &lt;td&gt;8.91277&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Run 5&lt;/td&gt; &lt;td&gt;48.9688&lt;/td&gt; &lt;td&gt;9.01714&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Average&lt;/td&gt; &lt;td&gt;48.1777&lt;/td&gt; &lt;td&gt;8.620178&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;MFLOPS&lt;/td&gt; &lt;td&gt;44.574&lt;/td&gt; &lt;td&gt;249.123&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; All times are reported in seconds &lt;/center&gt; &lt;p&gt;&lt;br /&gt;&lt;/p&gt; &lt;h2 id=&quot;comparison&quot;&gt;Comparison&lt;/h2&gt; &lt;p&gt;These results present a mixed bag. While the performance of PNaCL was consistently worse on an older, dual-core laptop, it performed slightly better on a Xeon processor. For my experimental application at least, the cost of using PNaCL seems to be worth the benefit of portability. Now that the PNaCL build is the default for Osoasso, it can run in Chrome without the need to enable special flags.&lt;/p&gt; </content> </entry> <entry> <title>The cost of set-jump long-jump exceptions</title> <link href="http://joshpeterson.github.io/blog/2014/the-cost-of-setjump-longjump-exceptions/"/> <updated>2014-05-28T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/the-cost-of-setjump-longjump-exceptions</id> <content type="html">&lt;p&gt;Last year Google &lt;a href=&quot;https://groups.google.com/forum/#!topic/native-client-discuss/0spfg6O04FM&quot;&gt;announced&lt;/a&gt; support for C++ exceptions in the PNaCL tool chain of their &lt;a href=&quot;https://developer.chrome.com/native-client/overview&quot;&gt;Native Client&lt;/a&gt; technology. Since my experimental project &lt;a href=&quot;https://github.com/joshpeterson/osoasso&quot;&gt;Osoasso&lt;/a&gt; uses exceptions for some error handling, this was excellent news. I decided to start working to build my project using PNaCL. However, I was intrigued by this statement in the announcement:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;As before C++ exception handling is off by default, to ensure better performance and smaller code size. It is possible to use set-jump long-jump exception handling on stable pexes with the –pnacl-exceptions=sjlj compiler flag. Full zero-cost exceptions are currently only supported for unstable pexes…&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;I was unfamiliar with the concept of set-jump long-jump exception handling, and I wondered why it had some cost associated with it. Here I’ll attempt to explain that cost.&lt;/p&gt; &lt;h2 id=&quot;what-is-set-jump-long-jump-exception-handling&quot;&gt;What is set-jump long-jump exception handling?&lt;/h2&gt; &lt;p&gt;Set-jump long-jump exception handling is a simple method of exception handling implementation that uses the C methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp&lt;/code&gt; (or something like them). The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp&lt;/code&gt; method is used to store all of the processor state at a given location, and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;longjmp&lt;/code&gt; method is used used to return to that processor state and location if necessary. In LLVM (which is used for the PNaCL implementation), the &lt;a href=&quot;http://llvm.org/docs/ExceptionHandling.html#llvm-eh-sjlj-setjmp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm.eh.sjlj.setjmp&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;http://llvm.org/docs/ExceptionHandling.html#llvm-eh-sjlj-longjmp&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;llvm.eh.sjlj.longjmp&lt;/code&gt;&lt;/a&gt; intrinsics are used.&lt;/p&gt; &lt;p&gt;This type of exception handling is not considered zero-cost, since some additional code must be executed for each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try&lt;/code&gt; block or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw&lt;/code&gt; statement, even if the no exception occurs. As the LLVM exception handling &lt;a href=&quot;http://llvm.org/docs/ExceptionHandling.html&quot;&gt;documentation&lt;/a&gt; states:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;…SJLJ exception handling builds and removes the unwind frame context at runtime. This results in faster exception handling at the expense of slower execution when no exceptions are thrown. As exceptions are, by their nature, intended for uncommon code paths, DWARF exception handling is generally preferred to SJLJ.&lt;/p&gt; &lt;/blockquote&gt; &lt;h2 id=&quot;how-can-exceptions-be-enabled-with-pnacl&quot;&gt;How can exceptions be enabled with PNaCL?&lt;/h2&gt; &lt;p&gt;Exception handling can be enabled with PNaCL at compile and link time use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--pnacl-exceptions=sjlj&lt;/code&gt; flag. This flag must be passed to both the compiler and the linker. So in my Makefile, I have the following lines:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-makefile&quot; data-lang=&quot;makefile&quot;&gt;&lt;span class=&quot;nv&quot;&gt;CFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wall&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Wno-long-long&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-pthread&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-Werror&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;gnu++11 &lt;span class=&quot;nt&quot;&gt;-O2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pnacl-exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sjlj &lt;span class=&quot;nv&quot;&gt;LDFLAGS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pnacl-exceptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sjlj &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;call LINK_RULE,&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;TARGET&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;_unstripped,&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;SOURCES&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;LIBS&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;DEPS&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,&lt;span class=&quot;p&quot;&gt;$(&lt;/span&gt;LDFLAGS&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I spent a good bit of time wondering why the code in the first two lines did not work initially. Then I later realized that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LDFLAGS&lt;/code&gt; variable was not being passed to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LINK_RULE&lt;/code&gt; by default. I had to manually add it!&lt;/p&gt; &lt;h2 id=&quot;what-is-the-cost-of-sjlj-exceptions&quot;&gt;What is the cost of SJLJ exceptions?&lt;/h2&gt; &lt;p&gt;First, I measured the cost of SJLJ exceptions in two ways:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Compile time&lt;/li&gt; &lt;li&gt;Executable size&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The following table shows the data for both of these cases with and without exceptions.&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;Without Exceptions&lt;/th&gt; &lt;th&gt;With SJLJ Exceptions&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Compile time&lt;/td&gt; &lt;td&gt;2m 54 s&lt;/td&gt; &lt;td&gt;3m 1s&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Executable size&lt;/td&gt; &lt;td&gt;394,000 bytes&lt;/td&gt; &lt;td&gt;583,748 bytes&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;The most important cost of these exceptions is executable size. Osoasso is distributed via the web. Every extra byte matters, since it is an extra byte the user will have to download and extra time the user will wait to begin using the application.&lt;/p&gt; &lt;h2 id=&quot;what-is-the-run-time-cost-of-sjlj-exceptions&quot;&gt;What is the run-time cost of SJLJ exceptions?&lt;/h2&gt; &lt;p&gt;To measure the run-time cost of SJLJ exceptions, I wanted to execute some code that includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw&lt;/code&gt; statements but does not actually throw any exceptions. Also, the time to execute the code to perform the actual math should not be too significant, so it will not trump the exception handling code. I choose to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; command to add two 100x100 matrices. This code throws exceptions if the matrices are not of the correct size.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Matrices do not have the same number of rows&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; left: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; right: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stringstream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Matrices do not have the same number of columns&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; left: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; right: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;Without Exceptions&lt;/th&gt; &lt;th&gt;With SJLJ Exceptions&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Time to add matrices&lt;/td&gt; &lt;td&gt;0.01317 s&lt;/td&gt; &lt;td&gt;0.01551 s&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;So although there is a run-time cost for SJLJ exception handling, it not too significant. For most operations in Osoasso, exception handling is not a part of the code which performs the math, so SJLJ exception handling does not cause run-time overhead that will have a significant impact.&lt;/p&gt; &lt;h2 id=&quot;how-are-sjlj-exceptions-implemented&quot;&gt;How are SJLJ exceptions implemented?&lt;/h2&gt; &lt;p&gt;To better understand why this exception handling scheme has any run-time cost for the non-exceptional path, I decided to investigate the implementation details.&lt;/p&gt; &lt;p&gt;The normal build for PNaCL generates a LLVM bitcode file and a .pexe file. Following the instructions &lt;a href=&quot;http://www.chromium.org/nativeclient/pnacl/experimenting-with-generated-bitcode&quot;&gt;here&lt;/a&gt; I was able to generate a human-readable text file of the LLVM bitcode using this command:&lt;/p&gt; &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;%NACL_SDK_ROOT%\toolchain\win_pnacl\bin\pnacl-dis osoasso_unstripped.bc &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt; &lt;p&gt;As an example, I took a look at the generated code for the &lt;a href=&quot;https://github.com/joshpeterson/osoasso/blob/master/src/jacobi_eigen_solver.cc&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jacobi_eigen_solver&lt;/code&gt;&lt;/a&gt; command, which requires that its input matrix be symmetric. The section of the code which makes this check looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transpose_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_transpose&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transpose_command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_transpose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invalid_argument&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The input matrix is not a symmetric matrix. This command requires a symmetric matrix.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Unfortunately, the generated LLVM bitcode for even this simple example is rather large, so I’ll attempt to summarize it.&lt;/p&gt; &lt;p&gt;Without exceptions enabled, these lines represent the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; check in C++:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%22&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ult&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i64&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%sub7.i.off.i.i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!dbg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!270096&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%inc.i.i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%j.037.i.i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!dbg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!270070&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%22&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%for.cond7.i.i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%if.then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!dbg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!270068&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#icmp-instruction&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;icmp&lt;/code&gt;&lt;/a&gt; instruction is performing the comparison and the &lt;a href=&quot;http://llvm.org/docs/LangRef.html#br-instruction&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;br&lt;/code&gt;&lt;/a&gt; instruction actually branches to the exceptional path if the value in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%22&lt;/code&gt; is false. The exceptional path is in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if.then&lt;/code&gt; label, where eventually the code will call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;abort&lt;/code&gt; because exception handling is disabled. Note however that the non-exceptional path requires no additional instructions. All of the exception handling code in this case is on the exceptional path.&lt;/p&gt; &lt;p&gt;If, instead, SJLJ exceptions are enabled, then the following code is generated for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; statement in C++:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%exception&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@__cxa_allocate_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!dbg&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;!272907&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr61&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%old_eh_stack1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep10.asptr62&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep10&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%old_eh_stack1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep10.asptr62&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep.asptr63&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep.asptr63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr64&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_frame.asint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; I have shortened the method name below&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_is_exc2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@_setjmp_caller519&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_frame.asint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr65&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%old_eh_stack1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%gep13.asptr65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;align&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj_is_zero3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_is_exc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj_is_zero3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke.cont7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%lpad6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This code starts with a call to allocate the exception, then ends up calling the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setjmp_caller&lt;/code&gt; method, which actually makes the decision about whether or not the exception should be thrown. Here is the content of that method:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-llvm&quot; data-lang=&quot;llvm&quot;&gt;&lt;span class=&quot;nv&quot;&gt;%jmp_buf.asptr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inttoptr&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%jmp_buf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@llvm.nacl.setjmp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%jmp_buf.asptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj_is_zero&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;icmp&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;eq&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;br&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%invoke_sj_is_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%exception&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;normal:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; preds = %0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%expanded1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ptrtoint&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;86&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]*&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@.str414&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;vg&quot;&gt;@_ZNSt11logic_errorC2EPKc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;%expanded1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;exception:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;; preds = %0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The only conditional here is used to determine the return value of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setmp_caller&lt;/code&gt; method, so all of this code will be executed even when on the non-exceptional path. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str414&lt;/code&gt; is the actual exception string that will be the passed to the exception constructor.&lt;/p&gt; &lt;p&gt;So it is clear that SJLJ exception handling requires at least two additional function calls, plus some additional code on the non-exceptional path. Hence, it is not considered no-cost exception handling.&lt;/p&gt; &lt;h2 id=&quot;why-was-sjlj-exception-handling-chosen&quot;&gt;Why was SJLJ exception handling chosen?&lt;/h2&gt; &lt;p&gt;According to the &lt;a href=&quot;https://docs.google.com/document/d/1Bub1bV_IIDZDhdld-zTULE2Sv0KNbOXk33KOW8o0aR4/edit&quot;&gt;design document&lt;/a&gt; for this feature, SJLJ exception handling was chosen as a stop-gap solution to implement exception handling for PNaCL since it required no changes to the ABI. Zero-cost exception handling for PNaCL is coming in a future release, but it is not ready yet.&lt;/p&gt; </content> </entry> <entry> <title>Subtle Bug With 64-bit Native Client</title> <link href="http://joshpeterson.github.io/blog/2014/subtle-bug-with-64-bit-native-client/"/> <updated>2014-04-29T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/subtle-bug-with-64-bit-native-client</id> <content type="html">&lt;p&gt;I’ve recent tracked down the cause of a subtle problem with &lt;a href=&quot;https://developer.chrome.com/native-client&quot;&gt;Google Native Client&lt;/a&gt;, using the newlib tool chain to build a 64-bit .nexe file. For some time, I’ve had problems getting a 64-bit .nexe to load correctly. Unfortunately, I don’t have the Native Client tool chain installed on a 64-bit machine, so I was unable to debug the problem using my unit tests. By adding run-time logging to the code, I was able to finally isolate the cause of the problem, so I would like to share it in case others experience the same behavior.&lt;/p&gt; &lt;h2 id=&quot;a-stdinitializer_list-too-far&quot;&gt;A std::initializer_list too far&lt;/h2&gt; &lt;p&gt;The problem occurs in code that looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;object_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initializer_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This code constructs a simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_repository&lt;/code&gt; instance by adding the items from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::initializer_list&lt;/code&gt; to it. Using GCC 4.4.3 with the Native Client newlib tool chain, this works well in a 32-bit .nexe. However, I found that a 64-bit .nexe built with the same compiler and standard library implementation did not end the iteration as expected.&lt;/p&gt; &lt;p&gt;In my specific case the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::initializer_list&lt;/code&gt; had eight items, but the loop continued at least nine times, dereferencing an invalid iterator on the ninth time through the loop.&lt;/p&gt; &lt;h2 id=&quot;a-simple-work-around&quot;&gt;A simple work-around&lt;/h2&gt; &lt;p&gt;I was able to work around the problem by providing the constructor with an addition piece of information: the expected number of entries in the list.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;object_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initializer_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_entries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This code, however, is not nearly as nice. It passes (what should be) unnecessary information to the constructor. But it does solve the problem. If anyone has experienced this problem, and has a better solution, I would love to know about it.&lt;/p&gt; &lt;p&gt;You can find the full code change &lt;a href=&quot;https://github.com/joshpeterson/osoasso/commit/2a0120c1edbd890aff5a110531660d3610cdf218#diff-04db942be3fe207e6f00d8c546aea0fb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; </content> </entry> <entry> <title>Unit Testing Locking</title> <link href="http://joshpeterson.github.io/blog/2014/unit-testing-locking/"/> <updated>2014-04-21T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/unit-testing-locking</id> <content type="html">&lt;p&gt;I’ve often found it difficult to unit test code which must lock a mutex. Suppose that I need to write an internally-locked queue. How can I write a failing test for code like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// We should lock mutex_ here.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Locking in the correct place is rather important, since doing so incorrectly can lead to deadlocks on one hand or race conditions on the other. Something so important should be easy to test.&lt;/p&gt; &lt;h2 id=&quot;using-a-wrapper&quot;&gt;Using a wrapper&lt;/h2&gt; &lt;p&gt;It is possible to make this code testable by wrapping the threading API in a helper class. Then the helper class can be used in the unit tests to validate the locking behavior.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;pthread_locker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;virtual&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_mutex_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_mutex_lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_locker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locker_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_locker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locker_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_mutex_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So we can write a test that looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;mock_locker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pthread_mutex_locker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_locker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was_locked_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pthread_mutex_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was_locked_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was_locked_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;was_locked_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_locker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;was_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Although this works, I don’t think it is desirable for two reasons:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;It exposes something about the locking scheme on the API of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue&lt;/code&gt; class, which seems unrelated to the behavior of the class.&lt;/li&gt; &lt;li&gt;It adds the overhead of a virtual function call each time a mutex is locked. This overhead can be significant if the mutex is locked often.&lt;/li&gt; &lt;/ol&gt; &lt;h2 id=&quot;cleaning-up-the-api&quot;&gt;Cleaning up the API&lt;/h2&gt; &lt;p&gt;The C++11 threading library provides some useful tools to clean up this API, eliminate unnecessary overhead, and allow the code to be testable. Scope-based locking in C++11 can be implemented with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::lock_guard&amp;lt;T&amp;gt;&lt;/code&gt; class, where T is the type of the mutex to lock. In most cases, production code can use the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; for T. But if we use something like &lt;a href=&quot;http://en.wikipedia.org/wiki/Policy-based_design&quot;&gt;policy-based design&lt;/a&gt;, we can expose the mutex type as an optional template parameter.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typename&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MutexType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;queue&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_guard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MutexType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deque&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutexType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Now the API for our queue is an minimal as possible, but we can still inject a mock mutex type in order to verify that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enqeue&lt;/code&gt; method correctly takes the lock.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;mock_mutex&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_called_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;was_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_called_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock_called_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock_called_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_mutex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mutex_tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;queue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_mutex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;enqueue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutex_tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;was_locked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Once we have this unit testing scheme in place, it is possible to verify that the lock is correctly released. We can also test other methods of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;queue&lt;/code&gt; class, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;try_dequeue&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;empty&lt;/code&gt; without too much difficulty. Thanks to the template-based implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::lock_guard&lt;/code&gt; in C++11, unit testing code that requires a lock is now possible, and dare I say, surprisingly easy.&lt;/p&gt; &lt;p&gt;You can find an example of the final code the compiles with Visual Studio 2013 &lt;a href=&quot;https://gist.github.com/joshpeterson/11285436&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; </content> </entry> <entry> <title>Behavioral Interviewing and BDD</title> <link href="http://joshpeterson.github.io/blog/2014/behavioral-interviewing-and-bdd/"/> <updated>2014-03-26T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/behavioral-interviewing-and-bdd</id> <content type="html">&lt;p&gt;I recently had the opportunity to take a course offer by the ANSYS human resources department in the art of behavioral interviewing. I was struck by the similarities between behavioral interviewing techniques and &lt;a href=&quot;http://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;Behavior Driven Development&lt;/a&gt;. As I thought about the similarities a bit more though, they began to make sense.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://xkcd.com/1293/&quot;&gt;&lt;img src=&quot;/static/images/behavioral-interviewing-and-bdd/job_interview.png&quot; alt=&quot;Funny xkcd comic&quot; title=&quot;When you talk about the job experience you&amp;#39;ll give me, why do you pronounce &amp;#39;job&amp;#39; with a long &amp;#39;o&amp;#39;? (Used under the Creative Commons Attribution-NonCommercial 2.5 License)&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;h2 id=&quot;behavioral-interviewing-model&quot;&gt;Behavioral interviewing model&lt;/h2&gt; &lt;p&gt;Each question in the behavioral interviewing model follows the same three-part pattern:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Situation - What were the details of the situation?&lt;/li&gt; &lt;li&gt;Action - What did the candidate do as a result of the situation?&lt;/li&gt; &lt;li&gt;Result - What was the outcome of the situation?&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The goal of these questions is to quickly gain clarity about how a potential employee might act in the given situation.&lt;/p&gt; &lt;h2 id=&quot;behavior-driven-development&quot;&gt;Behavior Driven Development&lt;/h2&gt; &lt;p&gt;Behavior Driven Development is driven by scenarios that are usually defined by someone with a customer focus. Each scenario follows a three-part pattern:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Given some initial state&lt;/li&gt; &lt;li&gt;When an action occurs&lt;/li&gt; &lt;li&gt;Then the outcome is some known response&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;BDD is often most useful in defining requirements, since it focuses an often complex system on one clear situation with a well-understood outcome. Like the behavioral interviewing model, BDD follows a rather strict three-part pattern. But the similarities don’t end there.&lt;/p&gt; &lt;h2 id=&quot;a-hierarchy-of-complexity&quot;&gt;A hierarchy of complexity&lt;/h2&gt; &lt;p&gt;I’ve written before about the connection between the &lt;a href=&quot;/the-scientific-method-and-programming&quot;&gt;scientific method and programming&lt;/a&gt;. We can view this relationship in another way be examining the complexity of the object being studied. Consider this table, with the objects of study sorted by descending complexity.&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;Object of Study&lt;/th&gt; &lt;th&gt;Attributes of Complexity&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Humans&lt;/td&gt; &lt;td&gt;Changing rapidly, with a will&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Animals&lt;/td&gt; &lt;td&gt;Changing, with something like a will&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Plants&lt;/td&gt; &lt;td&gt;Slowly changing, without will&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Rocks&lt;/td&gt; &lt;td&gt;Very slowly changing&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Mathematics&lt;/td&gt; &lt;td&gt;Unchanging, without matter&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;To study (or to perform an experiment on) something near the bottom of the list is much easier than the same action on something near the top of the list. Since Mathematics is unchanging (2+2 will always be 4, \(\pi\) will always be irrational), I can easily study mathematics. Since it has no matter, I don’t even need to study it in the physical world, I can study it in my mind.&lt;/p&gt; &lt;p&gt;Animals and people are a bit more difficult to study, mainly because you need to convince them them to &lt;em&gt;sit still&lt;/em&gt;. The difficulty in learning something about a person, for example, is setting up the control. Since a person is so complex and rapidly changing, often factors which are not part of the experiment can become involved and muddle the clarity of the results.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Caveat: Performing an experiment on another person by putting them into a difficult situation like the TV shows &lt;a href=&quot;http://abcnews.go.com/WhatWouldYouDo/&quot;&gt;What Would You Do&lt;/a&gt; or &lt;a href=&quot;https://www.candidcamera.com/&quot;&gt;Candid Camera&lt;/a&gt; might make for good TV, but it is probably not a good way to learn about someone with whom you want a meaningful relationship. Just sayin’…&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Where does a software requirement fit in this hierarchy of complexity? I believe it is somewhere between the animal and human levels. Certainly a requirement can change rapidly, and although it does not have a will of its own, its creator does have a will. In my experience it is often rather difficult to get a software requirement to sit still.&lt;/p&gt; &lt;h2 id=&quot;getting-someone-to-sit-still&quot;&gt;Getting someone to sit still&lt;/h2&gt; &lt;p&gt;A job interview is something very much like an experiment, where the interviewer has a fixed amount of time to learn about a candidate, and make an important decision. The candidate is extremely complex and difficult to know. The behavioral interviewing model has been developed to rather strictly define the situation (the control in the experiment) so as to provide consistent, clear results across many different candidates. Asking the same questions to all candidates in the same way allows the interviewer to fairly compare the candidates’ answers, as a scientist compares the results of many experiments.&lt;/p&gt; &lt;p&gt;The situations posed in behavioral interview questions are often contrived and not indicative of cases in the real world; this is by design. The responses to these questions, not the questions themselves, are of the most use to the interviewer.&lt;/p&gt; &lt;p&gt;Behavior driven development follows the same pattern, for the same reason. In order to understand and compare requirements for software development, we need some common control (in the experimental sense of the word), the &lt;em&gt;given&lt;/em&gt; part of the statement. By carefully selecting the &lt;em&gt;when&lt;/em&gt; statement, we can be certain of the expected result in the &lt;em&gt;then&lt;/em&gt; statement. In fact, we can be so certain that we can write an executable test to verify the result.&lt;/p&gt; &lt;p&gt;BDD allows us to take a software requirement, which is notoriously difficult to wrap our minds around, and express its behavior in a repeatable experiment.&lt;/p&gt; &lt;p&gt;In hindsight, its not at all surprising that behavioral interviewing and behavior driven development are so similar. Both were developed to bring clarity and consistency to often difficult tasks.&lt;/p&gt; </content> </entry> <entry> <title>Announcing Math Facts</title> <link href="http://joshpeterson.github.io/blog/2014/announcing-math-facts/"/> <updated>2014-02-28T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/announcing-math-facts</id> <content type="html">&lt;p&gt;I’m very pleased to announce the availability of a new website I’ve created - &lt;a href=&quot;http://joshpeterson.github.io/mathfacts&quot;&gt;Math Facts&lt;/a&gt;. The Math Facts site generates math facts practice tests, which allow a child to practice basic facts. Each test consists of fifty problems.&lt;/p&gt; &lt;p&gt;&lt;img src=&quot;/static/images/announcing-math-facts/mathfacts-test.png&quot; alt=&quot;Math Facts practice test sample&quot; /&gt;&lt;/p&gt; &lt;h2 id=&quot;the-story&quot;&gt;The story&lt;/h2&gt; &lt;p&gt;My oldest son is currently in first grade. In his class, the students need to complete a test with fifty math facts in two and a half minutes. His school provided a few practice tests, but after a few practices with the same tests, he started to learn the specific problems on those tests. So I decided to make a test generator that would shuffle all of the math facts in a given range.&lt;/p&gt; &lt;p&gt;I’ve found a few other test generators available on other sites. However, I wanted to generate tests that look like the ones he takes in school, so that he can practice not only the math facts, but also the format. At this age, writing the numbers legibly and quickly is often as much of a challenge as knowing the correct answer.&lt;/p&gt; &lt;h2 id=&quot;the-technology&quot;&gt;The technology&lt;/h2&gt; &lt;p&gt;The code for this site is open source, available on &lt;a href=&quot;https://github.com/joshpeterson/mathfacts&quot;&gt;Github&lt;/a&gt;. I didn’t want to pay for any server-side hosting, so I decided to use &lt;a href=&quot;http://dartlang.org&quot;&gt;Dart&lt;/a&gt; to create most of the code for the site. I had not used Dart for any projects before, but I was pleasantly surprised by the experience. The language was easy to learn and the tools for test driven design and debugging are useful. The JavaScript output that is deployed seems to execute without problems on all modern browsers that I have tried.&lt;/p&gt; &lt;p&gt;The math facts themselves are formatted by &lt;a href=&quot;http://mathjax.org&quot;&gt;MathJax&lt;/a&gt;. I’ve used MathJax on this site and others. It is a wonderful bit of software that does one thing and does it very well.&lt;/p&gt; &lt;p&gt;Since I’m not much of an HTML designer at all, I used &lt;a href=&quot;http://getbootstrap.com&quot;&gt;Bootstrap&lt;/a&gt; for the site layout and styling. The template for the site is one of the simple Bootstrap examples with only some minor adjustments.&lt;/p&gt; &lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt; &lt;p&gt;As my son grows and moves to different math facts (differences, products, and quotients), I hope to add more practice test generators to the site. If you find the site useful, please let me know! It has already been helpful for us.&lt;/p&gt; </content> </entry> <entry> <title>More fun with coin flipping</title> <link href="http://joshpeterson.github.io/blog/2014/more-fun-with-coin-flipping/"/> <updated>2014-01-30T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2014/more-fun-with-coin-flipping</id> <content type="html">&lt;p&gt;In my &lt;a href=&quot;fun-with-coin-flipping/&quot;&gt;last post&lt;/a&gt; I attempted to solve three coin flipping &lt;a href=&quot;http://cacm.acm.org/magazines/2013/11/169037-puzzled-coin-flipping/abstract&quot;&gt;puzzles&lt;/a&gt; using Monte Carlo simulation. The &lt;a href=&quot;http://cacm.acm.org/magazines/2013/12/169936-puzzled-solutions-and-sources/abstract&quot;&gt;solutions&lt;/a&gt; to the puzzles are published, so I’ll compare my results to the correct analytic solutions.&lt;/p&gt; &lt;h2 id=&quot;problem-1&quot;&gt;Problem 1&lt;/h2&gt; &lt;p&gt;The first problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;You have just joined the Coin Flippers of America, and, naturally, the amount of your annual dues will be determined by chance. First you must select a head-tail sequence of length five. A coin is then flipped (by a certified CFA official) until that sequence is achieved with five consecutive flips. Your dues is the total number of flips, in U.S. dollars; for example, if you choose HHHHH as your sequence, and it happens to take 36 flips before you get a run of five heads, your annual CFA dues will be $36. What sequence should you pick? HHHHH? HTHTH? HHHTT? Does it even matter?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Although I expected the dues for any sequence to be about $32 dollars, I found that a few sequences (HHHHH and TTTTT) were much more expensive. Both of these choices lead to dues of around $62 dollars. Peter Winkler describes why this occurs in his answer:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;If X is the average time needed to get HHHHH starting fresh, the average of 1+X and 1 is 32. Solving for X yields a startlingly high 62 flips.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;So my Monte Carlo simulation correctly predicted this result.&lt;/p&gt; &lt;h2 id=&quot;problem-2&quot;&gt;Problem 2&lt;/h2&gt; &lt;p&gt;The second problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Now you have entered your first CFA tournament, facing your first opponent. Each of you will pick a different head-tail sequence of length five, and a coin will be flipped repeatedly. Whoever’s sequence arises first is the winner. You have the option of choosing first. What sequence should you pick?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;My simulation indicated that both HHHHH and TTTTT are poor choices winning least often because they occur least often. My simulation also indicated, rather surprisingly, that HTTTT is the best option. As it turns out, I missed a key part of the problem. Your opponent can know your chosen sequence, and choose his or her sequence accordingly. My simulation assumed your opponent had no knowledge of your choice. Winkler uses this part of the problem to propose the solution.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;In general, if you pick VWXYZ your opponent crushes you by picking UVWXY, with the right choice of U. If my calculations are correct, you can do no better than, say, HHTHT (one of the good choices in Puzzle 1). Even then, your opponent counters with HHHTH, winning two times out of three.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;I added another simulation to the utility which tests this strategy. For each possible combination you can choose, here are the results if your opponent chooses the first four flips from your sequence with a leading ‘H’ (using 10,000 iterations):&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt;&lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Percent of games you win&lt;/th&gt; &lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Percent of games you win&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHHT &lt;/td&gt;&lt;td&gt;50.53%&lt;/td&gt; &lt;td&gt;HHTHT &lt;/td&gt;&lt;td&gt;33.55%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTHT &lt;/td&gt;&lt;td&gt;49.74%&lt;/td&gt; &lt;td&gt;HHHTT &lt;/td&gt;&lt;td&gt;33.39%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTHH &lt;/td&gt;&lt;td&gt;42.56%&lt;/td&gt; &lt;td&gt;HHTTT &lt;/td&gt;&lt;td&gt;33.29%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHHT &lt;/td&gt;&lt;td&gt;41.37%&lt;/td&gt; &lt;td&gt;HHTTH &lt;/td&gt;&lt;td&gt;33.23%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHHH &lt;/td&gt;&lt;td&gt;41.36%&lt;/td&gt; &lt;td&gt;HTTTT &lt;/td&gt;&lt;td&gt;32.96%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHTH &lt;/td&gt;&lt;td&gt;40.57%&lt;/td&gt; &lt;td&gt;HHHTH &lt;/td&gt;&lt;td&gt;32.96%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTTHT &lt;/td&gt;&lt;td&gt;38.76%&lt;/td&gt; &lt;td&gt;HHTHH &lt;/td&gt;&lt;td&gt;32.8%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHTH &lt;/td&gt;&lt;td&gt;38.22%&lt;/td&gt; &lt;td&gt;HTTTH &lt;/td&gt;&lt;td&gt;32.42%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHTT &lt;/td&gt;&lt;td&gt;38.22%&lt;/td&gt; &lt;td&gt;HTTHT &lt;/td&gt;&lt;td&gt;30.99%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHHT &lt;/td&gt;&lt;td&gt;37.86%&lt;/td&gt; &lt;td&gt;THTTH &lt;/td&gt;&lt;td&gt;29.7%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHHH &lt;/td&gt;&lt;td&gt;37.48%&lt;/td&gt; &lt;td&gt;THTTT &lt;/td&gt;&lt;td&gt;29.15%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHHT &lt;/td&gt;&lt;td&gt;37.04%&lt;/td&gt; &lt;td&gt;HTHTT &lt;/td&gt;&lt;td&gt;26.37%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTTHH &lt;/td&gt;&lt;td&gt;36.98%&lt;/td&gt; &lt;td&gt;HTHTH &lt;/td&gt;&lt;td&gt;22.73%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTHH &lt;/td&gt;&lt;td&gt;36.64%&lt;/td&gt; &lt;td&gt;TTTTH &lt;/td&gt;&lt;td&gt;6.28%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHHH &lt;/td&gt;&lt;td&gt;36.38%&lt;/td&gt; &lt;td&gt;TTTTT &lt;/td&gt;&lt;td&gt;3.13%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHTT &lt;/td&gt;&lt;td&gt;34.19%&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;Here are the results if your opponent chooses the first four flips from your sequence with a leading ‘T’:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt;&lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Percent of games you win&lt;/th&gt; &lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Percent of games you win&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTTTH &lt;/td&gt;&lt;td&gt;50.18%&lt;/td&gt; &lt;td&gt;TTTHT &lt;/td&gt;&lt;td&gt;34.44%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHTH &lt;/td&gt;&lt;td&gt;49.85%&lt;/td&gt; &lt;td&gt;THHHH &lt;/td&gt;&lt;td&gt;34.08%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTTH &lt;/td&gt;&lt;td&gt;42.09%&lt;/td&gt; &lt;td&gt;TTHHH &lt;/td&gt;&lt;td&gt;33.49%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTTT &lt;/td&gt;&lt;td&gt;42.0%&lt;/td&gt; &lt;td&gt;TTHHT &lt;/td&gt;&lt;td&gt;33.3%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHTT &lt;/td&gt;&lt;td&gt;41.55%&lt;/td&gt; &lt;td&gt;TTHTH &lt;/td&gt;&lt;td&gt;32.98%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTHT &lt;/td&gt;&lt;td&gt;40.25%&lt;/td&gt; &lt;td&gt;TTHTT &lt;/td&gt;&lt;td&gt;32.88%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTTT &lt;/td&gt;&lt;td&gt;38.1%&lt;/td&gt; &lt;td&gt;TTTHH &lt;/td&gt;&lt;td&gt;32.73%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTT &lt;/td&gt;&lt;td&gt;38.04%&lt;/td&gt; &lt;td&gt;THHHT &lt;/td&gt;&lt;td&gt;32.36%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTHH &lt;/td&gt;&lt;td&gt;37.66%&lt;/td&gt; &lt;td&gt;THHTH &lt;/td&gt;&lt;td&gt;31.32%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTHT &lt;/td&gt;&lt;td&gt;37.34%&lt;/td&gt; &lt;td&gt;HTHHT &lt;/td&gt;&lt;td&gt;29.2%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTT &lt;/td&gt;&lt;td&gt;37.04%&lt;/td&gt; &lt;td&gt;HTHHH &lt;/td&gt;&lt;td&gt;28.77%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTH &lt;/td&gt;&lt;td&gt;36.79%&lt;/td&gt; &lt;td&gt;THTHH &lt;/td&gt;&lt;td&gt;26.88%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTH &lt;/td&gt;&lt;td&gt;36.73%&lt;/td&gt; &lt;td&gt;THTHT &lt;/td&gt;&lt;td&gt;22.83%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTTH &lt;/td&gt;&lt;td&gt;36.4%&lt;/td&gt; &lt;td&gt;HHHHT &lt;/td&gt;&lt;td&gt;6.05%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHTT &lt;/td&gt;&lt;td&gt;36.21%&lt;/td&gt; &lt;td&gt;HHHHH &lt;/td&gt;&lt;td&gt;2.91%&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTHH &lt;/td&gt;&lt;td&gt;35.06%&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;Clearly, if you opponent is blindly following one or the other strategy, your best option is to choose either HHHHT or TTTTH. I suspect that your opponent will be smart enough to choose the appropriate leading flip to give you almost no chance to win in these two cases. As Winkler mentions, your best option is to choose one of the sequences in the middle, which gives the best results for both cases. He suggests HHTHT, which wins about 1 of 3 times.&lt;/p&gt; &lt;h2 id=&quot;problem-3&quot;&gt;Problem 3&lt;/h2&gt; &lt;p&gt;The third problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Following the tournament (which you win), you are offered a side bet. You pay $1 and flip a coin 100 times; if you get exactly 50 heads, you win $20 (minus your dollar). If you lose, you are out only the $1. Even so, should you take the bet?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Winkler mentioned that a good estimate for flipping \(n\) heads in \(2n\) flips is&lt;/p&gt; \[\frac{1}{\sqrt{\pi n/2}}\] &lt;p&gt;With \(n=50\) this expression yields about 11%. He indicates that we instead can compute the value exactly, since the number of ways to flips exactly 50 heads in 100 flips is 100 choose 50, and the total number of outcomes for 100 flips is \(2^{100}\), then the chance to getting exactly 50 heads in 100 flips is&lt;/p&gt; \[\frac{100!/(50!)^2}{2^{100}} = 0.08\] &lt;p&gt;Since 8% is greater than 1/20 (5%), Winkler indicates that this is a good bet.&lt;/p&gt; &lt;p&gt;My results, on the other hand, found that this bet wins only 2% of the time, meaning it is not a good bet. My utility inspects only 1000 possible \(2^{100}\)combinations of flips, so I suspect that my sample size is consistently too small. Based on the time the utility takes to run with 1000 samples, I suspect that using any reasonable number of the \(2^{100}\) samples will not be feasible. Winkler’s analytic solution is clearly correct.&lt;/p&gt; </content> </entry> <entry> <title>Fun with coin flipping</title> <link href="http://joshpeterson.github.io/blog/2013/fun-with-coin-flipping/"/> <updated>2013-12-02T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/fun-with-coin-flipping</id> <content type="html">&lt;p&gt;In the November 2013 issue of Communications of the ACM Peter Winkler proposed three interesting &lt;a href=&quot;http://cacm.acm.org/magazines/2013/11/169037-puzzled-coin-flipping/abstract&quot;&gt;puzzles&lt;/a&gt; about coin flipping. The puzzles initially seem rather simple, but I suspect that my intuition about the answers is incorrect. To test my intuition, I’ve written a &lt;a href=&quot;https://github.com/joshpeterson/CoinFlipping/blob/master/cfa.py&quot;&gt;utility&lt;/a&gt; in Python to perform some Monte Carlo simulations for each problem. If I’ve written the utility correctly, these simulations should provide the correct answers. I’m looking forward to the arrival of the December issue.&lt;/p&gt; &lt;h2 id=&quot;problem-1&quot;&gt;Problem 1&lt;/h2&gt; &lt;p&gt;The first problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;You have just joined the Coin Flippers of America, and, naturally, the amount of your annual dues will be determined by chance. First you must select a head-tail sequence of length five. A coin is then flipped (by a certified CFA official) until that sequence is achieved with five consecutive flips. Your dues is the total number of flips, in U.S. dollars; for example, if you choose HHHHH as your sequence, and it happens to take 36 flips before you get a run of five heads, your annual CFA dues will be $36. What sequence should you pick? HHHHH? HTHTH? HHHTT? Does it even matter?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;My intuition for this problem is that each flip of the coin has an equal chance (one out of two) of being a head or a tail. So the probability of five flips occurring in the head-tail sequence I have chosen is&lt;/p&gt; \[1/2 * 1/2 * 1/2 * 1/2 * 1/2 = 1/2^5 = 1/32\] &lt;p&gt;This indicates that I should expect to pay about $32 for my dues, regardless of which sequence I choose. However, my utility shows that the story is a bit more complicated. I ran the Monte Carlo simulation using 100, 1,000, 10,000, and 100,000 iterations. The results are shown in this chart (the full data are available &lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdHBfblhIYmdwenBLY3JUWmdfXzNVMmc&amp;amp;single=true&amp;amp;gid=0&amp;amp;output=html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js&quot;&gt; {&quot;dataSourceUrl&quot;:&quot;//docs.google.com/spreadsheet/tq?key=0Aviq84mNTIzZdHBfblhIYmdwenBLY3JUWmdfXzNVMmc&amp;transpose=1&amp;headers=1&amp;range=A1%3AE33&amp;gid=0&amp;pub=1&quot;,&quot;options&quot;:{&quot;titleTextStyle&quot;:{&quot;bold&quot;:true,&quot;color&quot;:&quot;#000&quot;,&quot;fontSize&quot;:16},&quot;series&quot;:{&quot;0&quot;:{&quot;errorBars&quot;:{&quot;errorType&quot;:&quot;none&quot;},&quot;targetAxisIndex&quot;:0}},&quot;animation&quot;:{&quot;duration&quot;:500},&quot;width&quot;:640,&quot;hAxis&quot;:{&quot;useFormatFromData&quot;:true,&quot;title&quot;:&quot;Number of iterations&quot;,&quot;minValue&quot;:null,&quot;viewWindowMode&quot;:null,&quot;viewWindow&quot;:null,&quot;maxValue&quot;:null},&quot;vAxes&quot;:[{&quot;useFormatFromData&quot;:true,&quot;title&quot;:&quot;Dues (dollars)&quot;,&quot;minValue&quot;:null,&quot;logScale&quot;:false,&quot;viewWindow&quot;:{&quot;max&quot;:null,&quot;min&quot;:null},&quot;maxValue&quot;:null},{&quot;useFormatFromData&quot;:true,&quot;minValue&quot;:null,&quot;logScale&quot;:false,&quot;viewWindow&quot;:{&quot;max&quot;:null,&quot;min&quot;:null},&quot;maxValue&quot;:null}],&quot;booleanRole&quot;:&quot;certainty&quot;,&quot;title&quot;:&quot;Average dues for each head-tail sequence&quot;,&quot;height&quot;:250,&quot;domainAxis&quot;:{&quot;direction&quot;:1},&quot;legend&quot;:&quot;right&quot;,&quot;focusTarget&quot;:&quot;series&quot;,&quot;useFirstColumnAsDomain&quot;:true,&quot;isStacked&quot;:false,&quot;tooltip&quot;:{}},&quot;state&quot;:{},&quot;view&quot;:{&quot;columns&quot;:[{&quot;calc&quot;:&quot;stringify&quot;,&quot;sourceColumn&quot;:0,&quot;type&quot;:&quot;string&quot;},1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},&quot;isDefaultVisualization&quot;:false,&quot;chartType&quot;:&quot;ColumnChart&quot;,&quot;chartName&quot;:&quot;Chart 1&quot;} &lt;/script&gt; &lt;p&gt;The head-tail sequences are sorted alphabetically, so the spikes on either end (around $60) are HHHHH and TTTTT. I also find it useful to view the data sorted according to the least cost of dues, as in this table from the Monte Carlo simulation with 100,000 iterations:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt;&lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Dues ($)&lt;/th&gt; &lt;th&gt; &lt;/th&gt; &lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Dues ($)&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHHT&lt;/td&gt; &lt;td&gt; 31.89441&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHTTH&lt;/td&gt; &lt;td&gt; 33.95109&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTTHH&lt;/td&gt; &lt;td&gt; 31.92716&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THHHT&lt;/td&gt; &lt;td&gt; 33.96559&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTT&lt;/td&gt; &lt;td&gt; 31.93697&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTHT&lt;/td&gt; &lt;td&gt; 33.97174&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTT&lt;/td&gt; &lt;td&gt; 31.9726&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THTTT&lt;/td&gt; &lt;td&gt; 34.00494&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHTT&lt;/td&gt; &lt;td&gt; 31.97717&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTHHH&lt;/td&gt; &lt;td&gt; 34.0429&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTHT&lt;/td&gt; &lt;td&gt; 31.98652&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THHTT&lt;/td&gt; &lt;td&gt; 34.11864&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTTTH&lt;/td&gt; &lt;td&gt; 32.00329&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTTHT&lt;/td&gt; &lt;td&gt; 35.93113&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHHH&lt;/td&gt; &lt;td&gt; 32.02012&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THTTH&lt;/td&gt; &lt;td&gt; 36.01681&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHTH&lt;/td&gt; &lt;td&gt; 32.02634&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTHHT&lt;/td&gt; &lt;td&gt; 36.07967&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHHH&lt;/td&gt; &lt;td&gt; 32.02798&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THHTH&lt;/td&gt; &lt;td&gt; 36.16804&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTTT&lt;/td&gt; &lt;td&gt; 32.04128&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTHTT&lt;/td&gt; &lt;td&gt; 37.68822&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTHH&lt;/td&gt; &lt;td&gt; 32.07216&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHTHH&lt;/td&gt; &lt;td&gt; 38.20029&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTH&lt;/td&gt; &lt;td&gt; 33.83344&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THTHT&lt;/td&gt; &lt;td&gt; 42.09793&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;TTHHT&lt;/td&gt; &lt;td&gt; 33.86829&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTHTH&lt;/td&gt; &lt;td&gt; 42.23329&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTH&lt;/td&gt; &lt;td&gt; 33.87797&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTTT&lt;/td&gt; &lt;td&gt; 61.72025&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTHH&lt;/td&gt; &lt;td&gt; 33.9436&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHHHH&lt;/td&gt; &lt;td&gt; 61.97057&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;So for many head-tail combinations, the yearly dues are about $32. However, it seems that getting five heads in a row or five tails in a row is significantly more difficult than other combinations. So it does, in fact, matter which sequence I select. I want to avoid HHHHH and TTTTT.&lt;/p&gt; &lt;h2 id=&quot;problem-2&quot;&gt;Problem 2&lt;/h2&gt; &lt;p&gt;The second problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Now you have entered your first CFA tournament, facing your first opponent. Each of you will pick a different head-tail sequence of length five, and a coin will be flipped repeatedly. Whoever’s sequence arises first is the winner. You have the option of choosing first. What sequence should you pick?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Again, my intuition for this problem indicates that my choice should not matter. However, the results of the Monte Carlo simulation for problem suggest that both HHHHH and TTTTT are poor choices. Since they require more flips to occur, they are probably less likely to occur in a sequence of flips first.&lt;/p&gt; &lt;p&gt;For this simulation, I compared each of the 32 possible head-tail sequences against all of the other head-tail sequences in a simulated tournament for each iteration. I ran the simulation using 10, 100, 1,000, and 10,000 iterations, and determine how often each sequence won the tournament. The results are shown in this chart (the full data are available &lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdHBfblhIYmdwenBLY3JUWmdfXzNVMmc&amp;amp;single=true&amp;amp;gid=2&amp;amp;output=html&quot;&gt;here&lt;/a&gt;):&lt;/p&gt; &lt;script type=&quot;text/javascript&quot; src=&quot;//ajax.googleapis.com/ajax/static/modules/gviz/1.0/chart.js&quot;&gt; {&quot;dataSourceUrl&quot;:&quot;//docs.google.com/spreadsheet/tq?key=0Aviq84mNTIzZdHBfblhIYmdwenBLY3JUWmdfXzNVMmc&amp;transpose=1&amp;headers=1&amp;range=A1%3AE33&amp;gid=2&amp;pub=1&quot;,&quot;options&quot;:{&quot;vAxes&quot;:[{&quot;useFormatFromData&quot;:true,&quot;title&quot;:&quot;Percent of games won&quot;,&quot;minValue&quot;:null,&quot;viewWindow&quot;:{&quot;max&quot;:null,&quot;min&quot;:null},&quot;maxValue&quot;:null},{&quot;useFormatFromData&quot;:true,&quot;minValue&quot;:null,&quot;viewWindow&quot;:{&quot;max&quot;:null,&quot;min&quot;:null},&quot;maxValue&quot;:null}],&quot;titleTextStyle&quot;:{&quot;bold&quot;:true,&quot;color&quot;:&quot;#000&quot;,&quot;fontSize&quot;:16},&quot;booleanRole&quot;:&quot;certainty&quot;,&quot;title&quot;:&quot;Best head-tail sequence for a coin flipping tournament&quot;,&quot;height&quot;:250,&quot;animation&quot;:{&quot;duration&quot;:0},&quot;legend&quot;:&quot;right&quot;,&quot;width&quot;:640,&quot;useFirstColumnAsDomain&quot;:true,&quot;hAxis&quot;:{&quot;useFormatFromData&quot;:true,&quot;title&quot;:&quot;Number of iterations&quot;,&quot;minValue&quot;:null,&quot;viewWindowMode&quot;:null,&quot;viewWindow&quot;:null,&quot;maxValue&quot;:null},&quot;isStacked&quot;:false,&quot;tooltip&quot;:{&quot;trigger&quot;:&quot;none&quot;},&quot;focusTarget&quot;:&quot;series&quot;},&quot;state&quot;:{},&quot;view&quot;:{&quot;columns&quot;:[{&quot;calc&quot;:&quot;stringify&quot;,&quot;type&quot;:&quot;string&quot;,&quot;sourceColumn&quot;:0},1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]},&quot;isDefaultVisualization&quot;:false,&quot;chartType&quot;:&quot;ColumnChart&quot;,&quot;chartName&quot;:&quot;Chart 2&quot;} &lt;/script&gt; &lt;p&gt;As expected, both HHHHH and TTTTT are poor choices, winning least often. Again, sorting the data (for 10,000 iterations) according to which sequence wins most often is interesting:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt;&lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Chance of winning&lt;/th&gt; &lt;th&gt; &lt;/th&gt; &lt;th&gt;Sequence&lt;/th&gt; &lt;th&gt;Chance of winning&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTT&lt;/td&gt; &lt;td&gt;0.9699&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTTHH&lt;/td&gt; &lt;td&gt;0.6451&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTTT&lt;/td&gt; &lt;td&gt;0.774&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHTTH&lt;/td&gt; &lt;td&gt;0.6448&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTTT&lt;/td&gt; &lt;td&gt;0.7429&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTHTH&lt;/td&gt; &lt;td&gt;0.6444&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHTT&lt;/td&gt; &lt;td&gt;0.7068&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTHTT&lt;/td&gt; &lt;td&gt;0.6443&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTT&lt;/td&gt; &lt;td&gt;0.6997&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTHHH&lt;/td&gt; &lt;td&gt;0.6292&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHTHT&lt;/td&gt; &lt;td&gt;0.6791&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTHHT&lt;/td&gt; &lt;td&gt;0.6291&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHHT&lt;/td&gt; &lt;td&gt;0.6676&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THHTH&lt;/td&gt; &lt;td&gt;0.621&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHTT&lt;/td&gt; &lt;td&gt;0.6675&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THTTH&lt;/td&gt; &lt;td&gt;0.6203&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHHH&lt;/td&gt; &lt;td&gt;0.6525&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHTHH&lt;/td&gt; &lt;td&gt;0.6112&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THHHT&lt;/td&gt; &lt;td&gt;0.6488&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTHH&lt;/td&gt; &lt;td&gt;0.6014&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHHT&lt;/td&gt; &lt;td&gt;0.6488&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HTHTH&lt;/td&gt; &lt;td&gt;0.6014&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTHT&lt;/td&gt; &lt;td&gt;0.6487&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTHT&lt;/td&gt; &lt;td&gt;0.5957&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;THTHH&lt;/td&gt; &lt;td&gt;0.6487&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;THTHT&lt;/td&gt; &lt;td&gt;0.5934&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTHHH&lt;/td&gt; &lt;td&gt;0.6475&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTTH&lt;/td&gt; &lt;td&gt;0.4971&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HHHTH&lt;/td&gt; &lt;td&gt;0.6472&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;HHHHH&lt;/td&gt; &lt;td&gt;0.4944&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;HTTTH&lt;/td&gt; &lt;td&gt;0.6467&lt;/td&gt; &lt;td&gt; &lt;/td&gt; &lt;td&gt;TTTTT&lt;/td&gt; &lt;td&gt;0.4941&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;I’m surprised to see that the HTTTT sequence wins so often, almost 97% of the time! Without a clear analytic proof of this result, I have to suspect that my utility is flawed somehow so that this sequence seems to win more often. However, I cannot detect the problem with the utility.&lt;/p&gt; &lt;h2 id=&quot;problem-3&quot;&gt;Problem 3&lt;/h2&gt; &lt;p&gt;The third problem is:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Following the tournament (which you win), you are offered a side bet. You pay $1 and flip a coin 100 times; if you get exactly 50 heads, you win $20 (minus your dollar). If you lose, you are out only the $1. Even so, should you take the bet?&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;My intuition is that although each sequence of 100 flips should contain 50 heads (since each flip has a one out of two chance of being a head), I doubt we can really count on that holding true. The problem indicates this as well, providing me with twenty-to-one odds. So if just one of out twenty sequences of 100 flips contains exactly 50 heads, I still break even. This seems like a good bet, but I decided to test it.&lt;/p&gt; &lt;p&gt;For each iteration of the Monte Carlo simulation for this problem, my utility will perform 100 flips and count the number of heads 1000 times. After each sequence of 100 flips, the total amount of money both paid into and out of the bet is accumulated. So if the total winnings for any iteration are more than $1000 dollars, then that iteration is considered a good bet. I ran the simulation using 1, 10, and 100 iterations. Here are the results:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt;&lt;th&gt;Iterations&lt;/th&gt; &lt;th&gt;Good Bets&lt;/th&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;1&lt;/td&gt; &lt;td&gt;0&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;10&lt;/td&gt; &lt;td&gt;0&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;100&lt;/td&gt; &lt;td&gt;2&lt;/td&gt;&lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;After winning only 2% of the time in the best case, I can be sure that I won’t take this bet.&lt;/p&gt; &lt;h2 id=&quot;are-these-results-correct&quot;&gt;Are these results correct?&lt;/h2&gt; &lt;p&gt;These results are certainly surprising, and they don’t line up with my intuition in most cases. My inability to solve these problems analytically lead me to perform Monte Carlo simulations of them. I’m interested to see the correct analytic solutions in the December 2013 CACM issue, so that I can determine if these simulations are accurate.&lt;/p&gt; </content> </entry> <entry> <title>Use move semantics to avoid naming</title> <link href="http://joshpeterson.github.io/blog/2013/use-move-semantics-to-avoid-naming/"/> <updated>2013-11-22T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/use-move-semantics-to-avoid-naming</id> <content type="html">&lt;p&gt;I’ll bet that most developers have experienced the application of &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;this&lt;/a&gt; bit of wisdom at one time or another:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things.&lt;/p&gt; &lt;p&gt;– Phil Karlton&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Indeed Michael Feathers &lt;a href=&quot;https://michaelfeathers.silvrback.com/when-it-s-okay-for-a-method-to-do-nothing&quot;&gt;blogged&lt;/a&gt; recently about the difficulty of naming a method that might do nothing. Since most code is read much more often than it is written, choosing the correct name for a method or a variable is extremely important. Good names can make complex code understandable, while bad names can leave even the simplest code nearly impenetrable.&lt;/p&gt; &lt;h2 id=&quot;dont-even-name-it&quot;&gt;Don’t even name it&lt;/h2&gt; &lt;p&gt;If a good name is valuable, then no name is priceless. Often I find myself writing code which uses object temporarily, but gives it a name that out lives its usefulness. Not only does this make code less readable, but it is down right dangerous.&lt;/p&gt; &lt;p&gt;Consider the following example, taken from Anthony Williams excellent book &lt;a href=&quot;http://www.cplusplusconcurrencyinaction.com/&quot;&gt;&lt;em&gt;Concurrency in Action&lt;/em&gt;&lt;/a&gt;:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// What if this throws?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something_that_might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The C++11 threading library requires that either &lt;code&gt;join()&lt;/code&gt; or &lt;code&gt;detach()&lt;/code&gt; is called on a &lt;code&gt;std::thread&lt;/code&gt; object. This code will not call either though, if &lt;code&gt;do_something_that_might_throw()&lt;/code&gt; indeed does throw an exception. Williams comes to the rescue with an RAII class to save the day.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So the code in &lt;code&gt;might_throw()&lt;/code&gt; above can now be written like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No problems if this throws.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something_that_might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// t.join(); - no longer necessary&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;In this trivial example, it is easy to see that &lt;code&gt;t.join()&lt;/code&gt; should not be called now. But in a more complex method that you might find in real code, it may not be clear to someone later that the call to join the thread is not necessary (and, in fact, dangerous).&lt;/p&gt; &lt;h2 id=&quot;find-the-temporary&quot;&gt;Find the temporary&lt;/h2&gt; &lt;p&gt;The fundamental problem here is that we have given a name (&lt;code&gt;t&lt;/code&gt;) to an object that is really a temporary. By using the &lt;code&gt;guard&lt;/code&gt; class to handle the lifetime of the thread, we have eliminated the need for the method which creates the &lt;code&gt;std::thread&lt;/code&gt; to ever use it. So rather then refactoring the code to change the name of &lt;code&gt;t&lt;/code&gt; to something like &lt;code&gt;t_do_not_use&lt;/code&gt;, we can avoid giving the thread a name altogether. I would really like to do something like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Reference to a temporary!&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No problems if this throws.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something_that_might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;In C++98, this won’t work, because the &lt;code&gt;guard&lt;/code&gt; constructor is passed a reference to a temporary object. The C++11 standard introduced &lt;em&gt;move semantics&lt;/em&gt;, which allow a temporary object to be moved instead of copied, so I can write the code I want to write (with a few changes to the &lt;code&gt;guard&lt;/code&gt; class). After Williams mentions that a &lt;code&gt;std::thread&lt;/code&gt; can be moved, he updates the RAII code like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;explicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;joinable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logic_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;No thread&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So now the calling code is safer. There is no name for the &lt;code&gt;std::thread&lt;/code&gt; object, so it cannot be used incorrectly later in the method.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Move the std::thread&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No problems if this throws.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_something_that_might_throw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;So as a developer, I need to consider not only &lt;em&gt;what&lt;/em&gt; I should name a variable, but even &lt;em&gt;if&lt;/em&gt; I should name the variable. With move semantics in C++, it is now easier to be explicit about the context in which a given variable is used, and possible to avoid naming it unnecessarily.&lt;/p&gt; </content> </entry> <entry> <title>Constraints and greenfield projects</title> <link href="http://joshpeterson.github.io/blog/2013/constraints-and-greenfield-projects/"/> <updated>2013-11-09T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/constraints-and-greenfield-projects</id> <content type="html">&lt;p&gt;I was wondering recently why some greenfield development projects succeed, while other seem to languish. I think that, at least in part, it may have to do with the constraints on the project.&lt;/p&gt; &lt;p&gt;Most of the projects I work on as a professional developer involve a significant number of constraints. I suspect that other developers have a similar experience. Seldom are we asked to change a project or component which does X so that it does Y, but not X. More often, the change requires it to do both X and Y. Once in a while, I have the opportunity to work on greenfield project, where the product or component either doesn’t do X, or, in fact, does nothing at all (because it does not exist). Greenfield projects are exciting, due to the lack of constraints.&lt;/p&gt; &lt;p&gt;At the same time, some in the software development community argue rather strongly that &lt;a href=&quot;http://gettingreal.37signals.com/ch03_Embrace_Constraints.php&quot;&gt;constraints are liberating&lt;/a&gt;. So which is it? Are constraints useful or not?&lt;/p&gt; &lt;p&gt;##More than one type of constraints I think we need to distinguish between two different types of constraints, constraints on what to do, and constraints on how to do it.&lt;/p&gt; &lt;p&gt;&lt;em&gt;What-constraints&lt;/em&gt; are constraints on the requirements of a project, in the agile development process, they are constraints provided by the customer or stakeholder. These are constraints like “this application must be delivered via the web” or “the component must persist data in a human-readable format”.&lt;/p&gt; &lt;p&gt;&lt;em&gt;How-constraints&lt;/em&gt; are constraints on the implementation of project. They are often imposed by existing products or components. These are constraints like “the product must use threading library X” or “the project should be written in language Y”.&lt;/p&gt; &lt;p&gt;Any project has some balance of constraints of these two types.&lt;/p&gt; &lt;p&gt;##A good balance of constraints On a greenfield project (or maybe any software development project), it is best to have more what-constraints and fewer how-constraints. In fact, the developers on the project should attempt to maximize the what-constraints and minimize the how-constraints. This balance provides developers with the ability to deliver features quickly and incrementally. The high number of what-constraints allow developers to say no to the development of unnecessary features, while the low number of how-constraints allow developers flexibility to choose the best tools for implementation.&lt;/p&gt; &lt;p&gt;##A poor balance of constraints If the balance of constraints is reversed, such that a project has very few what-constraints but many how-constraints, the project will probably be difficult to complete. The lack of what-constraints make it difficult for anyone involved to argue that the project is complete. It will likely be subject to continual scope creep. As the scope of the project increases (or changes entirely), the restrictive how-constraints tend to make it more and more difficult to meet the new requirements.&lt;/p&gt; &lt;p&gt;##Why do I like greenfield projects? Most greenfield projects can be defined with a good balance of constraints. Software developers are usually problem-solvers, so if a project can strictly define the problem (the what-constraints), but not restrict the implementation (the how-constraints), the problem-solvers will enjoy working on it. Changes to existing software, on the other hand, usually have significant how-constraints, so as a problem-solver, I am more restricted. I prefer a greenfield project with a well-designed balance of constraints.&lt;/p&gt; &lt;p&gt;I believe that the agile development process, where customers are required to define the acceptance criteria for user stories, is an attempt to control this balance of constraints. Experience tells us that a poor balance of constraints may doom a new software development project from the start, while a good balance can free the project to succeed.&lt;/p&gt; </content> </entry> <entry> <title>When should we not use Test Driven Design?</title> <link href="http://joshpeterson.github.io/blog/2013/when-should-we-not-use-tdd/"/> <updated>2013-10-07T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/when-should-we-not-use-tdd</id> <content type="html">&lt;p&gt;In a &lt;a href=&quot;/the-best-way-develop-software/&quot;&gt;previous post&lt;/a&gt; I listed three arguments in favor of this rather bold statement:&lt;/p&gt; &lt;p&gt;Test Driven Design is always the best technique for software development.&lt;/p&gt; &lt;p&gt;I have explored all three arguments by expressing each as a syllogism, and then analyzing the syllogism. The intent of these posts was to determine when Test Driven Design is not an appropriate method of software development. Since Test Driven Design is initially more costly than simply writing production software directly, that cost most be weighed against its benefits.&lt;/p&gt; &lt;h2 id=&quot;when-does-test-driven-design-not-apply&quot;&gt;When does Test Driven Design not apply?&lt;/h2&gt; &lt;p&gt;Based on the analysis of the three syllogisms used to support the statement above, we determined that Test Driven Design should not be used in the following situations:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When the expected behavior of the software is not known.&lt;/li&gt; &lt;li&gt;When the software is not to be used by clients or read by other developers.&lt;/li&gt; &lt;li&gt;When the software is well known and understood, and will not change (across a known API boundary).&lt;/li&gt; &lt;li&gt;When the software is prohibitively expensive to reliably test (e.g., GUI, multiple processes, multiple threads, non deterministic code, legacy code).&lt;/li&gt; &lt;li&gt;When the software does not have a public API exposed.&lt;/li&gt; &lt;li&gt;We do not want to capture the effort used to verify our changes. &lt;ul&gt; &lt;li&gt;The code will not change in the future.&lt;/li&gt; &lt;li&gt;We are attempting to verify unchanging, working legacy code.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;We do not need to verify the contract for a public API.&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;when-does-test-driven-design-apply&quot;&gt;When does Test Driven Design apply?&lt;/h2&gt; &lt;p&gt;If this list encompasses all of the cases where Test Driven Design should not apply, then we should in Test Driven Design in all other cases. The vast majority if the code I have written, both professionally and personally, does not meet and of these criteria. This indicates to me that I should be using Test Driven Design consistently as tool to develop software more effectively.&lt;/p&gt; </content> </entry> <entry> <title>You are (probably) already doing TDD</title> <link href="http://joshpeterson.github.io/blog/2013/you-are-probably-already-doing-tdd/"/> <updated>2013-10-04T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/you-are-probably-already-doing-tdd</id> <content type="html">&lt;p&gt;In a &lt;a href=&quot;/the-best-way-develop-software/&quot;&gt;previous post&lt;/a&gt; I listed three arguments in favor of this rather bold statement:&lt;/p&gt; &lt;p&gt;Test Driven Design is always the best technique for software development.&lt;/p&gt; &lt;p&gt;I plan to explore all three arguments by expressing each as a syllogism, and then analyzing the syllogism. This post will explore the third argument:&lt;/p&gt; &lt;p&gt;We are already practicing Test Driven Design, so why not replace ourselves with a small shell script?&lt;/p&gt; &lt;h2 id=&quot;defining-the-syllogism&quot;&gt;Defining the syllogism&lt;/h2&gt; &lt;p&gt;As I explored in an &lt;a href=&quot;/a-brief-introduction-to-syllogisms/&quot;&gt;earlier post&lt;/a&gt;, syllogisms are often a useful tool to analyze a statement or to guide an argument in a productive direction. For this argument, I have written the following syllogism:&lt;/p&gt; &lt;pre&gt; We verify changes to the code via ad-hoc tests, Test Driven Design is more productive than ad-hoc testing, therefore, Test Driven Design is a more productive way to verify changes to the code. &lt;/pre&gt; &lt;h2 id=&quot;terms&quot;&gt;Terms&lt;/h2&gt; &lt;p&gt;To analyze a syllogism, we first need to agree on the definition of the terms used in the syllogism. Here are my definitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Verify changes to the code:&lt;/strong&gt; The action of proving to a developer that a given change to the code has the desired impact on the run-time behavior.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Ad-hoc tests:&lt;/strong&gt; Non-automated verification of some run-time state, via visual inspection in the UI or the debugger&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Test Driven Design:&lt;/strong&gt; The process of &lt;ul&gt; &lt;li&gt;Accessing publicly exposed APIs, to write the minimum unit test code to cause a unit test to fail&lt;/li&gt; &lt;li&gt;Writing the minimum production code to cause the unit test to pass&lt;/li&gt; &lt;li&gt;Iteratively repeating the first two steps to generalize the code&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;premises&quot;&gt;Premises&lt;/h2&gt; &lt;p&gt;In order for a syllogism to be valid, we must agree that the premises are true. I’ll list the two premises separately, and state my justification with each of them.&lt;/p&gt; &lt;h3 id=&quot;major-premise&quot;&gt;Major premise#&lt;/h3&gt; &lt;p&gt;We verify changes to the code via ad-hoc tests.&lt;/p&gt; &lt;p&gt;Here the major term is “verify changes to the code” and the middle term is “ad-hoc tests”. The vast majority of developers I have met never commit changes to production code when they are unsure of the run-time behavior caused by those changes. Prior to exposing changes to our client, we &lt;em&gt;always&lt;/em&gt; do some verification.&lt;/p&gt; &lt;h3 id=&quot;minor-premise&quot;&gt;Minor premise#&lt;/h3&gt; &lt;p&gt;Test Driven Design is more productive than ad-hoc testing.&lt;/p&gt; &lt;p&gt;Here the minor term is “Test Driven Design” and the middle term is “ad-hoc testing”. The increased productivity of Test Driven Design comes for a few reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Test Driven Design captures the effort applied to testing and allows it to be used over and over. &lt;ul&gt; &lt;li&gt;One way to measure the cost of writing a test is to divide the time to write the test by the number of times it is executed.&lt;/li&gt; &lt;li&gt;Each time a test is executed, the cost of writing the test decreases.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Test Driven Design works at the public API level, so it is more specific than ad-hoc testing. &lt;ul&gt; &lt;li&gt;All of the test cases can be more clearly determined.&lt;/li&gt; &lt;li&gt;The contract with the component (including semantics) can be verified.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Test Driven Design externalizes the effort applied to testing and allows others to use it. &lt;ul&gt; &lt;li&gt;It allows others to change code with confidence.&lt;/li&gt; &lt;li&gt;It exposes details about contract for a component to the clients of the component.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;logic&quot;&gt;Logic&lt;/h2&gt; &lt;p&gt;The conclusion of the syllogism is this statement: “Test Driven Design is a more productive way to verify changes to the code.” In this simple syllogism, the minor term becomes the subject of the conclusion and the major term becomes the predicate.&lt;/p&gt; &lt;h2 id=&quot;how-to-disagree&quot;&gt;How to disagree&lt;/h2&gt; &lt;p&gt;As with any syllogism, an argument against this conclusion has three grounds for disagreement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The terms are not defined correctly&lt;/li&gt; &lt;li&gt;The premises are not true&lt;/li&gt; &lt;li&gt;The logic is not valid&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, I may have defined the terms too narrowly. Maybe a broader definition of some term will render the conclusion less useful, or you may not believe the truth of the major or the minor premise.&lt;/p&gt; &lt;h2 id=&quot;when-should-we-avoid-using-test-driven-design&quot;&gt;When should we avoid using Test Driven Design?&lt;/h2&gt; &lt;p&gt;Since Test Driven Design often has a higher initial cost than other software development techniques, I believe that we need to determine when this analysis indicates that it should not be used. Based on this analysis, we should not use Test Driven Design when:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We do not want to capture the effort used to verify our changes. &lt;ul&gt; &lt;li&gt;The code will not change in the future.&lt;/li&gt; &lt;li&gt;We are attempting to verify unchanging, working legacy code.&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;We do not need to verify the contract for a public API.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Thanks to a number of my colleagues at ANSYS for their input on this topic.&lt;/em&gt;&lt;/p&gt; </content> </entry> <entry> <title>The importance of being your first client</title> <link href="http://joshpeterson.github.io/blog/2013/the-importance-of-being-your-first-client/"/> <updated>2013-10-01T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/the-importance-of-being-your-first-client</id> <content type="html">&lt;p&gt;In a &lt;a href=&quot;/the-best-way-develop-software/&quot;&gt;previous post&lt;/a&gt; I listed three arguments in favor of this rather bold statement:&lt;/p&gt; &lt;p&gt;Test Driven Design is always the best technique for software development.&lt;/p&gt; &lt;p&gt;I plan to explore all three arguments by expressing each as a syllogism, and then analyzing the syllogism. This post will explore the second argument:&lt;/p&gt; &lt;p&gt;Test Driven Design requires us to dogfood, making the use of our software easier for our clients.&lt;/p&gt; &lt;p&gt;Here I’m referring to the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Eating_your_own_dog_food&quot;&gt;eating your own dogfood&lt;/a&gt;, not to dog food itself.&lt;/p&gt; &lt;h2 id=&quot;defining-the-syllogism&quot;&gt;Defining the syllogism&lt;/h2&gt; &lt;p&gt;As I explored in an &lt;a href=&quot;/a-brief-introduction-to-syllogisms/&quot;&gt;earlier post&lt;/a&gt;, syllogisms are often a useful tool to analyze a statement or to guide an argument in a productive direction. For this argument, I have written the following syllogism:&lt;/p&gt; &lt;pre&gt; When we dogfood our code it is easier for our clients to use, Test Driven Design allows us to dogfood our code, therefore Test Driven Design allows us to write code which is easier to use for our clients to use. &lt;/pre&gt; &lt;h2 id=&quot;terms&quot;&gt;Terms&lt;/h2&gt; &lt;p&gt;To analyze a syllogism, we first need to agree on the definition of the terms used in the syllogism. Here are my definitions.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Dogfood our code:&lt;/strong&gt; The action of using our code as our customers would.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Code is easier for our clients to use:&lt;/strong&gt; The code has clear intent, minimal dependencies, and explicitly states its requirements.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Test Driven Design:&lt;/strong&gt; The process of &lt;ul&gt; &lt;li&gt;Accessing publicly exposed APIs, to write the minimum unit test code to cause a unit test to fail&lt;/li&gt; &lt;li&gt;Writing the minimum production code to cause the unit test to pass&lt;/li&gt; &lt;li&gt;Iteratively repeating the first two steps to generalize the code&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;premises&quot;&gt;Premises&lt;/h2&gt; &lt;p&gt;In order for a syllogism to be valid, we must agree that the premises are true. I’ll list the two premises separately, and state my justification with each of them.&lt;/p&gt; &lt;h3 id=&quot;major-premise&quot;&gt;Major premise#&lt;/h3&gt; &lt;p&gt;When we dogfood our code it is easier for our clients to use.&lt;/p&gt; &lt;p&gt;Here the major term is “code is easier for our clients to use” and the middle term is “dogfood our code”. From experience, usage of my code as my clients would nearly always improves any non-trivial code.&lt;/p&gt; &lt;h3 id=&quot;minor-premise&quot;&gt;Minor premise#&lt;/h3&gt; &lt;p&gt;Test Driven Design allows us to dogfood our code.&lt;/p&gt; &lt;p&gt;Here the minor term is “Test Driven Design” and the middle term is “dogfood our code”. By definition, Test Driven Design is a method of using our code via its API exposed to our customers.&lt;/p&gt; &lt;h2 id=&quot;logic&quot;&gt;Logic&lt;/h2&gt; &lt;p&gt;The conclusion of the syllogism is this statement: “Test Driven Design allows us to write code which is easier for our clients to use.” In this simple syllogism, the minor term becomes the subject of the conclusion and the major term becomes the predicate.&lt;/p&gt; &lt;h2 id=&quot;how-to-disagree&quot;&gt;How to disagree&lt;/h2&gt; &lt;p&gt;As with any syllogism, an argument against this conclusion has three grounds for disagreement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The terms are not defined correctly&lt;/li&gt; &lt;li&gt;The premises are not true&lt;/li&gt; &lt;li&gt;The logic is not valid&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, I may have defined the terms too narrowly. Maybe a broader definition of some term will render the conclusion less useful, or you may not believe the truth of the major or the minor premise.&lt;/p&gt; &lt;h2 id=&quot;when-should-we-avoid-using-test-driven-design&quot;&gt;When should we avoid using Test Driven Design?&lt;/h2&gt; &lt;p&gt;Since Test Driven Design often has a higher initial cost than other software development techniques, I believe that we need to determine when this analysis indicates that it should not be used.&lt;/p&gt; &lt;p&gt;Since this syllogism describes why Test Driven Design is beneficial to clients of our public API, then clearly it does not apply when we do not have a public API exposed. How often do we not have a public API? I suspect that we nearly always do. If our code is not consumed by some other developer now, and it is useful, than it likely will be used at some point. Maybe Jeff Bezos was right with his API &lt;a href=&quot;https://plus.google.com/112678702228711889851/posts/eVeouesvaVX&quot;&gt;mandate&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Maybe if I walk a mile in my clients’ shoes, and use my own code, even before they do, then that walk will be a bit easier for them.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thanks to a number of my colleagues at ANSYS for their input on this topic.&lt;/em&gt;&lt;/p&gt; </content> </entry> <entry> <title>The scientific method and programming</title> <link href="http://joshpeterson.github.io/blog/2013/the-scientific-method-and-programming/"/> <updated>2013-08-22T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/the-scientific-method-and-programming</id> <content type="html">&lt;p&gt;In my &lt;a href=&quot;/the-best-way-develop-software/&quot;&gt;previous post&lt;/a&gt; I listed three arguments in favor of this rather bold statement:&lt;/p&gt; &lt;p&gt;Test Driven Design is always the best technique for software development.&lt;/p&gt; &lt;p&gt;I plan to explore all three arguments by expressing each as a syllogism, and then analyzing the syllogism. This post will explore the first argument:&lt;/p&gt; &lt;p&gt;Test Driven Design is the application of the scientific method to software development.&lt;/p&gt; &lt;h2 id=&quot;defining-the-syllogism&quot;&gt;Defining the syllogism&lt;/h2&gt; &lt;p&gt;As I explored in an &lt;a href=&quot;/a-brief-introduction-to-syllogisms/&quot;&gt;earlier post&lt;/a&gt;, syllogisms are often a useful tool to analyze a statement or to guide an argument in a productive direction. For this argument, I have written the following syllogism:&lt;/p&gt; &lt;pre&gt; The scientific method is the best way to advance technology, TDD is the application of the scientific method to software development, therefore TDD is the best way to develop software. &lt;/pre&gt; &lt;h2 id=&quot;terms&quot;&gt;Terms&lt;/h2&gt; &lt;p&gt;To analyze a syllogism, we first need to agree on the definition of the terms used in the syllogism. Here are my definitions of the four terms present here.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;To advance technology:&lt;/strong&gt; The action of harnessing the natural world to perform tasks&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Scientific method:&lt;/strong&gt; The iterative process of carrying out experiments &lt;ul&gt; &lt;li&gt;Making a hypothesis&lt;/li&gt; &lt;li&gt;Designing an experiment&lt;/li&gt; &lt;li&gt;Performing the experiment&lt;/li&gt; &lt;li&gt;Refining the hypothesis&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Software development:&lt;/strong&gt; The action of instructing computers to perform tasks&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Test Driven Design (TDD):&lt;/strong&gt; The process of &lt;ul&gt; &lt;li&gt;Writing the minimum unit test code to cause a unit test to fail&lt;/li&gt; &lt;li&gt;Writing the minimum production code to cause the unit test to pass&lt;/li&gt; &lt;li&gt;Iteratively repeating the first two steps to generalize the code&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;premises&quot;&gt;Premises&lt;/h2&gt; &lt;p&gt;In order for a syllogism to be valid, we must agree that the premises are true. I’ll list the two premises separately, and state my justification with each of them.&lt;/p&gt; &lt;h3 id=&quot;major-premise&quot;&gt;Major premise#&lt;/h3&gt; &lt;p&gt;The scientific method is the best way to advance technology.&lt;/p&gt; &lt;p&gt;Here the major term is “to advance technology” and the middle term is “scientific method”. The rate of technological advancement since the widespread use of the scientific method has proven this premise to be true. The scientific method provides two concrete outcomes which have opened the door for technological advancement.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The scientific method makes experimental results repeatable.&lt;/li&gt; &lt;li&gt;The scientific method normalizes the process of performing experiments.&lt;/li&gt; &lt;/ul&gt; &lt;h3 id=&quot;minor-premise&quot;&gt;Minor premise#&lt;/h3&gt; &lt;p&gt;TDD is the application of the scientific method to software development.&lt;/p&gt; &lt;p&gt;Here the minor term is “Test Driven Design (TDD)” and the middle term is again “scientific method”. This premise is not my idea. Rick Mugridge was the first to propose it, in &lt;a href=&quot;http://agile2003.agilealliance.org/files/P6Paper.pdf&quot;&gt;this paper&lt;/a&gt;. I would recommend reading his paper, it is rather interesting. To summarize, he maps the steps of the scientific method to the steps of the Test Driven Design process.&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;Scientific Method&lt;/th&gt; &lt;th&gt;Test Driven Design&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Make a hypothesis&lt;/td&gt; &lt;td&gt;Determine how the production code could fail&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Design an experiment&lt;/td&gt; &lt;td&gt;Write the test code to make a failing test&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Perform the experiment&lt;/td&gt; &lt;td&gt;Run the test code&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;Refine the hypothesis&lt;/td&gt; &lt;td&gt;Fix the production code&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;This one-to-one mapping between the steps of the scientific method and Test Driven Design indicates that TDD is the application of the scientific method to software development.&lt;/p&gt; &lt;h2 id=&quot;logic&quot;&gt;Logic&lt;/h2&gt; &lt;p&gt;The conclusion of the syllogism is this statement: “TDD is the best way to develop software”. Here the minor term is “TDD” and the major term is “to advance technology”.&lt;/p&gt; &lt;p&gt;In order for the logic to be valid, the minor term must be the subject of the conclusion, and the major term must be the object of the conclusion. Therefore, the terms “to advance technology” and “to develop software” must be interchangeable.&lt;/p&gt; &lt;p&gt;I believe they are interchangeable, since the tasks of software development are a proper subset of the tasks of technological advancement. Then in the conclusion, we can replace the more universal statement (to advance technology) with the more particular statement (to develop software).&lt;/p&gt; &lt;h2 id=&quot;how-to-disagree&quot;&gt;How to disagree&lt;/h2&gt; &lt;p&gt;As with any syllogism, an argument against this conclusion has three grounds for disagreement:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The terms are not defined correctly&lt;/li&gt; &lt;li&gt;The premises are not true&lt;/li&gt; &lt;li&gt;The logic is not valid&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For example, I may have defined the terms too narrowly. Maybe a broader definition of some term will render the conclusion less useful. Or you may not believe that TDD is the application of the scientific method to software development. Or possibly, the terms “to advance technology” and “to develop software” are not interchangeable in the conclusion.&lt;/p&gt; &lt;h2 id=&quot;if-this-is-true-what-does-it-mean&quot;&gt;If this is true, what does it mean?&lt;/h2&gt; &lt;p&gt;The benefit of this exercise for me is not so much the conclusion, but rather, a clear definition of times when TDD is not an appropriate software development practice. If I can define all of the times when TDD should not be used, then I also know when it should be used. Then I can convince myself that it is worth the initial effort, even if it seems to take longer to write some piece of software.&lt;/p&gt; &lt;p&gt;So under what conditions would we not use the scientific method?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When we do not know how to set up the experiment.&lt;/li&gt; &lt;li&gt;When the results of the experiment do not need to be reproduced or examined by others.&lt;/li&gt; &lt;li&gt;When the experiment is well known and understood, and will not change.&lt;/li&gt; &lt;li&gt;When we cannot set up a control for the experiment (e.g. theoretical physics).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Since TDD is the application of the scientific method to software development (the minor premise), we can mention the corresponding conditions which would prevent the use of TDD.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;When the expected behavior of the software is not known.&lt;/li&gt; &lt;li&gt;When the software is not to be used by clients or read by other developers.&lt;/li&gt; &lt;li&gt;When the software is well known and understood, and will not change (across a known API boundary).&lt;/li&gt; &lt;li&gt;When the software is prohibitively expensive to reliably test (e.g., GUI, multiple processes, multiple threads, non deterministic code, legacy code).&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;For most of the software I develop, none of these conditions hold. Therefore, I should be using TDD most of the time. Other developers may find that most of their development meets one or more of these conditions, so TDD is not the best approach. So it seems that TDD should be applied on a case-be-case basis.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Thanks to a number of my colleagues at ANSYS for their input on this topic.&lt;/em&gt;&lt;/p&gt; </content> </entry> <entry> <title>The best way to develop software</title> <link href="http://joshpeterson.github.io/blog/2013/the-best-way-develop-software/"/> <updated>2013-08-03T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/the-best-way-develop-software</id> <content type="html">&lt;p&gt;Techniques for for software development are many and varied. As the discipline software development matures we will no doubt adopt better techniques and set aside techniques which are not as effective (indeed, we already have done so). But is there a method of software development which is better than all of the rest?&lt;/p&gt; &lt;p&gt;If there is one thing I have learned as a developer, it is the simple fact that special cases &lt;em&gt;always&lt;/em&gt; exist. So I am rather confident that there is not one best technique for software development. However, after a few years of applying Test Driven Development to most of my software creation activities, I can’t help but think that TDD is the best way to develop software for &lt;em&gt;most&lt;/em&gt; situations.&lt;/p&gt; &lt;h2 id=&quot;when-should-we-use-tdd&quot;&gt;When should we use TDD?&lt;/h2&gt; &lt;p&gt;If we can determine all of the cases when TDD is not the best technique for software development, then we should also know when it is the best technique. I have come up with three arguments to prove the following statement.&lt;/p&gt; &lt;p&gt;Test Driven Design is the always the best technique for software development.&lt;/p&gt; &lt;ol&gt; &lt;li&gt;&lt;a href=&quot;/the-scientific-method-and-programming&quot;&gt;Test Driven Design is the application of the scientific method to software development.&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/the-importance-of-being-your-first-client&quot;&gt;Test Driven Design requires us to dogfood, making the use of our software easier for our clients&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/you-are-probably-already-doing-tdd&quot;&gt;We are already practicing Test Driven Design, so why not replace ourselves with a small shell script?&lt;/a&gt;&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;&lt;a href=&quot;/a-brief-introduction-to-syllogisms&quot;&gt;Syllogisms&lt;/a&gt; are a useful tool for analysis of statements. If we can state each of these arguments as a syllogism, then we can explore the conditions when the syllogism does not apply. Those are the same conditions when TDD is not the best method for software development.&lt;/p&gt; &lt;p&gt;If these are all, or at least most, of the cases where TDD does not apply, then we can be confident that TDD is the best method for software development in the other cases.&lt;/p&gt; &lt;p&gt;The following posts will describe a syllogism for each argument, and attempt to analyze each syllogism.&lt;/p&gt; </content> </entry> <entry> <title>A brief introduction to syllogisms</title> <link href="http://joshpeterson.github.io/blog/2013/a-brief-introduction-to-syllogisms/"/> <updated>2013-07-23T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/a-brief-introduction-to-syllogisms</id> <content type="html">&lt;p&gt;Arguments can be very productive. If you and I have a framework to argue without making personal attacks, the argument can be something like a science experiment for ideas. I might propose a theory, and you might test it, eventually disproving it. The syllogism is one framework for arguments which I often find useful.&lt;/p&gt; &lt;h1 id=&quot;what-is-a-syllogism&quot;&gt;What is a syllogism?&lt;/h1&gt; &lt;p&gt;A syllogism consists of two or more statements, connected by a logical argument, which imply a conclusion. If&lt;/p&gt; &lt;ul&gt; &lt;li&gt;The definitions of the terms are clear, and&lt;/li&gt; &lt;li&gt;The premises are true, and&lt;/li&gt; &lt;li&gt;The logic is valid&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Then we must agree on the conclusion.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1587318083?ie=UTF8&amp;amp;force-full-site=1&amp;amp;ref_=aw_bottom_links&quot;&gt;Socratic Logic&lt;/a&gt; is an excellent book by Peter Kreeft on the subject.&lt;/p&gt; &lt;h1 id=&quot;the-canonical-syllogism&quot;&gt;The canonical syllogism&lt;/h1&gt; &lt;p&gt;To demonstrate the rules described above, let’s look at a simple example.&lt;/p&gt; &lt;pre&gt; All men are mortal. Socrates is a man. Therefore, Socrates is mortal. &lt;/pre&gt; &lt;p&gt;This syllogism has three terms.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Man/men: a male human person (middle term)&lt;/li&gt; &lt;li&gt;Mortal: a state of existence in which one will die (major term)&lt;/li&gt; &lt;li&gt;Socrates: the Greek philosopher (minor term)&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;This syllogism has two premises.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Major, universal premise: All men are mortal.&lt;/li&gt; &lt;li&gt;Minor, specific premise: Socrates is a man.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Here the universal premise is connected to the specific premise via a shared term, (called the middle term). The logic implies that the subject of the minor premise (called the minor term) is a specific member of the group of all items described by the predicate of the major premise (called the major term). The conclusion then uses the minor term as its subject and the major term as its predicate.&lt;/p&gt; &lt;h1 id=&quot;how-to-disagree&quot;&gt;How to disagree&lt;/h1&gt; &lt;p&gt;If you don’t believe the conclusion is true, then you must argue that either&lt;/p&gt; &lt;ul&gt; &lt;li&gt;At least one term is not properly defined, or&lt;/li&gt; &lt;li&gt;At least one premise is not true, or&lt;/li&gt; &lt;li&gt;The logic is fallacious&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;These three items present the entire useful space of argument, which allows us to productively explore the correctness of the conclusion.&lt;/p&gt; &lt;p&gt;In this canonical syllogism, the definition of these three terms are rather simple (this won’t often be the case). But suppose that you argued about the definition of the term man. If you feel that man should be defined instead as a male human person or a male vampire, then you may feel the major premise is false, since vampires are not mortal.&lt;/p&gt; &lt;p&gt;You could instead accept the definition of man, and argue that the major premise is false, citing that Jesus is an immortal male human. If so, then there is a chance Socrates was also an immortal male human, rendering the conclusion uncertain.&lt;/p&gt; &lt;p&gt;You could also disagree with the minor premise, stating that Socrates was not an actual human, but instead he was a figment of Plato’s imagination. In that sense, he is immortal, living on in our minds just as he did in Plato’s.&lt;/p&gt; &lt;h1 id=&quot;why-do-syllogisms-matter&quot;&gt;Why do syllogisms matter?&lt;/h1&gt; &lt;p&gt;It is often difficult to be certain about a conclusion, since the space of possible arguments against the conclusion may be vast.&lt;/p&gt; &lt;p&gt;Syllogisms rather nicely limit that seemingly infinite space of arguments to a relevant finite space. Often all of the arguments in that finite space can be examined, which may then provide us with more confidence about the conclusion.&lt;/p&gt; &lt;p&gt;When the conclusion will be become the foundation for other decisions, confidence in its correctness is of paramount importance.&lt;/p&gt; </content> </entry> <entry> <title>A trade-off between generalization and performance</title> <link href="http://joshpeterson.github.io/blog/2013/a-tradeoff-between-generalization-and-performance/"/> <updated>2013-06-20T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/a-tradeoff-between-generalization-and-performance</id> <content type="html">&lt;p&gt;As a software developer, I am trained to look for generalizations. Much of my time is spent attempting to translate abstractions of concepts into concrete source code so they can be compiled and executed. This process always involves some level generalization (which is most of the fun). Often though, I’ve found that a generalization which makes sense for a given concept can lead to significant performance problems. A generalization is, after all, a leaky abstraction of some specific case. I try to create abstractions that don’t leak important information, but sometimes they do.&lt;/p&gt; &lt;h2 id=&quot;iterators-everywhere&quot;&gt;Iterators Everywhere&lt;/h2&gt; &lt;p&gt;The iterator pattern is one very useful abstraction. I have &lt;a href=&quot;https://github.com/joshpeterson/osoasso/blob/master/include/parallel_task.h&quot;&gt;used&lt;/a&gt; it to write a pthread-based map-reduce algorithm, and I have &lt;a href=&quot;https://github.com/joshpeterson/Nash/blob/master/TRPMONashCategorizationParallel.h&quot;&gt;used&lt;/a&gt; it to interact with the Intel Thread Building Blocks map-reduce implementation as well. So when I started to write an MPI-based map-reduce algorithm, I adopted the familiar iterator pattern. The constructor for my map-reduce implementation looked something like this (I’ve omitted a few unimportant details):&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;MpiMapReduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here TaskType and IteratorType are template arguments. As with most abstractions, the iterator pattern is a bit leaky. It assumes that the data to be iterated is stored in some location accessible to the iterator, but independent of the iterator. As long as the iterators are used in the same process as the data, this works well. For MPI though, this leaked detail becomes important.&lt;/p&gt; &lt;p&gt;In order to get the information about the elements of the container between the &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; iterators for each partition of the data to other MPI processes, that data must be explicitly sent to the other processes. In an application which uses MPI, data transfer between processes can often become a significant performance bottleneck, limiting the ability of the implementation to scale to many processes. In the general case, it may be necessary to send all of the data from the container between the &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; iterators for a given partition, since that is often the data which the other process needs to use to obtain its result.&lt;/p&gt; &lt;p&gt;Suppose that instead of exposing data stored in a container, the iterators expose data generated via an iterative algorithm.&lt;/p&gt; &lt;h2 id=&quot;not-your-standard-iterator&quot;&gt;Not Your Standard Iterator&lt;/h2&gt; &lt;p&gt;The iterator I’m using in this Nash solution search application is an iterator over a generative algorithm, so it has no container of stored data backing it. In fact, each iterator of this algorithm can be serialized to a single integer. So a general map-reduce implementation like the one I originally wrote above would generate the value at each iterator between begin and end, send that data (one integer per iterator) via MPI to another process, then use each integer to generate the data from the algorithm again, and provide it to the task!&lt;/p&gt; &lt;p&gt;To avoid the cost of generating the value for each iterator twice and sending far more data than necessary to each process, I could have &lt;code&gt;MpiMapReduce&lt;/code&gt; simply send the &lt;code&gt;begin&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; iterator for each partition to each MPI process. This would work well for generative iterators, but not for container-based iterators. The interface provided above indicates that any iterator will do, so it should be changed.&lt;/p&gt; &lt;h2 id=&quot;say-what-you-mean-mean-what-you-say&quot;&gt;Say What You Mean, Mean What You Say&lt;/h2&gt; &lt;p&gt;As a developer, I like the generalization provided by the iterator pattern. It allows me to re-use the &lt;code&gt;MpiMapReduce&lt;/code&gt; algorithm in many cases by separating the data to be operated on from the algorithm to operate on it. Since this generalization leaks some information about the way the iterator is implemented, and the use of that information allows a significant performance improvement, the generalization might be too costly.&lt;/p&gt; &lt;p&gt;A better interface makes the intention of the code more explicit:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;MpiMapReduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here the generalization of the &lt;code&gt;IteratorType&lt;/code&gt; has been replaced by the specific &lt;code&gt;int&lt;/code&gt; type. This signature should indicate to a client that this algorithm does not work with with iterators in general, but instead sends integers directly via MPI.&lt;/p&gt; &lt;p&gt;This change certainly limits the ability to re-use this code, since it will now work only with generative iterators which can be serialized to integers. But for those specific cases (which are the only cases I have for the feature I am developing), the performance of this algorithm is significantly better than the more general alternative.&lt;/p&gt; &lt;p&gt;The engineering decision is whether to use the generalization to foster re-use of non-trivial code, or to use the specific case to take advantage the details leaky by the generalization and provide better performance. For this case, I have chosen the latter.&lt;/p&gt; </content> </entry> <entry> <title>The (not so) surprising behavior of std::bind</title> <link href="http://joshpeterson.github.io/blog/2013/the-not-so-surprising-behavior-of-std-bind/"/> <updated>2013-06-04T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/the-not-so-surprising-behavior-of-std-bind</id> <content type="html">&lt;p&gt;Often when I am unit testing a method which accepts a function pointer, I first write a simple test to verify that the point-to-function is called. The C++11 standard has added &lt;a href=&quot;http://en.cppreference.com/w/cpp/utility/functional/bind&quot;&gt;&lt;code&gt;std::bind&lt;/code&gt;&lt;/a&gt; to easily create function pointers. When I used &lt;code&gt;std::bind&lt;/code&gt; in a recent project, I discovered what I thought was surprising behavior. After a bit more investigation, I found that the behavior is not so surprising at all, and in fact provides some useful flexibility.&lt;/p&gt; &lt;h2 id=&quot;to-copy-or-not-to-copy&quot;&gt;To Copy or Not to Copy&lt;/h2&gt; &lt;p&gt;I’ve recently been writing some code which implements a simple map-reduce algorithm using MPI. The constructor for the map-reduce implementation class is defined like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;MpiMapReduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IteratorType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_threads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The first thing I would expect the &lt;code&gt;map()&lt;/code&gt; method to do is call the provided partitioning method to partition the range of iterators. So I wrote a simple class to allow a unit test to determine if the partitioning method was called.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PartitioningTracker&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;public:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PartitioningTracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method_called_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method_called_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetPartitioningMethodCalled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method_called_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method_called_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Then in the unit test, I used &lt;code&gt;std::bind&lt;/code&gt; to bind the to &lt;code&gt;partition&lt;/code&gt; member function like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;PartitioningTracker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PartitioningTracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;To my surprise, I found that the partitioning method was never called. At least, the &lt;code&gt;GetPartitioningMethodCalled()&lt;/code&gt; method always returned false. It wasn’t until I added a copy constructor to the &lt;code&gt;PartitioningTracker&lt;/code&gt; class that I discovered the problem.&lt;/p&gt; &lt;h2 id=&quot;with-great-power-comes-great-responsibility&quot;&gt;With Great Power Comes Great Responsibility&lt;/h2&gt; &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/15264003/using-stdbind-with-member-function-use-object-pointer-or-not-for-this-argumen&quot;&gt;This&lt;/a&gt; answer on Stack Overflow helped to determine the cause of this behavior. It turns out that &lt;code&gt;std::bind&lt;/code&gt; has a number of overloads. The one I chose made a copy of the tracker object. So although my code in the &lt;code&gt;map()&lt;/code&gt; method was indeed calling the partitioning method, it was calling the method on an instance of &lt;code&gt;PartitionTracker&lt;/code&gt; which existed solely for the purpose of the &lt;code&gt;std::bind&lt;/code&gt; call, not on the instance of &lt;code&gt;PartitionTracker&lt;/code&gt; I had created. When my unit test asserted that &lt;code&gt;GetPartitioningMethodCalled()&lt;/code&gt; returned true, it failed!&lt;/p&gt; &lt;p&gt;Changing the test code to pass the address of the locally created &lt;code&gt;PartitionTracker&lt;/code&gt; instance solved the problem.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;PartitioningTracker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitioning_method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PartitioningTracker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tracker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;placeholders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;h2 id=&quot;the-full-story&quot;&gt;The Full Story&lt;/h2&gt; &lt;p&gt;To get a better idea of how the various overloads of &lt;code&gt;std::bind&lt;/code&gt; work, I wrote a simple test program.&lt;/p&gt; &lt;script src=&quot;https://gist.github.com/joshpeterson/5710863.js&quot;&gt;&lt;/script&gt; &lt;p&gt;This program will output the following:&lt;/p&gt; &lt;pre&gt; Bound to copy of tracker Method called _methodCalled value: false Bound to local instance of tracker Method called _methodCalled value: true Bound to refrence to tracker Method called _methodCalled value: true &lt;/pre&gt; &lt;p&gt;In all three cases, the method is called as expected, but only the final two cases call the method on the local instance of &lt;code&gt;Tracker&lt;/code&gt; class. You can see the code execute on Ideone &lt;a href=&quot;http://ideone.com/jQ6XBK&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;In hindsight, this behavior should not have been surprising. C++ uses value semantics to pass arguments by default, so it should have been clear why my unit test was not working as expected initially. In fact, this behavior provides maximum flexibility, allowing the caller of &lt;code&gt;std::bind&lt;/code&gt; to use it as he or she pleases.&lt;/p&gt; </content> </entry> <entry> <title>Improving Scalability in Clojure</title> <link href="http://joshpeterson.github.io/blog/2013/improving-scalability-in-clojure/"/> <updated>2013-05-11T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/improving-scalability-in-clojure</id> <content type="html">&lt;p&gt;In my &lt;a href=&quot;/blog/2013/scalability-in-a-functional-language/&quot;&gt;last post&lt;/a&gt; I compared the scalability of a CPU-bound algorithm in both C++ and Clojure. Although the Clojure implementation had no real data sharing, it used significantly more memory than necessary, which lead to false sharing, and limited the scalability of the implementation. In this post, I’ll explain my attempts to improve the scalability of the Clojure implementation by limiting its memory usage.&lt;/p&gt; &lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt; &lt;p&gt;I was unable to significantly lessen the memory usage of the Clojure implementation. By comparing the Clojure implementation on both the JVM and the CLR, it seems clear that less memory usage leads to fewer cache misses, and better scalability. Since this algorithm has no intrinsic data sharing, and can be implemented to scale effectively in an imperative language without too much difficulty.&lt;/p&gt; &lt;h2 id=&quot;stay-lazy&quot;&gt;Stay Lazy&lt;/h2&gt; &lt;p&gt;One of the most important tools provided by Clojure is the &lt;a href=&quot;http://clojure.org/sequences&quot;&gt;lazy sequence&lt;/a&gt;. A sequence of all prime numbers, for example, doesn’t actually store all prime numbers. Instead, it provides each prime number as the client asks, computing the next prime only when necessary. Certain actions in Clojure can limit the ability of the language to be lazy, requiring it to iterate large sequences and store the results in memory.&lt;/p&gt; &lt;p&gt;The partitioning function in my original implementation in Clojure suffered from this exact problem. The partitioning function is responsible for the separation of the input (large large sequence of consecutive integers, often millions of integers) into equally sized groups. Each thread will operate on one group. The original code for the partitioning function looks like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;defn&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partition-nash-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-partitions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-rows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-columns&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;number-of-nash-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-rows&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition-all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rem&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;take&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-partitions&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;take-last&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here is the section of this code which prevents Clojure’s normal laziness:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition-all&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;quot&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Here &lt;code&gt;games&lt;/code&gt; is a lazy sequence of all integers from 0 to the number of games. The &lt;a href=&quot;http://clojuredocs.org/clojure_core/1.3.0/clojure.core/partition-all&quot;&gt;&lt;code&gt;partition-all&lt;/code&gt;&lt;/a&gt; function iterates all of the integers and creates subsequences of a given size. Instead of using the laziness of Clojure sequences to minimize the memory usage for these large sequences, this implementation requires all of the integers to be stored in memory.&lt;/p&gt; &lt;h2 id=&quot;thinking-functionally&quot;&gt;Thinking Functionally&lt;/h2&gt; &lt;p&gt;Unfortunately, I find myself continuing to think in imperative languages even when I’m writing code in functional languages. So I found it useful to express this code in an imperative language to help me determine how to improve it.&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;Digression:&lt;/p&gt; &lt;p&gt;In high school, I remember talking with an exchange student from Brazil one day. He was very happy, since he had dreamt in English for the first time the previous night. This was an indication that he was beginning to think in English, instead of translating from English to Portuguese in his mind. This allowed him to think faster.&lt;/p&gt; &lt;p&gt;For the same reason, I often feel that I’m thinking to slowly while writing code in a functional language.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;If I express the code for the &lt;code&gt;partition-all&lt;/code&gt; function in C++, it might look like this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;When the code is expressed this way, I can clearly see that it will use a signifigant amount of memory, storing each of the consecutive integers. Instead, it should only store the start and end index of each partition. Here is a better implementation in C++:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_start_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_end_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number_of_games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_end_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partitions_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;push_back&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;make_pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_start_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_end_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_start_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_end_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current_end_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entries_in_current_partition&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The corresponding code in Clojure to return a sequence of only the start and end indices for each partition is this:&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries-per-partition&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-games&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries-per-partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entries-per-partition&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number-of-games&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;I often find that I understand Clojure code when I think about it backwards, using the REPL to unroll the meaning of each statement. Let’s consider this code for a 2x2 game (16 possible games) with partitions of size 4.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;n&quot;&gt;nash-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;This part of the code builds a lazy sequence of the values to iterate. It corresponds to the for loop in the C++ implementation.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;n&quot;&gt;nash-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mod&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;The next part of the code finds the starting index of each partition. Since we don’t use mutable state in Clojure, we cannot walk the end index of each partition as we do in C++. Instead, we do the reverse (in some sense), and pick off the start index of each partition from the sequence of all indices.&lt;/p&gt; &lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;n&quot;&gt;nash-clojure.core=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;conj&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt; &lt;p&gt;Finally, the code &lt;a href=&quot;http://clojuredocs.org/clojure_core/clojure.core/conj&quot;&gt;conjoins&lt;/a&gt; each start index with the corresponding end index by adding the partition size minus one to each start index. The result is a sequence of pairs, with each pair representing the start and end indices of a partition.&lt;/p&gt; &lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt; &lt;p&gt;The aim of these changes was to decrease the memory usage of the Clojure implementation, and hopefully improve the scalability of the implementation. The memory usage was measured using Process Explorer for a 5x5 game using one thread. Recall that the C++ implementation of the algorithm used only 1.7 MB of memory, while the initial Clojure implementation used 3.3 GB of memory.&lt;/p&gt; &lt;h3 id=&quot;improved-implementation-in-clojure&quot;&gt;Improved Implementation in Clojure#&lt;/h3&gt; &lt;p&gt;The improved Clojure implementation does indeed use less memory, consuming 2.5 GB. However, the memory usage is still significantly higher than the C++ implementation. Did this change improve the scalability of the implementation?&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdFlfMjdqaWNCSHBEQ3NYcFFPNTQyc2c&amp;amp;single=true&amp;amp;gid=4&amp;amp;output=html&quot;&gt;&lt;img src=&quot;/static/images/improving-scalability-in-clojure/nash-clojure-fix-memory-run-times.png&quot; alt=&quot;Nash Clojure implementation (with memory fix) run times chart&quot; title=&quot;Nash Clojure implementation (with memory fix) run times - follow the link to see the raw data.&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It looks like the scalability is not improved, so the high memory usage is likely still leading to false sharing.&lt;/p&gt; &lt;h3 id=&quot;improved-implementation-in-clojure-clr&quot;&gt;Improved Implementation in Clojure CLR#&lt;/h3&gt; &lt;p&gt;Still uncertain about whether the memory usage stemmed from my implementation, Clojure itself, or the JVM, I also tested this Clojure implementation using the &lt;a href=&quot;https://github.com/clojure/clojure-clr&quot;&gt;Clojure CLR&lt;/a&gt; port, which is an implementation of Clojure on the .NET runtime. I made a few changes, only replacing calls to Java with calls to C# in my code and the Clojure libraries I used. The Clojure CLR implementation of this algorithm is available &lt;a href=&quot;https://github.com/joshpeterson/nash-clojure/tree/CLR&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The memory usage pattern for Clojure CLR is rather different from the JVM implementation. Where the JVM implementation used a relatively constant amount of memory throughout the run, the CLR implementation started with a smaller memory footprint that continually increased. For the same problem size (5x5 games with one thread), the CLR implementation started off using 42 MB of memory, and increased to a maximum of 396 MB.&lt;/p&gt; &lt;p&gt;Although the memory usage was much less for the CLR implementation, the wall clock run time was much longer. To measure the scalability of the CLR implementation, I had to use an even smaller game size, 4x4 games. The chart below shows the scalability of the CLR implementation.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdFlfMjdqaWNCSHBEQ3NYcFFPNTQyc2c&amp;amp;single=true&amp;amp;gid=6&amp;amp;output=html&quot;&gt;&lt;img src=&quot;/static/images/improving-scalability-in-clojure/nash-clojure-clr-run-times.png&quot; alt=&quot;Nash Clojure CLR implementation run times chart&quot; title=&quot;Nash Clojure CLR implementation run times - follow the link to see the raw data.&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This implementation shows slightly better scalability than the JVM implementation, but it is still not nearly linear scalability, which I would expect from an algorithm with no intrinsic data sharing.&lt;/p&gt; &lt;h3 id=&quot;cache-misses&quot;&gt;Cache Misses#&lt;/h3&gt; &lt;p&gt;Last time, I surmised that the increased memory usage of the Clojure implementation may have lead to more cache misses than the C++ implementation, which in turn caused the scalability to suffer. I again measured the L2 and L3 cache misses with Intel VTune for the new JVM and CLR implementations. The data obtained are shown below:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;C++&lt;/th&gt; &lt;th&gt;Clojure&lt;/th&gt; &lt;th&gt;Clojure (memory fix)&lt;/th&gt; &lt;th&gt;Clojure (CLR)&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;L2 cache miss percentage&lt;/td&gt; &lt;td&gt;0.95%&lt;/td&gt; &lt;td&gt;8.16%&lt;/td&gt; &lt;td&gt;6.10%&lt;/td&gt; &lt;td&gt;2.62%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;L3 cache miss percentage&lt;/td&gt; &lt;td&gt;0.01%&lt;/td&gt; &lt;td&gt;4.19%&lt;/td&gt; &lt;td&gt;3.19%&lt;/td&gt; &lt;td&gt;2.73%&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;The improved Clojure algorithms do use less memory, and see fewer cache misses. The improved Clojure JVM implementation still uses a significant amount of memory, and as such, only has slightly fewer cache misses than the original JVM implementation.&lt;/p&gt; &lt;p&gt;Do these cache miss measurements correspond to improved scalability?&lt;/p&gt; &lt;h3 id=&quot;scalability-comparison&quot;&gt;Scalability Comparison#&lt;/h3&gt; &lt;p&gt;To have a better view of the differences in scalability between these four implementations, I calculated the percent error between the expected linear scalability wall clock time and the actual wall clock time for each number of threads. The chart below shows the comparison.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdFlfMjdqaWNCSHBEQ3NYcFFPNTQyc2c&amp;amp;single=true&amp;amp;gid=8&amp;amp;output=html&quot;&gt;&lt;img src=&quot;/static/images/improving-scalability-in-clojure/scalability-comparison.png&quot; alt=&quot;Comparison of scalability chart&quot; title=&quot;Scalability comparison - follow the link to see the raw data.&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;With the lack of actual data sharing, and the small memory footprint of the C++ implementation preventing false sharing, the imperative implementation maintains a consistent error of about 4% worse than linear scalability.&lt;/p&gt; &lt;p&gt;It is more interesting, I think, to compare the Clojure JVM and CLR implementations. Although the CLR implementation is significantly slower (in wall clock time) than the JVM implementations, it does exhibit scalability closer to the ideal linear scalability. In the JVM, both the original Clojure implementation and the one with less memory exhibit nearly identical scalability.&lt;/p&gt; &lt;p&gt;For this algorithm then, it seems that scalability is related to memory usage, and more specifically, to cache misses. The smaller the memory footprint, the smaller the time spent by the implementation waiting on cache misses, and the better the scalability.&lt;/p&gt; &lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt; &lt;p&gt;After this analysis, it seems the Clojure may not have been a good candidate to measure the scalability of this algorithm in a functional language. Clojure is a dynamic language, in the same family as Ruby or Python. It removes control of memory usage from the developer &lt;em&gt;by design&lt;/em&gt;. Both of the Clojure JVM implementations used much less memory on my laptop (where less memory is available) than on the desktop machine I used for testing. For many applications, this design decision is acceptable and often beneficial. Still, I suspect a more experienced Clojure developer could further improve the memory usage of my implementation, and therefore improve the scalability as well.&lt;/p&gt; &lt;p&gt;Scalability is difficult to achieve. An algorithm with no intrinsic data sharing can be implemented to scale in an imperative or functional language with little difference. Since the algorithm doesn’t require mutable state, the benefits of eliminating mutable state are not a significant advantage for the functional language.&lt;/p&gt; &lt;p&gt;More common cases will likely involve algorithms with data sharing, where mutable state can lead to contention in an imperative language. In these cases, functional languages, and features like Clojure’s software transactional memory, will often be beneficial.&lt;/p&gt; </content> </entry> <entry> <title>Scalability in a Functional Language</title> <link href="http://joshpeterson.github.io/blog/2013/scalability-in-a-functional-language/"/> <updated>2013-04-23T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/scalability-in-a-functional-language</id> <content type="html">&lt;p&gt;I’ve heard a lot of buzz recently about functional programming languages. Many well-respected developers and speakers have been making the case that functional languages will allow better use of multiple processors, because functional languages prevent data sharing.&lt;/p&gt; &lt;p&gt;I have very little experience with functional languages, so I wanted to try this for myself. Do functional languages make implementation of algorithms for multiple processors easy? As a novice functional developer, can I implement a CPU-bound algorithm that scales linearly using a functional language with less effort than I can in an imperative language?&lt;/p&gt; &lt;h2 id=&quot;tldr&quot;&gt;TL;DR&lt;/h2&gt; &lt;p&gt;Functional languages are not a panacea for multi-processor development. They prevent data sharing by default, and require the developer to think about shared data when it is used. However, development of a scalable, mulit-processor algorithm is still difficult. It requires intimate knowledge of both the problem domain and the development tools.&lt;/p&gt; &lt;h2 id=&quot;the-problem&quot;&gt;The Problem&lt;/h2&gt; &lt;p&gt;I’ve been aware of this problem from a young age - sharing. Imagine a large pile of Legos©:&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;http://www.flickr.com/photos/8331761@N07/2502135281/&quot;&gt;&lt;img src=&quot;/static/images/scalability-in-a-functional-language/pile-of-legos.jpg&quot; alt=&quot;A pile of Legos&amp;copy;&quot; title=&quot;Photo by musicmoon@rogers.com&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;If just one child is playing with these Legos©, we don’t have any problems. Maybe even two or three children could play together here, but what about eight, or ten, or twelve children? Soon, two or more children will want to use the same block. The ensuing contention will slow down the entire building process.&lt;/p&gt; &lt;p&gt;Implementation of an algorithm which scales to multiple processors faces the same problem. If any data (Legos©) are shared among the processors, the contention will cause the program to take longer to complete. As more processors become involved, some capability of each processor will be wasted, waiting for shared data.&lt;/p&gt; &lt;p&gt;Ideally, an implementation should scale &lt;em&gt;linearly&lt;/em&gt;, that is, the wall-clock time to execute it with two processors should be half the time to execute it with one processor. The time to execute it with four processors should be half the time required to execute it with two processors. In practice, this is difficult to achieve. Many implementations scale linearly up to a few processors, then suffer from increased contention as more processors are used.&lt;/p&gt; &lt;p&gt;In most imperative languages, data is shared between threads by default, often making data sharing difficult to find and eliminate. In functional languages data is not shared by default, giving the promise of writing scalable algorithms with less difficulty.&lt;/p&gt; &lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;/h2&gt; &lt;p&gt;I attempted to implement a CPU-bound algorithm in both C++ (imperative language) and Clojure (functional language). My goal was to compare the scalability of both algorithms using shared-memory parallelism. I &lt;em&gt;did not&lt;/em&gt; attempt to compare wall-clock performance.&lt;/p&gt; &lt;p&gt;I choose to implement an algorithm to categorize all of the two-player Nash games of a given size as I described in a &lt;a href=&quot;/a-brief-introduction-to-nash-games/&quot;&gt;previous post&lt;/a&gt; for a few reasons:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;I know this algorithm well&lt;/li&gt; &lt;li&gt;I already have a C++ implementation&lt;/li&gt; &lt;li&gt;The algorithm involves no data sharing&lt;/li&gt; &lt;/ul&gt; &lt;h2 id=&quot;the-tools&quot;&gt;The Tools&lt;/h2&gt; &lt;p&gt;I have chosen to use &lt;a href=&quot;http://isocpp.org&quot;&gt;C++&lt;/a&gt; as the imperative language. My implementation depends on the &lt;a href=&quot;http://boost.org&quot;&gt;Boost&lt;/a&gt; and &lt;a href=&quot;http://threadingbuildingblocks.org/&quot;&gt;Intel Threading Building Blocks&lt;/a&gt; libraries. The source code is available &lt;a href=&quot;https://github.com/joshpeterson/Nash&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;I have chosen &lt;a href=&quot;http://clojure.org/&quot;&gt;Clojure&lt;/a&gt; as the functional language. I am not using any additional libraries. The source code is available &lt;a href=&quot;https://github.com/joshpeterson/nash-clojure&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;the-disclaimer&quot;&gt;The Disclaimer&lt;/h2&gt; &lt;p&gt;I have some experience with C++ development. I have effectively no experience with Clojure development. I am rather certain that an experienced Clojure developer could provide a better implementation than I have. If you have suggestions to improve my implementation, please let me know! I would like to improve the implementation so that the results of this study can be more accurate.&lt;/p&gt; &lt;h2 id=&quot;the-setup&quot;&gt;The Setup&lt;/h2&gt; &lt;p&gt;I profiled both implementations on a Windows 7 64-bit machine with two &lt;a href=&quot;http://ark.intel.com/products/52577/&quot;&gt;Intel Xeon X5675&lt;/a&gt; processors. I ran each implementation using between one and twelve threads. For each thread count, I ran the implementation five consecutive times, and averaged the wall-clock run time for each. I used games of size 6x6 for the C++ implementation. The Clojure implementation used signifigantly more memory than the C++ implementation, so I was unable to complete a run with games of size 6x6 without exhausting all of the memory on the machine. Instead, I used games of size 5x5 for the Clojure implementation.&lt;/p&gt; &lt;p&gt;The DOS batch file used to run the implementations is available &lt;a href=&quot;https://gist.github.com/joshpeterson/5429267&quot;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;h2 id=&quot;the-results&quot;&gt;The Results&lt;/h2&gt; &lt;p&gt;The C++ implementation almost achieved linear scalability, which was a surprising result. The Clojure implementation demonstrated consistently sub-linear scalability up to six threads. For more than six threads the wall-clock time for the execution was effectively unchanged.&lt;/p&gt; &lt;h3 id=&quot;scalability&quot;&gt;Scalability#&lt;/h3&gt; &lt;p&gt;The chart below shows the scalability of the C++ implementation.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdFlfMjdqaWNCSHBEQ3NYcFFPNTQyc2c&amp;amp;single=true&amp;amp;gid=0&amp;amp;output=html&quot;&gt;&lt;img src=&quot;/static/images/scalability-in-a-functional-language/nash-cpp-run-times.png&quot; alt=&quot;Nash C++ implementation run times chart&quot; title=&quot;Nash C++ implementation run times - follow the link to see the raw data.&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The actual run time is only slightly worse than linear scalability. I did not expect the implementation to be this good. I suspect that most of the scalability comes from the Intel TBB library implementation. As we’ll see later, the C++ implementation has very few cache misses, which probably improves the scalability of the implementation.&lt;/p&gt; &lt;p&gt;The chart below shows the scalability of the Clojure implementation.&lt;/p&gt; &lt;p&gt;&lt;a href=&quot;https://docs.google.com/spreadsheet/pub?key=0Aviq84mNTIzZdFlfMjdqaWNCSHBEQ3NYcFFPNTQyc2c&amp;amp;single=true&amp;amp;gid=2&amp;amp;output=html&quot;&gt;&lt;img src=&quot;/static/images/scalability-in-a-functional-language/nash-clojure-run-times.png&quot; alt=&quot;Nash Clojure implementation run times chart&quot; title=&quot;Nash Clojure implementation run times - follow the link to see the raw data.&quot; /&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This implementation gets nearly linear scalability for two and three threads, then tails off and fails to improve after six threads, effectively wasting CPU resources for any more than six threads. Since the algorithm requires no data sharing, and the Clojure implementation does not have any shared data, this seems like a surprising result. I believe that I can explain the problem though.&lt;/p&gt; &lt;h3 id=&quot;memory-usage&quot;&gt;Memory Usage#&lt;/h3&gt; &lt;p&gt;Once the execution of each algorithm got started, I compared the memory usage, measuring it with Process Explorer. For this test, both implementations used eight threads. The difference is dramatic. The C++ implementation used 1.7 MB of memory, but the Clojure implementation used 3.3 GB of memory. Keep in mind that the C++ implementation was running with games of size 6x6, whereas the Clojure implementation was operating on a much smaller problem, games of size 5x5. So although the algorithm requires no state (other than the results), the Clojure implementation was clearly using far too much memory. This memory usage pattern lead me to consider that the cause of the scalability problem in the Clojure implementation may be related to cache misses.&lt;/p&gt; &lt;h3 id=&quot;cache-misses&quot;&gt;Cache Misses#&lt;/h3&gt; &lt;p&gt;I used Intel VTune Amplifier XE 2013 to profile the performance of each implemenation running with eight threads. The Intel Xeon X5675 processor has 2MB of L2 cache and 12 MB of L3 cache, so the entire address space used by the C++ implementation can fit into the L2 cache. I would expect very few misses for the L2 cache, and almost no misses for the L3 cache with the C++ implementation. Since the Clojure implementation used signifigantly more memory, I expected to see many more cache misses.&lt;/p&gt; &lt;p&gt;Using the profiling guide &lt;a href=&quot;http://software.intel.com/sites/default/files/m/a/d/2/2/e/15529-Intel_VTune_Using.pdf&quot;&gt;here&lt;/a&gt;, I computed the percent of cache misses using these formulas:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;L2: (((MEM_LOAD_RETIRED.LLC_UNSHARED_HIT * 35) + (MEM_LOAD_RETIRED.OTHER_CORE_L2_HIT_HITM * 74)) / CPU_CLK_UNHALTED.THREAD) * 100&lt;/li&gt; &lt;li&gt;L3: ((MEM_LOAD_RETIRED.LLC_MISS * 180) / CPU_CLK_UNHALTED.THREAD)* 100&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;and I obtained the following results:&lt;/p&gt; &lt;center&gt; &lt;table class=&quot;gridtable&quot;&gt; &lt;tr&gt; &lt;th&gt;&lt;/th&gt; &lt;th&gt;C++&lt;/th&gt; &lt;th&gt;Clojure&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;L2 cache miss percentage&lt;/td&gt; &lt;td&gt;0.95%&lt;/td&gt; &lt;td&gt;8.16%&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;L3 cache miss percentage&lt;/td&gt; &lt;td&gt;0.01%&lt;/td&gt; &lt;td&gt;4.19%&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; &lt;/center&gt; &lt;p&gt;I believe that these results explain the difference in scalability. The Clojure implementation spent signifigantly more time dealing with cache misses. The C++ implementation effectively never missed L3 cache, meaning that it could completely avoid going to main memory. Althougth the Clojure implementation has no real data shareing, it seems to suffer from &lt;a href=&quot;http://en.wikipedia.org/wiki/False_sharing&quot;&gt;false sharing&lt;/a&gt;, often exhausting the L2 and L3 caches.&lt;/p&gt; &lt;p&gt;Suppose that we attempted to fix the Lego© contention described above by separating some of the blocks into groups, and giving each pair of children one group of blocks to use. Most of the blocks could still be in one pile that the children could access, but we’ll have an adult manage that pile, and make sure the only one or two children can takes blocks from it at a time.&lt;/p&gt; &lt;p&gt;In the C++ implementation, the children have enough blocks in their local pile to keep them happy, very few children go to the larger pile and ask permisson to use blocks. However, in the Clojure implementation, the children are going to the larger pile much more frequently. As the number of children increases, the adult managing the pile has more work to do, and we often have a line of children waiting for access to the large pile.&lt;/p&gt; &lt;p&gt;Unsurprisingly then, the overall time required to build with the blocks increases. At some point, adding additional children to the job will not make the overall time any better.&lt;/p&gt; &lt;h2 id=&quot;the-next-challenge&quot;&gt;The Next Challenge&lt;/h2&gt; &lt;p&gt;I don’t believe that the Clojure implementation should need to use this much memory. I suspect this is caused mainly by my lack of experience with Clojure development. So the next step is to find the part of the Clojure implementation using that memory, and replace it. Then I expect the implementation to scale much better.&lt;/p&gt; </content> </entry> <entry> <title>A brief introduction to Nash games</title> <link href="http://joshpeterson.github.io/blog/2013/a-brief-introduction-to-nash-games/"/> <updated>2013-04-19T00:00:00+00:00</updated> <id>http://joshpeterson.github.io/blog/2013/a-brief-introduction-to-nash-games</id> <content type="html">&lt;p&gt;Nash games describe a branch of game theory where two evenly matched players compete to each minimize an objective function by choosing from a fixed set of input values.&lt;/p&gt; &lt;p&gt;Suppose Player 1 has one control variable \(x\), which can take on values or \(x_1\), \(x_2\), or \(x_3\). Likewise Player 2 has one control variable \(y\), which can take on values \(y_1\), \(y_2\), or \(y_3\). The objective functions for players 1 and 2 are \(J_1\) and \(J_2\), respectively. The game below shows the values of the objective functions for each combination of \(x_i\), \(y_i\).&lt;/p&gt; \[\begin{array}{c|cccc} &amp;amp; &amp;amp; &amp;amp; P_2 &amp;amp; \\ \hline &amp;amp; &amp;amp; y_1 &amp;amp; y_2 &amp;amp; y_3 \\ &amp;amp; x_1 &amp;amp; 5.3, 7.8 &amp;amp; 3.8, 1.2 &amp;amp; 5.7, 1.4 \\ P_1 &amp;amp; x_2 &amp;amp; 9.6, 3.1 &amp;amp; 8.7, 4.0 &amp;amp; 3.5, 2.1 \\ &amp;amp; x_3 &amp;amp; 3.4, 9.8 &amp;amp; 4.6, 3.9 &amp;amp; 2.2, 5.6 \end{array}\] &lt;p&gt;So in this example \(J_1(x_1,y_1) = 5.3\) and \(J_2(x_1,y_1) = 7.8\). In most games both players attempt to minimize their respective object functions. A Nash solution is some \(\left\{x_N, y_N\right\}\) such that both of these relationships are true:&lt;/p&gt; \[J_1(x_N,y_N) \le J_1(x,y_N) \forall x \in X\] \[J_2(x_N,y_N) \le J_2(x_N,y) \forall y \in Y\] &lt;p&gt;Where \(X\) is the set of all possible values of \(x\) and \(Y\) is the set of all possible values of \(y\). In other words, if player 2 chooses a certain value of \(y\), player 1 will choose the least value of \(x\) in the corresponding column.&lt;/p&gt; &lt;p&gt;The game play might proceed like this:&lt;/p&gt; &lt;ol&gt; &lt;li&gt;Player 2 choose \(y_1\), so player 1 chooses \(x_3\)&lt;/li&gt; &lt;li&gt;Player 2 then reacts by choosing \(y_2\), so player 1 changes to \(x_1\)&lt;/li&gt; &lt;li&gt;Player 2 is unwilling to change, since \(J_2\) does not have any values for \(x_1\) lower than 1.2&lt;/li&gt; &lt;/ol&gt; &lt;p&gt;The game has reached a point where neither player will change their input. This is called the Nash equilibrium. We say that \(\left\{x_1, y_2\right\}\) is a Nash solution.&lt;/p&gt; &lt;p&gt;We can place any game into one of the following three categories:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Games with no Nash solutions&lt;/li&gt; &lt;li&gt;Games with exactly one Nash solution&lt;/li&gt; &lt;li&gt;Games with more than one Nash solution&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;It turns out that we can categorize games this way without knowing the objective functions \(J_1\) and \(J_2\). We need to know only the least value for \(J_1\) in each column, and the least value for \(J_2\) in each row. Since the players are attempting to minimize their objective functions, the other values don’t matter. If we represent the least value of \(J_1\) in each column and the least value of \(J_2\) in each row with a 1, and make the other values 0, the game above looks like this:&lt;/p&gt; \[\begin{array}{c|cccc} &amp;amp; &amp;amp; &amp;amp; P_2 &amp;amp; \\ \hline &amp;amp; &amp;amp; y_1 &amp;amp; y_2 &amp;amp; y_3 \\ &amp;amp; x_1 &amp;amp; 0,0 &amp;amp; 1,1 &amp;amp; 0,0 \\ P_1 &amp;amp; x_2 &amp;amp; 0,0 &amp;amp; 0,0 &amp;amp; 0,1 \\ &amp;amp; x_3 &amp;amp; 1,0 &amp;amp; 0,1 &amp;amp; 1,0 \end{array}\] &lt;p&gt;Then any \(\left\{x_N, y_N\right\}\) where \(x_N = 1\) and \(y_N = 1\) is a Nash solution. This game has a single Nash solution at \(\left\{x_1, y_2\right\}\). So no matter which player starts the game, and which input that player initially chooses, the game will always end with player 1 using value \(x_1\) and player 2 using value \(y_2\).&lt;/p&gt; &lt;p&gt;For a game of a given size, there are a finite number of possible outcomes. So it is possible to write an algorithm to categorize all of the possible games of a given size into one of the three categories above.&lt;/p&gt; &lt;p&gt;This algorithm is interesting to use in the study of scalability of an implementation to multiple processors. It is not too difficult to write an implementation which is CPU-bound and does not have any real data sharing. That is, the categorization of each game is independent of all other games. Therefore, it should be possible to implement this algorithm so that it scales linearly to any number of processors.&lt;/p&gt; </content> </entry> </feed>